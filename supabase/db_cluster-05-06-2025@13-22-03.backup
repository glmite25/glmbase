--
-- PostgreSQL database cluster dump
--

SET default_transaction_read_only = off;

SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;

--
-- Roles
--

CREATE ROLE anon;
ALTER ROLE anon WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticated;
ALTER ROLE authenticated WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE authenticator;
ALTER ROLE authenticator WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE dashboard_user;
ALTER ROLE dashboard_user WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB NOLOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE pgbouncer;
ALTER ROLE pgbouncer WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE postgres;
ALTER ROLE postgres WITH NOSUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE service_role;
ALTER ROLE service_role WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_admin;
ALTER ROLE supabase_admin WITH SUPERUSER INHERIT CREATEROLE CREATEDB LOGIN REPLICATION BYPASSRLS;
CREATE ROLE supabase_auth_admin;
ALTER ROLE supabase_auth_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_read_only_user;
ALTER ROLE supabase_read_only_user WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN NOREPLICATION BYPASSRLS;
CREATE ROLE supabase_realtime_admin;
ALTER ROLE supabase_realtime_admin WITH NOSUPERUSER NOINHERIT NOCREATEROLE NOCREATEDB NOLOGIN NOREPLICATION NOBYPASSRLS;
CREATE ROLE supabase_replication_admin;
ALTER ROLE supabase_replication_admin WITH NOSUPERUSER INHERIT NOCREATEROLE NOCREATEDB LOGIN REPLICATION NOBYPASSRLS;
CREATE ROLE supabase_storage_admin;
ALTER ROLE supabase_storage_admin WITH NOSUPERUSER NOINHERIT CREATEROLE NOCREATEDB LOGIN NOREPLICATION NOBYPASSRLS;

--
-- User Configurations
--

--
-- User Config "anon"
--

ALTER ROLE anon SET statement_timeout TO '3s';

--
-- User Config "authenticated"
--

ALTER ROLE authenticated SET statement_timeout TO '8s';

--
-- User Config "authenticator"
--

ALTER ROLE authenticator SET session_preload_libraries TO 'safeupdate';
ALTER ROLE authenticator SET statement_timeout TO '8s';
ALTER ROLE authenticator SET lock_timeout TO '8s';

--
-- User Config "postgres"
--

ALTER ROLE postgres SET search_path TO E'\\$user', 'public', 'extensions';

--
-- User Config "supabase_admin"
--

ALTER ROLE supabase_admin SET search_path TO '$user', 'public', 'auth', 'extensions';
ALTER ROLE supabase_admin SET log_statement TO 'none';

--
-- User Config "supabase_auth_admin"
--

ALTER ROLE supabase_auth_admin SET search_path TO 'auth';
ALTER ROLE supabase_auth_admin SET idle_in_transaction_session_timeout TO '60000';
ALTER ROLE supabase_auth_admin SET log_statement TO 'none';

--
-- User Config "supabase_storage_admin"
--

ALTER ROLE supabase_storage_admin SET search_path TO 'storage';
ALTER ROLE supabase_storage_admin SET log_statement TO 'none';


--
-- Role memberships
--

GRANT anon TO authenticator GRANTED BY postgres;
GRANT anon TO postgres GRANTED BY supabase_admin;
GRANT authenticated TO authenticator GRANTED BY postgres;
GRANT authenticated TO postgres GRANTED BY supabase_admin;
GRANT authenticator TO supabase_storage_admin GRANTED BY supabase_admin;
GRANT pg_monitor TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO postgres GRANTED BY supabase_admin;
GRANT pg_read_all_data TO supabase_read_only_user GRANTED BY postgres;
GRANT pg_signal_backend TO postgres GRANTED BY supabase_admin;
GRANT service_role TO authenticator GRANTED BY postgres;
GRANT service_role TO postgres GRANTED BY supabase_admin;
GRANT supabase_realtime_admin TO postgres GRANTED BY supabase_admin;






--
-- Databases
--

--
-- Database "template1" dump
--

\connect template1

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.13 (Debian 15.13-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- PostgreSQL database dump complete
--

--
-- Database "postgres" dump
--

\connect postgres

--
-- PostgreSQL database dump
--

-- Dumped from database version 15.8
-- Dumped by pg_dump version 15.13 (Debian 15.13-1.pgdg120+1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: auth; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA auth;


ALTER SCHEMA auth OWNER TO supabase_admin;

--
-- Name: extensions; Type: SCHEMA; Schema: -; Owner: postgres
--

CREATE SCHEMA extensions;


ALTER SCHEMA extensions OWNER TO postgres;

--
-- Name: graphql; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql;


ALTER SCHEMA graphql OWNER TO supabase_admin;

--
-- Name: graphql_public; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA graphql_public;


ALTER SCHEMA graphql_public OWNER TO supabase_admin;

--
-- Name: pgbouncer; Type: SCHEMA; Schema: -; Owner: pgbouncer
--

CREATE SCHEMA pgbouncer;


ALTER SCHEMA pgbouncer OWNER TO pgbouncer;

--
-- Name: realtime; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA realtime;


ALTER SCHEMA realtime OWNER TO supabase_admin;

--
-- Name: storage; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA storage;


ALTER SCHEMA storage OWNER TO supabase_admin;

--
-- Name: vault; Type: SCHEMA; Schema: -; Owner: supabase_admin
--

CREATE SCHEMA vault;


ALTER SCHEMA vault OWNER TO supabase_admin;

--
-- Name: pg_graphql; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_graphql WITH SCHEMA graphql;


--
-- Name: EXTENSION pg_graphql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_graphql IS 'pg_graphql: GraphQL support';


--
-- Name: pg_stat_statements; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pg_stat_statements WITH SCHEMA extensions;


--
-- Name: EXTENSION pg_stat_statements; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pg_stat_statements IS 'track planning and execution statistics of all SQL statements executed';


--
-- Name: pgcrypto; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgcrypto WITH SCHEMA extensions;


--
-- Name: EXTENSION pgcrypto; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgcrypto IS 'cryptographic functions';


--
-- Name: pgjwt; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS pgjwt WITH SCHEMA extensions;


--
-- Name: EXTENSION pgjwt; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION pgjwt IS 'JSON Web Token API for Postgresql';


--
-- Name: supabase_vault; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS supabase_vault WITH SCHEMA vault;


--
-- Name: EXTENSION supabase_vault; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION supabase_vault IS 'Supabase Vault Extension';


--
-- Name: uuid-ossp; Type: EXTENSION; Schema: -; Owner: -
--

CREATE EXTENSION IF NOT EXISTS "uuid-ossp" WITH SCHEMA extensions;


--
-- Name: EXTENSION "uuid-ossp"; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION "uuid-ossp" IS 'generate universally unique identifiers (UUIDs)';


--
-- Name: aal_level; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.aal_level AS ENUM (
    'aal1',
    'aal2',
    'aal3'
);


ALTER TYPE auth.aal_level OWNER TO supabase_auth_admin;

--
-- Name: code_challenge_method; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.code_challenge_method AS ENUM (
    's256',
    'plain'
);


ALTER TYPE auth.code_challenge_method OWNER TO supabase_auth_admin;

--
-- Name: factor_status; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_status AS ENUM (
    'unverified',
    'verified'
);


ALTER TYPE auth.factor_status OWNER TO supabase_auth_admin;

--
-- Name: factor_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.factor_type AS ENUM (
    'totp',
    'webauthn',
    'phone'
);


ALTER TYPE auth.factor_type OWNER TO supabase_auth_admin;

--
-- Name: one_time_token_type; Type: TYPE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TYPE auth.one_time_token_type AS ENUM (
    'confirmation_token',
    'reauthentication_token',
    'recovery_token',
    'email_change_token_new',
    'email_change_token_current',
    'phone_change_token'
);


ALTER TYPE auth.one_time_token_type OWNER TO supabase_auth_admin;

--
-- Name: app_role; Type: TYPE; Schema: public; Owner: postgres
--

CREATE TYPE public.app_role AS ENUM (
    'admin',
    'user',
    'superuser'
);


ALTER TYPE public.app_role OWNER TO postgres;

--
-- Name: action; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.action AS ENUM (
    'INSERT',
    'UPDATE',
    'DELETE',
    'TRUNCATE',
    'ERROR'
);


ALTER TYPE realtime.action OWNER TO supabase_admin;

--
-- Name: equality_op; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.equality_op AS ENUM (
    'eq',
    'neq',
    'lt',
    'lte',
    'gt',
    'gte',
    'in'
);


ALTER TYPE realtime.equality_op OWNER TO supabase_admin;

--
-- Name: user_defined_filter; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.user_defined_filter AS (
	column_name text,
	op realtime.equality_op,
	value text
);


ALTER TYPE realtime.user_defined_filter OWNER TO supabase_admin;

--
-- Name: wal_column; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_column AS (
	name text,
	type_name text,
	type_oid oid,
	value jsonb,
	is_pkey boolean,
	is_selectable boolean
);


ALTER TYPE realtime.wal_column OWNER TO supabase_admin;

--
-- Name: wal_rls; Type: TYPE; Schema: realtime; Owner: supabase_admin
--

CREATE TYPE realtime.wal_rls AS (
	wal jsonb,
	is_rls_enabled boolean,
	subscription_ids uuid[],
	errors text[]
);


ALTER TYPE realtime.wal_rls OWNER TO supabase_admin;

--
-- Name: email(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.email() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.email', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'email')
  )::text
$$;


ALTER FUNCTION auth.email() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION email(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.email() IS 'Deprecated. Use auth.jwt() -> ''email'' instead.';


--
-- Name: jwt(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.jwt() RETURNS jsonb
    LANGUAGE sql STABLE
    AS $$
  select 
    coalesce(
        nullif(current_setting('request.jwt.claim', true), ''),
        nullif(current_setting('request.jwt.claims', true), '')
    )::jsonb
$$;


ALTER FUNCTION auth.jwt() OWNER TO supabase_auth_admin;

--
-- Name: role(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.role() RETURNS text
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.role', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'role')
  )::text
$$;


ALTER FUNCTION auth.role() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION role(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.role() IS 'Deprecated. Use auth.jwt() -> ''role'' instead.';


--
-- Name: uid(); Type: FUNCTION; Schema: auth; Owner: supabase_auth_admin
--

CREATE FUNCTION auth.uid() RETURNS uuid
    LANGUAGE sql STABLE
    AS $$
  select 
  coalesce(
    nullif(current_setting('request.jwt.claim.sub', true), ''),
    (nullif(current_setting('request.jwt.claims', true), '')::jsonb ->> 'sub')
  )::uuid
$$;


ALTER FUNCTION auth.uid() OWNER TO supabase_auth_admin;

--
-- Name: FUNCTION uid(); Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON FUNCTION auth.uid() IS 'Deprecated. Use auth.jwt() -> ''sub'' instead.';


--
-- Name: grant_pg_cron_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_cron_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_cron'
  )
  THEN
    grant usage on schema cron to postgres with grant option;

    alter default privileges in schema cron grant all on tables to postgres with grant option;
    alter default privileges in schema cron grant all on functions to postgres with grant option;
    alter default privileges in schema cron grant all on sequences to postgres with grant option;

    alter default privileges for user supabase_admin in schema cron grant all
        on sequences to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on tables to postgres with grant option;
    alter default privileges for user supabase_admin in schema cron grant all
        on functions to postgres with grant option;

    grant all privileges on all tables in schema cron to postgres with grant option;
    revoke all on table cron.job from postgres;
    grant select on table cron.job to postgres with grant option;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_cron_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_cron_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_cron_access() IS 'Grants access to pg_cron';


--
-- Name: grant_pg_graphql_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_graphql_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
DECLARE
    func_is_graphql_resolve bool;
BEGIN
    func_is_graphql_resolve = (
        SELECT n.proname = 'resolve'
        FROM pg_event_trigger_ddl_commands() AS ev
        LEFT JOIN pg_catalog.pg_proc AS n
        ON ev.objid = n.oid
    );

    IF func_is_graphql_resolve
    THEN
        -- Update public wrapper to pass all arguments through to the pg_graphql resolve func
        DROP FUNCTION IF EXISTS graphql_public.graphql;
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language sql
        as $$
            select graphql.resolve(
                query := query,
                variables := coalesce(variables, '{}'),
                "operationName" := "operationName",
                extensions := extensions
            );
        $$;

        -- This hook executes when `graphql.resolve` is created. That is not necessarily the last
        -- function in the extension so we need to grant permissions on existing entities AND
        -- update default permissions to any others that are created after `graphql.resolve`
        grant usage on schema graphql to postgres, anon, authenticated, service_role;
        grant select on all tables in schema graphql to postgres, anon, authenticated, service_role;
        grant execute on all functions in schema graphql to postgres, anon, authenticated, service_role;
        grant all on all sequences in schema graphql to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on tables to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on functions to postgres, anon, authenticated, service_role;
        alter default privileges in schema graphql grant all on sequences to postgres, anon, authenticated, service_role;

        -- Allow postgres role to allow granting usage on graphql and graphql_public schemas to custom roles
        grant usage on schema graphql_public to postgres with grant option;
        grant usage on schema graphql to postgres with grant option;
    END IF;

END;
$_$;


ALTER FUNCTION extensions.grant_pg_graphql_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_graphql_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_graphql_access() IS 'Grants access to pg_graphql';


--
-- Name: grant_pg_net_access(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.grant_pg_net_access() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
  IF EXISTS (
    SELECT 1
    FROM pg_event_trigger_ddl_commands() AS ev
    JOIN pg_extension AS ext
    ON ev.objid = ext.oid
    WHERE ext.extname = 'pg_net'
  )
  THEN
    IF NOT EXISTS (
      SELECT 1
      FROM pg_roles
      WHERE rolname = 'supabase_functions_admin'
    )
    THEN
      CREATE USER supabase_functions_admin NOINHERIT CREATEROLE LOGIN NOREPLICATION;
    END IF;

    GRANT USAGE ON SCHEMA net TO supabase_functions_admin, postgres, anon, authenticated, service_role;

    IF EXISTS (
      SELECT FROM pg_extension
      WHERE extname = 'pg_net'
      -- all versions in use on existing projects as of 2025-02-20
      -- version 0.12.0 onwards don't need these applied
      AND extversion IN ('0.2', '0.6', '0.7', '0.7.1', '0.8', '0.10.0', '0.11.0')
    ) THEN
      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SECURITY DEFINER;

      ALTER function net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;
      ALTER function net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) SET search_path = net;

      REVOKE ALL ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;
      REVOKE ALL ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) FROM PUBLIC;

      GRANT EXECUTE ON FUNCTION net.http_get(url text, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
      GRANT EXECUTE ON FUNCTION net.http_post(url text, body jsonb, params jsonb, headers jsonb, timeout_milliseconds integer) TO supabase_functions_admin, postgres, anon, authenticated, service_role;
    END IF;
  END IF;
END;
$$;


ALTER FUNCTION extensions.grant_pg_net_access() OWNER TO supabase_admin;

--
-- Name: FUNCTION grant_pg_net_access(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.grant_pg_net_access() IS 'Grants access to pg_net';


--
-- Name: pgrst_ddl_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_ddl_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  cmd record;
BEGIN
  FOR cmd IN SELECT * FROM pg_event_trigger_ddl_commands()
  LOOP
    IF cmd.command_tag IN (
      'CREATE SCHEMA', 'ALTER SCHEMA'
    , 'CREATE TABLE', 'CREATE TABLE AS', 'SELECT INTO', 'ALTER TABLE'
    , 'CREATE FOREIGN TABLE', 'ALTER FOREIGN TABLE'
    , 'CREATE VIEW', 'ALTER VIEW'
    , 'CREATE MATERIALIZED VIEW', 'ALTER MATERIALIZED VIEW'
    , 'CREATE FUNCTION', 'ALTER FUNCTION'
    , 'CREATE TRIGGER'
    , 'CREATE TYPE', 'ALTER TYPE'
    , 'CREATE RULE'
    , 'COMMENT'
    )
    -- don't notify in case of CREATE TEMP table or other objects created on pg_temp
    AND cmd.schema_name is distinct from 'pg_temp'
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_ddl_watch() OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.pgrst_drop_watch() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $$
DECLARE
  obj record;
BEGIN
  FOR obj IN SELECT * FROM pg_event_trigger_dropped_objects()
  LOOP
    IF obj.object_type IN (
      'schema'
    , 'table'
    , 'foreign table'
    , 'view'
    , 'materialized view'
    , 'function'
    , 'trigger'
    , 'type'
    , 'rule'
    )
    AND obj.is_temporary IS false -- no pg_temp objects
    THEN
      NOTIFY pgrst, 'reload schema';
    END IF;
  END LOOP;
END; $$;


ALTER FUNCTION extensions.pgrst_drop_watch() OWNER TO supabase_admin;

--
-- Name: set_graphql_placeholder(); Type: FUNCTION; Schema: extensions; Owner: supabase_admin
--

CREATE FUNCTION extensions.set_graphql_placeholder() RETURNS event_trigger
    LANGUAGE plpgsql
    AS $_$
    DECLARE
    graphql_is_dropped bool;
    BEGIN
    graphql_is_dropped = (
        SELECT ev.schema_name = 'graphql_public'
        FROM pg_event_trigger_dropped_objects() AS ev
        WHERE ev.schema_name = 'graphql_public'
    );

    IF graphql_is_dropped
    THEN
        create or replace function graphql_public.graphql(
            "operationName" text default null,
            query text default null,
            variables jsonb default null,
            extensions jsonb default null
        )
            returns jsonb
            language plpgsql
        as $$
            DECLARE
                server_version float;
            BEGIN
                server_version = (SELECT (SPLIT_PART((select version()), ' ', 2))::float);

                IF server_version >= 14 THEN
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql extension is not enabled.'
                            )
                        )
                    );
                ELSE
                    RETURN jsonb_build_object(
                        'errors', jsonb_build_array(
                            jsonb_build_object(
                                'message', 'pg_graphql is only available on projects running Postgres 14 onwards.'
                            )
                        )
                    );
                END IF;
            END;
        $$;
    END IF;

    END;
$_$;


ALTER FUNCTION extensions.set_graphql_placeholder() OWNER TO supabase_admin;

--
-- Name: FUNCTION set_graphql_placeholder(); Type: COMMENT; Schema: extensions; Owner: supabase_admin
--

COMMENT ON FUNCTION extensions.set_graphql_placeholder() IS 'Reintroduces placeholder function for graphql_public.graphql';


--
-- Name: get_auth(text); Type: FUNCTION; Schema: pgbouncer; Owner: supabase_admin
--

CREATE FUNCTION pgbouncer.get_auth(p_usename text) RETURNS TABLE(username text, password text)
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
begin
    raise debug 'PgBouncer auth request: %', p_usename;

    return query
    select 
        rolname::text, 
        case when rolvaliduntil < now() 
            then null 
            else rolpassword::text 
        end 
    from pg_authid 
    where rolname=$1 and rolcanlogin;
end;
$_$;


ALTER FUNCTION pgbouncer.get_auth(p_usename text) OWNER TO supabase_admin;

--
-- Name: add_super_admin_by_email(text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.add_super_admin_by_email(admin_email text) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    user_id_var UUID;
    result JSONB;
    existing_role TEXT;
BEGIN
    -- Normalize email (convert to lowercase)
    admin_email := LOWER(admin_email);
    
    -- Check if the user exists
    SELECT id INTO user_id_var
    FROM auth.users
    WHERE email = admin_email;
    
    IF user_id_var IS NULL THEN
        RETURN jsonb_build_object(
            'success', false,
            'message', 'User with email ' || admin_email || ' not found',
            'status', 'NOT_FOUND'
        );
    END IF;
    
    -- Check if the user already has a superuser role
    -- Fixed: Use table alias and reference the variable with a different name
    SELECT ur.role INTO existing_role
    FROM public.user_roles ur
    WHERE ur.user_id = user_id_var
    AND ur.role = 'superuser';
    
    IF existing_role IS NOT NULL THEN
        RETURN jsonb_build_object(
            'success', true,
            'message', 'User is already a super admin',
            'status', 'ALREADY_SUPERUSER',
            'user_id', user_id_var
        );
    END IF;
    
    -- Remove any existing roles for this user
    -- Fixed: Reference the variable with a different name
    DELETE FROM public.user_roles
    WHERE user_id = user_id_var;
    
    -- Add superuser role
    -- Fixed: Reference the variable with a different name
    INSERT INTO public.user_roles (user_id, role)
    VALUES (user_id_var, 'superuser');
    
    -- Return success
    RETURN jsonb_build_object(
        'success', true,
        'message', 'User has been made a super admin',
        'status', 'SUCCESS',
        'user_id', user_id_var
    );
EXCEPTION
    WHEN OTHERS THEN
        RETURN jsonb_build_object(
            'success', false,
            'message', 'Error: ' || SQLERRM,
            'status', 'ERROR'
        );
END;
$$;


ALTER FUNCTION public.add_super_admin_by_email(admin_email text) OWNER TO postgres;

--
-- Name: check_superuser_role(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.check_superuser_role() RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    has_superuser BOOLEAN;
    result JSONB;
BEGIN
    -- Check if 'superuser' exists in the app_role enum
    SELECT EXISTS (
        SELECT 1
        FROM pg_enum
        JOIN pg_type ON pg_enum.enumtypid = pg_type.oid
        WHERE pg_type.typname = 'app_role'
        AND pg_enum.enumlabel = 'superuser'
    ) INTO has_superuser;
    
    -- Return the result
    result := jsonb_build_object(
        'has_superuser_role', has_superuser
    );
    
    RETURN result;
EXCEPTION
    WHEN OTHERS THEN
        RETURN jsonb_build_object(
            'error', SQLERRM,
            'has_superuser_role', false
        );
END;
$$;


ALTER FUNCTION public.check_superuser_role() OWNER TO postgres;

--
-- Name: check_trigger_exists(text, text, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.check_trigger_exists(trigger_name text, table_name text, schema_name text DEFAULT 'public'::text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
    DECLARE
      trigger_exists BOOLEAN;
    BEGIN
      SELECT EXISTS (
        SELECT 1
        FROM pg_trigger t
        JOIN pg_class c ON t.tgrelid = c.oid
        JOIN pg_namespace n ON c.relnamespace = n.oid
        WHERE t.tgname = trigger_name
        AND c.relname = table_name
        AND n.nspname = schema_name
      ) INTO trigger_exists;
      
      RETURN trigger_exists;
    END;
    $$;


ALTER FUNCTION public.check_trigger_exists(trigger_name text, table_name text, schema_name text) OWNER TO postgres;

--
-- Name: create_trigger_check_function(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.create_trigger_check_function() RETURNS void
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
BEGIN
  -- Check if the function already exists
  IF NOT EXISTS (
    SELECT 1
    FROM pg_proc p
    JOIN pg_namespace n ON p.pronamespace = n.oid
    WHERE n.nspname = 'public'
    AND p.proname = 'check_trigger_exists'
  ) THEN
    -- Create the function to check if a trigger exists
    EXECUTE 'CREATE OR REPLACE FUNCTION public.check_trigger_exists(
      trigger_name TEXT,
      table_name TEXT,
      schema_name TEXT DEFAULT ''public''
    )
    RETURNS BOOLEAN AS $func$
    DECLARE
      trigger_exists BOOLEAN;
    BEGIN
      SELECT EXISTS (
        SELECT 1
        FROM pg_trigger t
        JOIN pg_class c ON t.tgrelid = c.oid
        JOIN pg_namespace n ON c.relnamespace = n.oid
        WHERE t.tgname = trigger_name
        AND c.relname = table_name
        AND n.nspname = schema_name
      ) INTO trigger_exists;
      
      RETURN trigger_exists;
    END;
    $func$ LANGUAGE plpgsql SECURITY DEFINER;';
  END IF;
END;
$_$;


ALTER FUNCTION public.create_trigger_check_function() OWNER TO postgres;

--
-- Name: ensure_superuser_role(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.ensure_superuser_role() RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    has_superuser BOOLEAN;
    result JSONB;
BEGIN
    -- Check if 'superuser' exists in the app_role enum
    SELECT EXISTS (
        SELECT 1
        FROM pg_enum
        JOIN pg_type ON pg_enum.enumtypid = pg_type.oid
        WHERE pg_type.typname = 'app_role'
        AND pg_enum.enumlabel = 'superuser'
    ) INTO has_superuser;
    
    -- Add 'superuser' to the app_role enum if it doesn't exist
    IF NOT has_superuser THEN
        ALTER TYPE public.app_role ADD VALUE IF NOT EXISTS 'superuser';
        result := jsonb_build_object(
            'success', true,
            'message', 'Added superuser to app_role enum'
        );
    ELSE
        result := jsonb_build_object(
            'success', true,
            'message', 'superuser already exists in app_role enum'
        );
    END IF;
    
    RETURN result;
EXCEPTION
    WHEN OTHERS THEN
        RETURN jsonb_build_object(
            'success', false,
            'message', 'Error: ' || SQLERRM
        );
END;
$$;


ALTER FUNCTION public.ensure_superuser_role() OWNER TO postgres;

--
-- Name: get_hardcoded_super_admin_emails(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_hardcoded_super_admin_emails() RETURNS text[]
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
    -- Return the hardcoded super admin emails
    -- These should match the emails in src/utils/superuser-fix.js
    RETURN ARRAY[
        'ojidelawrence@gmail.com',
        'clickcom007@yahoo.com'
        -- Add other hardcoded super admin emails here
    ];
END;
$$;


ALTER FUNCTION public.get_hardcoded_super_admin_emails() OWNER TO postgres;

--
-- Name: get_user_highest_role(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.get_user_highest_role(user_id uuid) RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
    DECLARE
        highest_role TEXT;
    BEGIN
        -- Check for superuser role first
        SELECT role INTO highest_role
        FROM public.user_roles
        WHERE user_id = $1 AND role = 'superuser'
        LIMIT 1;

        -- If not superuser, check for admin role
        IF highest_role IS NULL THEN
            SELECT role INTO highest_role
            FROM public.user_roles
            WHERE user_id = $1 AND role = 'admin'
            LIMIT 1;
        END IF;

        -- Default to 'user' if no other roles found
        RETURN COALESCE(highest_role, 'user');
    END;
    $_$;


ALTER FUNCTION public.get_user_highest_role(user_id uuid) OWNER TO postgres;

--
-- Name: handle_new_user(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.handle_new_user() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  -- Add error handling with BEGIN/EXCEPTION block
  BEGIN
    INSERT INTO public.profiles (
      id,
      email,
      full_name,
      church_unit,
      assigned_pastor,
      phone,
      genotype,
      address,
      updated_at
    )
    VALUES (
      new.id,
      LOWER(new.email), -- Ensure email is lowercase
      new.raw_user_meta_data->>'full_name',
      new.raw_user_meta_data->>'church_unit',
      new.raw_user_meta_data->>'assigned_pastor',
      new.raw_user_meta_data->>'phone',
      new.raw_user_meta_data->>'genotype',
      new.raw_user_meta_data->>'address',
      now()
    )
    ON CONFLICT (id) DO UPDATE
    SET
      email = LOWER(EXCLUDED.email), -- Ensure email is lowercase
      full_name = EXCLUDED.full_name,
      church_unit = EXCLUDED.church_unit,
      assigned_pastor = EXCLUDED.assigned_pastor,
      phone = EXCLUDED.phone,
      genotype = EXCLUDED.genotype,
      address = EXCLUDED.address,
      updated_at = now();
  EXCEPTION
    WHEN others THEN
      -- Log the error (this will appear in Supabase logs)
      RAISE WARNING 'Error in handle_new_user trigger: %', SQLERRM;
      
      -- Try a simplified insert with just the essential fields
      BEGIN
        INSERT INTO public.profiles (
          id,
          email,
          updated_at
        )
        VALUES (
          new.id,
          LOWER(new.email),
          now()
        )
        ON CONFLICT (id) DO NOTHING;
      EXCEPTION
        WHEN others THEN
          RAISE WARNING 'Fallback insert also failed: %', SQLERRM;
          -- Continue anyway to avoid blocking user creation
      END;
  END;

  RETURN new;
END;
$$;


ALTER FUNCTION public.handle_new_user() OWNER TO postgres;

--
-- Name: handle_user_role_deletion(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.handle_user_role_deletion() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
        DECLARE
            highest_role app_role;
        BEGIN
            -- Find the highest remaining role for this user
            SELECT role INTO highest_role
            FROM user_roles
            WHERE user_id = OLD.user_id
            ORDER BY CASE role
                WHEN 'superuser' THEN 1
                WHEN 'admin' THEN 2
                WHEN 'moderator' THEN 3
                WHEN 'user' THEN 4
                ELSE 5
            END
            LIMIT 1;

            -- Update the profile with the highest role or NULL if no roles remain
            UPDATE profiles
            SET role = highest_role::text
            WHERE id = OLD.user_id;

            RETURN OLD;
        END;
        $$;


ALTER FUNCTION public.handle_user_role_deletion() OWNER TO postgres;

--
-- Name: has_role(public.app_role); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.has_role(requested_role public.app_role) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  RETURN EXISTS (
    SELECT 1
    FROM public.user_roles
    WHERE user_id = auth.uid()
      AND role = requested_role
  );
END;
$$;


ALTER FUNCTION public.has_role(requested_role public.app_role) OWNER TO postgres;

--
-- Name: is_migration_applied(character varying); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.is_migration_applied(migration_name character varying) RETURNS boolean
    LANGUAGE plpgsql
    AS $$
DECLARE
    migration_exists BOOLEAN;
BEGIN
    SELECT EXISTS(SELECT 1 FROM migrations WHERE name = migration_name) INTO migration_exists;
    RETURN migration_exists;
END;
$$;


ALTER FUNCTION public.is_migration_applied(migration_name character varying) OWNER TO postgres;

--
-- Name: list_app_roles(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.list_app_roles() RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    roles JSONB;
BEGIN
    SELECT jsonb_agg(enumlabel) INTO roles
    FROM pg_enum
    JOIN pg_type ON pg_enum.enumtypid = pg_type.oid
    WHERE pg_type.typname = 'app_role';
    
    RETURN jsonb_build_object(
        'roles', COALESCE(roles, '[]'::jsonb)
    );
EXCEPTION
    WHEN OTHERS THEN
        RETURN jsonb_build_object(
            'error', SQLERRM,
            'roles', '[]'::jsonb
        );
END;
$$;


ALTER FUNCTION public.list_app_roles() OWNER TO postgres;

--
-- Name: list_super_admins(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.list_super_admins() RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    result JSONB;
    hardcoded_emails TEXT[];
    combined_result JSONB;
BEGIN
    -- Get super admins from the database
    SELECT 
        COALESCE(
            jsonb_agg(
                jsonb_build_object(
                    'user_id', u.id,
                    'email', u.email,
                    'full_name', p.full_name,
                    'created_at', r.created_at,
                    'source', 'database'
                )
            ),
            '[]'::jsonb
        ) INTO result
    FROM 
        public.user_roles r
    JOIN 
        auth.users u ON r.user_id = u.id
    LEFT JOIN 
        public.profiles p ON u.id = p.id
    WHERE 
        r.role = 'superuser'
    ORDER BY 
        r.created_at DESC;
    
    -- Get hardcoded super admin emails
    hardcoded_emails := public.get_hardcoded_super_admin_emails();
    
    -- For each hardcoded email, check if it exists in auth.users
    -- and add it to the result if it's not already included
    FOR i IN 1..array_length(hardcoded_emails, 1) LOOP
        -- Check if this email is already in the result
        IF NOT EXISTS (
            SELECT 1
            FROM jsonb_array_elements(result) AS elem
            WHERE elem->>'email' = hardcoded_emails[i]
        ) THEN
            -- Look up the user in auth.users
            DECLARE
                user_id UUID;
                user_email TEXT;
                user_full_name TEXT;
                user_created_at TIMESTAMPTZ;
            BEGIN
                -- Find the user in auth.users
                SELECT 
                    u.id, 
                    u.email, 
                    p.full_name, 
                    u.created_at
                INTO 
                    user_id, 
                    user_email, 
                    user_full_name, 
                    user_created_at
                FROM 
                    auth.users u
                LEFT JOIN 
                    public.profiles p ON u.id = p.id
                WHERE 
                    u.email = hardcoded_emails[i]
                LIMIT 1;
                
                -- If user found, add to result
                IF user_id IS NOT NULL THEN
                    result := result || jsonb_build_array(
                        jsonb_build_object(
                            'user_id', user_id,
                            'email', user_email,
                            'full_name', user_full_name,
                            'created_at', user_created_at,
                            'source', 'hardcoded'
                        )
                    );
                END IF;
            END;
        END IF;
    END LOOP;
    
    RETURN result;
EXCEPTION
    WHEN OTHERS THEN
        RAISE NOTICE 'Error in list_super_admins: %', SQLERRM;
        RETURN '[]'::jsonb;
END;
$$;


ALTER FUNCTION public.list_super_admins() OWNER TO postgres;

--
-- Name: record_migration(character varying, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.record_migration(migration_name character varying, migration_description text) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
    INSERT INTO migrations (name, description)
    VALUES (migration_name, migration_description);
END;
$$;


ALTER FUNCTION public.record_migration(migration_name character varying, migration_description text) OWNER TO postgres;

--
-- Name: remove_super_admin(uuid); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.remove_super_admin(admin_id uuid) RETURNS jsonb
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
    result JSONB;
BEGIN
    -- Check if the user exists and is a super admin
    -- Fixed: Use table alias
    IF NOT EXISTS (
        SELECT 1
        FROM public.user_roles ur
        WHERE ur.user_id = admin_id
        AND ur.role = 'superuser'
    ) THEN
        RETURN jsonb_build_object(
            'success', false,
            'message', 'User is not a super admin',
            'status', 'NOT_SUPERUSER'
        );
    END IF;
    
    -- Remove superuser role
    -- Fixed: No ambiguity here, but adding table alias for consistency
    DELETE FROM public.user_roles ur
    WHERE ur.user_id = admin_id
    AND ur.role = 'superuser';
    
    -- Return success
    RETURN jsonb_build_object(
        'success', true,
        'message', 'Super admin role has been removed',
        'status', 'SUCCESS',
        'user_id', admin_id
    );
EXCEPTION
    WHEN OTHERS THEN
        RETURN jsonb_build_object(
            'success', false,
            'message', 'Error: ' || SQLERRM,
            'status', 'ERROR'
        );
END;
$$;


ALTER FUNCTION public.remove_super_admin(admin_id uuid) OWNER TO postgres;

--
-- Name: sync_all_profiles_to_members(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sync_all_profiles_to_members() RETURNS text
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
DECLARE
  profile_count INTEGER := 0;
  member_count INTEGER := 0;
  synced_count INTEGER := 0;
BEGIN
  -- Get counts
  SELECT COUNT(*) INTO profile_count FROM public.profiles;
  SELECT COUNT(*) INTO member_count FROM public.members;

  -- Insert profiles that don't exist in members table
  WITH profiles_to_sync AS (
    SELECT
      p.id,
      p.email,
      p.full_name,
      p.church_unit,
      p.assigned_pastor,
      p.phone,
      p.address,
      p.date_of_birth
    FROM
      public.profiles p
    LEFT JOIN
      public.members m ON LOWER(p.email) = LOWER(m.email)
    WHERE
      m.email IS NULL
      AND p.email IS NOT NULL
  )
  INSERT INTO public.members (
    fullname,
    email,
    category,
    churchunit,
    assignedto,
    phone,
    address,
    isactive,
    joindate,
    userid,
    dateofbirth
  )
  SELECT
    pts.full_name,
    pts.email,
    'Others', -- Default category
    pts.church_unit,
    pts.assigned_pastor,
    pts.phone,
    pts.address,
    true, -- isactive
    CURRENT_DATE, -- joindate
    pts.id, -- userid
    pts.date_of_birth -- date of birth
  FROM
    profiles_to_sync pts;

  GET DIAGNOSTICS synced_count = ROW_COUNT;

  RETURN 'Sync complete. Profiles: ' || profile_count || ', Members: ' || member_count || ', Newly synced: ' || synced_count;
END;
$$;


ALTER FUNCTION public.sync_all_profiles_to_members() OWNER TO postgres;

--
-- Name: sync_profile_role_to_user_roles(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sync_profile_role_to_user_roles() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
        BEGIN
            -- If role is being updated in profiles
            IF TG_OP = 'UPDATE' AND OLD.role IS DISTINCT FROM NEW.role THEN
                -- Delete existing roles for this user
                DELETE FROM user_roles WHERE user_id = NEW.id;

                -- Insert the new role
                IF NEW.role IS NOT NULL THEN
                    INSERT INTO user_roles (user_id, role)
                    VALUES (NEW.id, NEW.role::app_role);
                END IF;
            -- If a new profile is being inserted
            ELSIF TG_OP = 'INSERT' AND NEW.role IS NOT NULL THEN
                INSERT INTO user_roles (user_id, role)
                VALUES (NEW.id, NEW.role::app_role);
            END IF;

            RETURN NEW;
        END;
        $$;


ALTER FUNCTION public.sync_profile_role_to_user_roles() OWNER TO postgres;

--
-- Name: sync_profile_to_members(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sync_profile_to_members() RETURNS trigger
    LANGUAGE plpgsql SECURITY DEFINER
    AS $$
BEGIN
  -- Add error handling with BEGIN/EXCEPTION block
  BEGIN
    -- Check if the user already exists in the members table (case-insensitive comparison)
    IF NOT EXISTS (
      SELECT 1 FROM public.members WHERE LOWER(email) = LOWER(NEW.email)
    ) THEN
      -- Insert the new user into the members table
      INSERT INTO public.members (
        fullname,
        email,
        category,
        churchunit,
        churchunits,
        assignedto,
        phone,
        address,
        isactive,
        joindate,
        userid,
        created_at,
        updated_at,
        dateofbirth
      )
      VALUES (
        COALESCE(NEW.full_name, split_part(NEW.email, '@', 1), 'Unknown'),
        LOWER(NEW.email), -- Ensure email is lowercase
        'Others', -- Default category
        NEW.church_unit,
        CASE WHEN NEW.church_unit IS NOT NULL THEN ARRAY[NEW.church_unit] ELSE NULL END, -- Add as array
        NEW.assigned_pastor,
        NEW.phone,
        NEW.address,
        true, -- isactive
        CURRENT_DATE, -- joindate
        NEW.id, -- userid (links to auth.users)
        now(), -- created_at
        now(), -- updated_at
        NEW.date_of_birth -- date of birth
      );
    END IF;
  EXCEPTION
    WHEN others THEN
      -- Log the error (this will appear in Supabase logs)
      RAISE WARNING 'Error in sync_profile_to_members trigger: %', SQLERRM;

      -- Try a simplified insert with just the essential fields
      BEGIN
        IF NOT EXISTS (
          SELECT 1 FROM public.members WHERE LOWER(email) = LOWER(NEW.email)
        ) THEN
          INSERT INTO public.members (
            fullname,
            email,
            category,
            isactive,
            joindate,
            userid,
            created_at,
            updated_at
          )
          VALUES (
            COALESCE(NEW.full_name, split_part(NEW.email, '@', 1), 'Unknown'),
            LOWER(NEW.email),
            'Others',
            true,
            CURRENT_DATE,
            NEW.id,
            now(),
            now()
          );
        END IF;
      EXCEPTION
        WHEN others THEN
          RAISE WARNING 'Fallback insert also failed: %', SQLERRM;
          -- Continue anyway to avoid blocking profile creation
      END;
  END;

  RETURN NEW;
END;
$$;


ALTER FUNCTION public.sync_profile_to_members() OWNER TO postgres;

--
-- Name: sync_user_roles_to_profile(); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.sync_user_roles_to_profile() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
        DECLARE
            highest_role app_role;
        BEGIN
            -- Find the highest role for this user
            SELECT role INTO highest_role
            FROM user_roles
            WHERE user_id = NEW.user_id
            ORDER BY CASE role
                WHEN 'superuser' THEN 1
                WHEN 'admin' THEN 2
                WHEN 'moderator' THEN 3
                WHEN 'user' THEN 4
                ELSE 5
            END
            LIMIT 1;

            -- Update the profile with the highest role
            IF highest_role IS NOT NULL THEN
                UPDATE profiles
                SET role = highest_role::text
                WHERE id = NEW.user_id;
            END IF;

            RETURN NEW;
        END;
        $$;


ALTER FUNCTION public.sync_user_roles_to_profile() OWNER TO postgres;

--
-- Name: user_has_role(uuid, text); Type: FUNCTION; Schema: public; Owner: postgres
--

CREATE FUNCTION public.user_has_role(user_id uuid, role_to_check text) RETURNS boolean
    LANGUAGE plpgsql SECURITY DEFINER
    AS $_$
    BEGIN
        RETURN EXISTS (
            SELECT 1
            FROM public.user_roles
            WHERE user_id = $1 AND role = $2
        );
    END;
    $_$;


ALTER FUNCTION public.user_has_role(user_id uuid, role_to_check text) OWNER TO postgres;

--
-- Name: apply_rls(jsonb, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer DEFAULT (1024 * 1024)) RETURNS SETOF realtime.wal_rls
    LANGUAGE plpgsql
    AS $$
declare
-- Regclass of the table e.g. public.notes
entity_ regclass = (quote_ident(wal ->> 'schema') || '.' || quote_ident(wal ->> 'table'))::regclass;

-- I, U, D, T: insert, update ...
action realtime.action = (
    case wal ->> 'action'
        when 'I' then 'INSERT'
        when 'U' then 'UPDATE'
        when 'D' then 'DELETE'
        else 'ERROR'
    end
);

-- Is row level security enabled for the table
is_rls_enabled bool = relrowsecurity from pg_class where oid = entity_;

subscriptions realtime.subscription[] = array_agg(subs)
    from
        realtime.subscription subs
    where
        subs.entity = entity_;

-- Subscription vars
roles regrole[] = array_agg(distinct us.claims_role::text)
    from
        unnest(subscriptions) us;

working_role regrole;
claimed_role regrole;
claims jsonb;

subscription_id uuid;
subscription_has_access bool;
visible_to_subscription_ids uuid[] = '{}';

-- structured info for wal's columns
columns realtime.wal_column[];
-- previous identity values for update/delete
old_columns realtime.wal_column[];

error_record_exceeds_max_size boolean = octet_length(wal::text) > max_record_bytes;

-- Primary jsonb output for record
output jsonb;

begin
perform set_config('role', null, true);

columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'columns') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

old_columns =
    array_agg(
        (
            x->>'name',
            x->>'type',
            x->>'typeoid',
            realtime.cast(
                (x->'value') #>> '{}',
                coalesce(
                    (x->>'typeoid')::regtype, -- null when wal2json version <= 2.4
                    (x->>'type')::regtype
                )
            ),
            (pks ->> 'name') is not null,
            true
        )::realtime.wal_column
    )
    from
        jsonb_array_elements(wal -> 'identity') x
        left join jsonb_array_elements(wal -> 'pk') pks
            on (x ->> 'name') = (pks ->> 'name');

for working_role in select * from unnest(roles) loop

    -- Update `is_selectable` for columns and old_columns
    columns =
        array_agg(
            (
                c.name,
                c.type_name,
                c.type_oid,
                c.value,
                c.is_pkey,
                pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
            )::realtime.wal_column
        )
        from
            unnest(columns) c;

    old_columns =
            array_agg(
                (
                    c.name,
                    c.type_name,
                    c.type_oid,
                    c.value,
                    c.is_pkey,
                    pg_catalog.has_column_privilege(working_role, entity_, c.name, 'SELECT')
                )::realtime.wal_column
            )
            from
                unnest(old_columns) c;

    if action <> 'DELETE' and count(1) = 0 from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            -- subscriptions is already filtered by entity
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 400: Bad Request, no primary key']
        )::realtime.wal_rls;

    -- The claims role does not have SELECT permission to the primary key of entity
    elsif action <> 'DELETE' and sum(c.is_selectable::int) <> count(1) from unnest(columns) c where c.is_pkey then
        return next (
            jsonb_build_object(
                'schema', wal ->> 'schema',
                'table', wal ->> 'table',
                'type', action
            ),
            is_rls_enabled,
            (select array_agg(s.subscription_id) from unnest(subscriptions) as s where claims_role = working_role),
            array['Error 401: Unauthorized']
        )::realtime.wal_rls;

    else
        output = jsonb_build_object(
            'schema', wal ->> 'schema',
            'table', wal ->> 'table',
            'type', action,
            'commit_timestamp', to_char(
                ((wal ->> 'timestamp')::timestamptz at time zone 'utc'),
                'YYYY-MM-DD"T"HH24:MI:SS.MS"Z"'
            ),
            'columns', (
                select
                    jsonb_agg(
                        jsonb_build_object(
                            'name', pa.attname,
                            'type', pt.typname
                        )
                        order by pa.attnum asc
                    )
                from
                    pg_attribute pa
                    join pg_type pt
                        on pa.atttypid = pt.oid
                where
                    attrelid = entity_
                    and attnum > 0
                    and pg_catalog.has_column_privilege(working_role, entity_, pa.attname, 'SELECT')
            )
        )
        -- Add "record" key for insert and update
        || case
            when action in ('INSERT', 'UPDATE') then
                jsonb_build_object(
                    'record',
                    (
                        select
                            jsonb_object_agg(
                                -- if unchanged toast, get column name and value from old record
                                coalesce((c).name, (oc).name),
                                case
                                    when (c).name is null then (oc).value
                                    else (c).value
                                end
                            )
                        from
                            unnest(columns) c
                            full outer join unnest(old_columns) oc
                                on (c).name = (oc).name
                        where
                            coalesce((c).is_selectable, (oc).is_selectable)
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                    )
                )
            else '{}'::jsonb
        end
        -- Add "old_record" key for update and delete
        || case
            when action = 'UPDATE' then
                jsonb_build_object(
                        'old_record',
                        (
                            select jsonb_object_agg((c).name, (c).value)
                            from unnest(old_columns) c
                            where
                                (c).is_selectable
                                and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                        )
                    )
            when action = 'DELETE' then
                jsonb_build_object(
                    'old_record',
                    (
                        select jsonb_object_agg((c).name, (c).value)
                        from unnest(old_columns) c
                        where
                            (c).is_selectable
                            and ( not error_record_exceeds_max_size or (octet_length((c).value::text) <= 64))
                            and ( not is_rls_enabled or (c).is_pkey ) -- if RLS enabled, we can't secure deletes so filter to pkey
                    )
                )
            else '{}'::jsonb
        end;

        -- Create the prepared statement
        if is_rls_enabled and action <> 'DELETE' then
            if (select 1 from pg_prepared_statements where name = 'walrus_rls_stmt' limit 1) > 0 then
                deallocate walrus_rls_stmt;
            end if;
            execute realtime.build_prepared_statement_sql('walrus_rls_stmt', entity_, columns);
        end if;

        visible_to_subscription_ids = '{}';

        for subscription_id, claims in (
                select
                    subs.subscription_id,
                    subs.claims
                from
                    unnest(subscriptions) subs
                where
                    subs.entity = entity_
                    and subs.claims_role = working_role
                    and (
                        realtime.is_visible_through_filters(columns, subs.filters)
                        or (
                          action = 'DELETE'
                          and realtime.is_visible_through_filters(old_columns, subs.filters)
                        )
                    )
        ) loop

            if not is_rls_enabled or action = 'DELETE' then
                visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
            else
                -- Check if RLS allows the role to see the record
                perform
                    -- Trim leading and trailing quotes from working_role because set_config
                    -- doesn't recognize the role as valid if they are included
                    set_config('role', trim(both '"' from working_role::text), true),
                    set_config('request.jwt.claims', claims::text, true);

                execute 'execute walrus_rls_stmt' into subscription_has_access;

                if subscription_has_access then
                    visible_to_subscription_ids = visible_to_subscription_ids || subscription_id;
                end if;
            end if;
        end loop;

        perform set_config('role', null, true);

        return next (
            output,
            is_rls_enabled,
            visible_to_subscription_ids,
            case
                when error_record_exceeds_max_size then array['Error 413: Payload Too Large']
                else '{}'
            end
        )::realtime.wal_rls;

    end if;
end loop;

perform set_config('role', null, true);
end;
$$;


ALTER FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: broadcast_changes(text, text, text, text, text, record, record, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text DEFAULT 'ROW'::text) RETURNS void
    LANGUAGE plpgsql
    AS $$
DECLARE
    -- Declare a variable to hold the JSONB representation of the row
    row_data jsonb := '{}'::jsonb;
BEGIN
    IF level = 'STATEMENT' THEN
        RAISE EXCEPTION 'function can only be triggered for each row, not for each statement';
    END IF;
    -- Check the operation type and handle accordingly
    IF operation = 'INSERT' OR operation = 'UPDATE' OR operation = 'DELETE' THEN
        row_data := jsonb_build_object('old_record', OLD, 'record', NEW, 'operation', operation, 'table', table_name, 'schema', table_schema);
        PERFORM realtime.send (row_data, event_name, topic_name);
    ELSE
        RAISE EXCEPTION 'Unexpected operation type: %', operation;
    END IF;
EXCEPTION
    WHEN OTHERS THEN
        RAISE EXCEPTION 'Failed to process the row: %', SQLERRM;
END;

$$;


ALTER FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) OWNER TO supabase_admin;

--
-- Name: build_prepared_statement_sql(text, regclass, realtime.wal_column[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) RETURNS text
    LANGUAGE sql
    AS $$
      /*
      Builds a sql string that, if executed, creates a prepared statement to
      tests retrive a row from *entity* by its primary key columns.
      Example
          select realtime.build_prepared_statement_sql('public.notes', '{"id"}'::text[], '{"bigint"}'::text[])
      */
          select
      'prepare ' || prepared_statement_name || ' as
          select
              exists(
                  select
                      1
                  from
                      ' || entity || '
                  where
                      ' || string_agg(quote_ident(pkc.name) || '=' || quote_nullable(pkc.value #>> '{}') , ' and ') || '
              )'
          from
              unnest(columns) pkc
          where
              pkc.is_pkey
          group by
              entity
      $$;


ALTER FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) OWNER TO supabase_admin;

--
-- Name: cast(text, regtype); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime."cast"(val text, type_ regtype) RETURNS jsonb
    LANGUAGE plpgsql IMMUTABLE
    AS $$
    declare
      res jsonb;
    begin
      execute format('select to_jsonb(%L::'|| type_::text || ')', val)  into res;
      return res;
    end
    $$;


ALTER FUNCTION realtime."cast"(val text, type_ regtype) OWNER TO supabase_admin;

--
-- Name: check_equality_op(realtime.equality_op, regtype, text, text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) RETURNS boolean
    LANGUAGE plpgsql IMMUTABLE
    AS $$
      /*
      Casts *val_1* and *val_2* as type *type_* and check the *op* condition for truthiness
      */
      declare
          op_symbol text = (
              case
                  when op = 'eq' then '='
                  when op = 'neq' then '!='
                  when op = 'lt' then '<'
                  when op = 'lte' then '<='
                  when op = 'gt' then '>'
                  when op = 'gte' then '>='
                  when op = 'in' then '= any'
                  else 'UNKNOWN OP'
              end
          );
          res boolean;
      begin
          execute format(
              'select %L::'|| type_::text || ' ' || op_symbol
              || ' ( %L::'
              || (
                  case
                      when op = 'in' then type_::text || '[]'
                      else type_::text end
              )
              || ')', val_1, val_2) into res;
          return res;
      end;
      $$;


ALTER FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) OWNER TO supabase_admin;

--
-- Name: is_visible_through_filters(realtime.wal_column[], realtime.user_defined_filter[]); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) RETURNS boolean
    LANGUAGE sql IMMUTABLE
    AS $_$
    /*
    Should the record be visible (true) or filtered out (false) after *filters* are applied
    */
        select
            -- Default to allowed when no filters present
            $2 is null -- no filters. this should not happen because subscriptions has a default
            or array_length($2, 1) is null -- array length of an empty array is null
            or bool_and(
                coalesce(
                    realtime.check_equality_op(
                        op:=f.op,
                        type_:=coalesce(
                            col.type_oid::regtype, -- null when wal2json version <= 2.4
                            col.type_name::regtype
                        ),
                        -- cast jsonb to text
                        val_1:=col.value #>> '{}',
                        val_2:=f.value
                    ),
                    false -- if null, filter does not match
                )
            )
        from
            unnest(filters) f
            join unnest(columns) col
                on f.column_name = col.name;
    $_$;


ALTER FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) OWNER TO supabase_admin;

--
-- Name: list_changes(name, name, integer, integer); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) RETURNS SETOF realtime.wal_rls
    LANGUAGE sql
    SET log_min_messages TO 'fatal'
    AS $$
      with pub as (
        select
          concat_ws(
            ',',
            case when bool_or(pubinsert) then 'insert' else null end,
            case when bool_or(pubupdate) then 'update' else null end,
            case when bool_or(pubdelete) then 'delete' else null end
          ) as w2j_actions,
          coalesce(
            string_agg(
              realtime.quote_wal2json(format('%I.%I', schemaname, tablename)::regclass),
              ','
            ) filter (where ppt.tablename is not null and ppt.tablename not like '% %'),
            ''
          ) w2j_add_tables
        from
          pg_publication pp
          left join pg_publication_tables ppt
            on pp.pubname = ppt.pubname
        where
          pp.pubname = publication
        group by
          pp.pubname
        limit 1
      ),
      w2j as (
        select
          x.*, pub.w2j_add_tables
        from
          pub,
          pg_logical_slot_get_changes(
            slot_name, null, max_changes,
            'include-pk', 'true',
            'include-transaction', 'false',
            'include-timestamp', 'true',
            'include-type-oids', 'true',
            'format-version', '2',
            'actions', pub.w2j_actions,
            'add-tables', pub.w2j_add_tables
          ) x
      )
      select
        xyz.wal,
        xyz.is_rls_enabled,
        xyz.subscription_ids,
        xyz.errors
      from
        w2j,
        realtime.apply_rls(
          wal := w2j.data::jsonb,
          max_record_bytes := max_record_bytes
        ) xyz(wal, is_rls_enabled, subscription_ids, errors)
      where
        w2j.w2j_add_tables <> ''
        and xyz.subscription_ids[1] is not null
    $$;


ALTER FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) OWNER TO supabase_admin;

--
-- Name: quote_wal2json(regclass); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.quote_wal2json(entity regclass) RETURNS text
    LANGUAGE sql IMMUTABLE STRICT
    AS $$
      select
        (
          select string_agg('' || ch,'')
          from unnest(string_to_array(nsp.nspname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
        )
        || '.'
        || (
          select string_agg('' || ch,'')
          from unnest(string_to_array(pc.relname::text, null)) with ordinality x(ch, idx)
          where
            not (x.idx = 1 and x.ch = '"')
            and not (
              x.idx = array_length(string_to_array(nsp.nspname::text, null), 1)
              and x.ch = '"'
            )
          )
      from
        pg_class pc
        join pg_namespace nsp
          on pc.relnamespace = nsp.oid
      where
        pc.oid = entity
    $$;


ALTER FUNCTION realtime.quote_wal2json(entity regclass) OWNER TO supabase_admin;

--
-- Name: send(jsonb, text, text, boolean); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean DEFAULT true) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  BEGIN
    -- Set the topic configuration
    EXECUTE format('SET LOCAL realtime.topic TO %L', topic);

    -- Attempt to insert the message
    INSERT INTO realtime.messages (payload, event, topic, private, extension)
    VALUES (payload, event, topic, private, 'broadcast');
  EXCEPTION
    WHEN OTHERS THEN
      -- Capture and notify the error
      PERFORM pg_notify(
          'realtime:system',
          jsonb_build_object(
              'error', SQLERRM,
              'function', 'realtime.send',
              'event', event,
              'topic', topic,
              'private', private
          )::text
      );
  END;
END;
$$;


ALTER FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) OWNER TO supabase_admin;

--
-- Name: subscription_check_filters(); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.subscription_check_filters() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
    /*
    Validates that the user defined filters for a subscription:
    - refer to valid columns that the claimed role may access
    - values are coercable to the correct column type
    */
    declare
        col_names text[] = coalesce(
                array_agg(c.column_name order by c.ordinal_position),
                '{}'::text[]
            )
            from
                information_schema.columns c
            where
                format('%I.%I', c.table_schema, c.table_name)::regclass = new.entity
                and pg_catalog.has_column_privilege(
                    (new.claims ->> 'role'),
                    format('%I.%I', c.table_schema, c.table_name)::regclass,
                    c.column_name,
                    'SELECT'
                );
        filter realtime.user_defined_filter;
        col_type regtype;

        in_val jsonb;
    begin
        for filter in select * from unnest(new.filters) loop
            -- Filtered column is valid
            if not filter.column_name = any(col_names) then
                raise exception 'invalid column for filter %', filter.column_name;
            end if;

            -- Type is sanitized and safe for string interpolation
            col_type = (
                select atttypid::regtype
                from pg_catalog.pg_attribute
                where attrelid = new.entity
                      and attname = filter.column_name
            );
            if col_type is null then
                raise exception 'failed to lookup type for column %', filter.column_name;
            end if;

            -- Set maximum number of entries for in filter
            if filter.op = 'in'::realtime.equality_op then
                in_val = realtime.cast(filter.value, (col_type::text || '[]')::regtype);
                if coalesce(jsonb_array_length(in_val), 0) > 100 then
                    raise exception 'too many values for `in` filter. Maximum 100';
                end if;
            else
                -- raises an exception if value is not coercable to type
                perform realtime.cast(filter.value, col_type);
            end if;

        end loop;

        -- Apply consistent order to filters so the unique constraint on
        -- (subscription_id, entity, filters) can't be tricked by a different filter order
        new.filters = coalesce(
            array_agg(f order by f.column_name, f.op, f.value),
            '{}'
        ) from unnest(new.filters) f;

        return new;
    end;
    $$;


ALTER FUNCTION realtime.subscription_check_filters() OWNER TO supabase_admin;

--
-- Name: to_regrole(text); Type: FUNCTION; Schema: realtime; Owner: supabase_admin
--

CREATE FUNCTION realtime.to_regrole(role_name text) RETURNS regrole
    LANGUAGE sql IMMUTABLE
    AS $$ select role_name::regrole $$;


ALTER FUNCTION realtime.to_regrole(role_name text) OWNER TO supabase_admin;

--
-- Name: topic(); Type: FUNCTION; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE FUNCTION realtime.topic() RETURNS text
    LANGUAGE sql STABLE
    AS $$
select nullif(current_setting('realtime.topic', true), '')::text;
$$;


ALTER FUNCTION realtime.topic() OWNER TO supabase_realtime_admin;

--
-- Name: can_insert_object(text, text, uuid, jsonb); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) RETURNS void
    LANGUAGE plpgsql
    AS $$
BEGIN
  INSERT INTO "storage"."objects" ("bucket_id", "name", "owner", "metadata") VALUES (bucketid, name, owner, metadata);
  -- hack to rollback the successful insert
  RAISE sqlstate 'PT200' using
  message = 'ROLLBACK',
  detail = 'rollback successful insert';
END
$$;


ALTER FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) OWNER TO supabase_storage_admin;

--
-- Name: extension(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.extension(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
_filename text;
BEGIN
	select string_to_array(name, '/') into _parts;
	select _parts[array_length(_parts,1)] into _filename;
	-- @todo return the last part instead of 2
	return reverse(split_part(reverse(_filename), '.', 1));
END
$$;


ALTER FUNCTION storage.extension(name text) OWNER TO supabase_storage_admin;

--
-- Name: filename(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.filename(name text) RETURNS text
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[array_length(_parts,1)];
END
$$;


ALTER FUNCTION storage.filename(name text) OWNER TO supabase_storage_admin;

--
-- Name: foldername(text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.foldername(name text) RETURNS text[]
    LANGUAGE plpgsql
    AS $$
DECLARE
_parts text[];
BEGIN
	select string_to_array(name, '/') into _parts;
	return _parts[1:array_length(_parts,1)-1];
END
$$;


ALTER FUNCTION storage.foldername(name text) OWNER TO supabase_storage_admin;

--
-- Name: get_size_by_bucket(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.get_size_by_bucket() RETURNS TABLE(size bigint, bucket_id text)
    LANGUAGE plpgsql
    AS $$
BEGIN
    return query
        select sum((metadata->>'size')::int) as size, obj.bucket_id
        from "storage".objects as obj
        group by obj.bucket_id;
END
$$;


ALTER FUNCTION storage.get_size_by_bucket() OWNER TO supabase_storage_admin;

--
-- Name: list_multipart_uploads_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, next_key_token text DEFAULT ''::text, next_upload_token text DEFAULT ''::text) RETURNS TABLE(key text, id text, created_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(key COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                        substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1)))
                    ELSE
                        key
                END AS key, id, created_at
            FROM
                storage.s3_multipart_uploads
            WHERE
                bucket_id = $5 AND
                key ILIKE $1 || ''%'' AND
                CASE
                    WHEN $4 != '''' AND $6 = '''' THEN
                        CASE
                            WHEN position($2 IN substring(key from length($1) + 1)) > 0 THEN
                                substring(key from 1 for length($1) + position($2 IN substring(key from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                key COLLATE "C" > $4
                            END
                    ELSE
                        true
                END AND
                CASE
                    WHEN $6 != '''' THEN
                        id COLLATE "C" > $6
                    ELSE
                        true
                    END
            ORDER BY
                key COLLATE "C" ASC, created_at ASC) as e order by key COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_key_token, bucket_id, next_upload_token;
END;
$_$;


ALTER FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) OWNER TO supabase_storage_admin;

--
-- Name: list_objects_with_delimiter(text, text, text, integer, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer DEFAULT 100, start_after text DEFAULT ''::text, next_token text DEFAULT ''::text) RETURNS TABLE(name text, id uuid, metadata jsonb, updated_at timestamp with time zone)
    LANGUAGE plpgsql
    AS $_$
BEGIN
    RETURN QUERY EXECUTE
        'SELECT DISTINCT ON(name COLLATE "C") * from (
            SELECT
                CASE
                    WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                        substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1)))
                    ELSE
                        name
                END AS name, id, metadata, updated_at
            FROM
                storage.objects
            WHERE
                bucket_id = $5 AND
                name ILIKE $1 || ''%'' AND
                CASE
                    WHEN $6 != '''' THEN
                    name COLLATE "C" > $6
                ELSE true END
                AND CASE
                    WHEN $4 != '''' THEN
                        CASE
                            WHEN position($2 IN substring(name from length($1) + 1)) > 0 THEN
                                substring(name from 1 for length($1) + position($2 IN substring(name from length($1) + 1))) COLLATE "C" > $4
                            ELSE
                                name COLLATE "C" > $4
                            END
                    ELSE
                        true
                END
            ORDER BY
                name COLLATE "C" ASC) as e order by name COLLATE "C" LIMIT $3'
        USING prefix_param, delimiter_param, max_keys, next_token, bucket_id, start_after;
END;
$_$;


ALTER FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) OWNER TO supabase_storage_admin;

--
-- Name: operation(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.operation() RETURNS text
    LANGUAGE plpgsql STABLE
    AS $$
BEGIN
    RETURN current_setting('storage.operation', true);
END;
$$;


ALTER FUNCTION storage.operation() OWNER TO supabase_storage_admin;

--
-- Name: search(text, text, integer, integer, integer, text, text, text); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.search(prefix text, bucketname text, limits integer DEFAULT 100, levels integer DEFAULT 1, offsets integer DEFAULT 0, search text DEFAULT ''::text, sortcolumn text DEFAULT 'name'::text, sortorder text DEFAULT 'asc'::text) RETURNS TABLE(name text, id uuid, updated_at timestamp with time zone, created_at timestamp with time zone, last_accessed_at timestamp with time zone, metadata jsonb)
    LANGUAGE plpgsql STABLE
    AS $_$
declare
  v_order_by text;
  v_sort_order text;
begin
  case
    when sortcolumn = 'name' then
      v_order_by = 'name';
    when sortcolumn = 'updated_at' then
      v_order_by = 'updated_at';
    when sortcolumn = 'created_at' then
      v_order_by = 'created_at';
    when sortcolumn = 'last_accessed_at' then
      v_order_by = 'last_accessed_at';
    else
      v_order_by = 'name';
  end case;

  case
    when sortorder = 'asc' then
      v_sort_order = 'asc';
    when sortorder = 'desc' then
      v_sort_order = 'desc';
    else
      v_sort_order = 'asc';
  end case;

  v_order_by = v_order_by || ' ' || v_sort_order;

  return query execute
    'with folders as (
       select path_tokens[$1] as folder
       from storage.objects
         where objects.name ilike $2 || $3 || ''%''
           and bucket_id = $4
           and array_length(objects.path_tokens, 1) <> $1
       group by folder
       order by folder ' || v_sort_order || '
     )
     (select folder as "name",
            null as id,
            null as updated_at,
            null as created_at,
            null as last_accessed_at,
            null as metadata from folders)
     union all
     (select path_tokens[$1] as "name",
            id,
            updated_at,
            created_at,
            last_accessed_at,
            metadata
     from storage.objects
     where objects.name ilike $2 || $3 || ''%''
       and bucket_id = $4
       and array_length(objects.path_tokens, 1) = $1
     order by ' || v_order_by || ')
     limit $5
     offset $6' using levels, prefix, search, bucketname, limits, offsets;
end;
$_$;


ALTER FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) OWNER TO supabase_storage_admin;

--
-- Name: update_updated_at_column(); Type: FUNCTION; Schema: storage; Owner: supabase_storage_admin
--

CREATE FUNCTION storage.update_updated_at_column() RETURNS trigger
    LANGUAGE plpgsql
    AS $$
BEGIN
    NEW.updated_at = now();
    RETURN NEW; 
END;
$$;


ALTER FUNCTION storage.update_updated_at_column() OWNER TO supabase_storage_admin;

SET default_tablespace = '';

SET default_table_access_method = heap;

--
-- Name: audit_log_entries; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.audit_log_entries (
    instance_id uuid,
    id uuid NOT NULL,
    payload json,
    created_at timestamp with time zone,
    ip_address character varying(64) DEFAULT ''::character varying NOT NULL
);


ALTER TABLE auth.audit_log_entries OWNER TO supabase_auth_admin;

--
-- Name: TABLE audit_log_entries; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.audit_log_entries IS 'Auth: Audit trail for user actions.';


--
-- Name: flow_state; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.flow_state (
    id uuid NOT NULL,
    user_id uuid,
    auth_code text NOT NULL,
    code_challenge_method auth.code_challenge_method NOT NULL,
    code_challenge text NOT NULL,
    provider_type text NOT NULL,
    provider_access_token text,
    provider_refresh_token text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    authentication_method text NOT NULL,
    auth_code_issued_at timestamp with time zone
);


ALTER TABLE auth.flow_state OWNER TO supabase_auth_admin;

--
-- Name: TABLE flow_state; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.flow_state IS 'stores metadata for pkce logins';


--
-- Name: identities; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.identities (
    provider_id text NOT NULL,
    user_id uuid NOT NULL,
    identity_data jsonb NOT NULL,
    provider text NOT NULL,
    last_sign_in_at timestamp with time zone,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    email text GENERATED ALWAYS AS (lower((identity_data ->> 'email'::text))) STORED,
    id uuid DEFAULT gen_random_uuid() NOT NULL
);


ALTER TABLE auth.identities OWNER TO supabase_auth_admin;

--
-- Name: TABLE identities; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.identities IS 'Auth: Stores identities associated to a user.';


--
-- Name: COLUMN identities.email; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.identities.email IS 'Auth: Email is a generated column that references the optional email property in the identity_data';


--
-- Name: instances; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.instances (
    id uuid NOT NULL,
    uuid uuid,
    raw_base_config text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone
);


ALTER TABLE auth.instances OWNER TO supabase_auth_admin;

--
-- Name: TABLE instances; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.instances IS 'Auth: Manages users across multiple sites.';


--
-- Name: mfa_amr_claims; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_amr_claims (
    session_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    authentication_method text NOT NULL,
    id uuid NOT NULL
);


ALTER TABLE auth.mfa_amr_claims OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_amr_claims; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_amr_claims IS 'auth: stores authenticator method reference claims for multi factor authentication';


--
-- Name: mfa_challenges; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_challenges (
    id uuid NOT NULL,
    factor_id uuid NOT NULL,
    created_at timestamp with time zone NOT NULL,
    verified_at timestamp with time zone,
    ip_address inet NOT NULL,
    otp_code text,
    web_authn_session_data jsonb
);


ALTER TABLE auth.mfa_challenges OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_challenges; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_challenges IS 'auth: stores metadata about challenge requests made';


--
-- Name: mfa_factors; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.mfa_factors (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    friendly_name text,
    factor_type auth.factor_type NOT NULL,
    status auth.factor_status NOT NULL,
    created_at timestamp with time zone NOT NULL,
    updated_at timestamp with time zone NOT NULL,
    secret text,
    phone text,
    last_challenged_at timestamp with time zone,
    web_authn_credential jsonb,
    web_authn_aaguid uuid
);


ALTER TABLE auth.mfa_factors OWNER TO supabase_auth_admin;

--
-- Name: TABLE mfa_factors; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.mfa_factors IS 'auth: stores metadata about factors';


--
-- Name: one_time_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.one_time_tokens (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    token_type auth.one_time_token_type NOT NULL,
    token_hash text NOT NULL,
    relates_to text NOT NULL,
    created_at timestamp without time zone DEFAULT now() NOT NULL,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    CONSTRAINT one_time_tokens_token_hash_check CHECK ((char_length(token_hash) > 0))
);


ALTER TABLE auth.one_time_tokens OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.refresh_tokens (
    instance_id uuid,
    id bigint NOT NULL,
    token character varying(255),
    user_id character varying(255),
    revoked boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    parent character varying(255),
    session_id uuid
);


ALTER TABLE auth.refresh_tokens OWNER TO supabase_auth_admin;

--
-- Name: TABLE refresh_tokens; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.refresh_tokens IS 'Auth: Store of tokens used to refresh JWT tokens once they expire.';


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE; Schema: auth; Owner: supabase_auth_admin
--

CREATE SEQUENCE auth.refresh_tokens_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE auth.refresh_tokens_id_seq OWNER TO supabase_auth_admin;

--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE OWNED BY; Schema: auth; Owner: supabase_auth_admin
--

ALTER SEQUENCE auth.refresh_tokens_id_seq OWNED BY auth.refresh_tokens.id;


--
-- Name: saml_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_providers (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    entity_id text NOT NULL,
    metadata_xml text NOT NULL,
    metadata_url text,
    attribute_mapping jsonb,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    name_id_format text,
    CONSTRAINT "entity_id not empty" CHECK ((char_length(entity_id) > 0)),
    CONSTRAINT "metadata_url not empty" CHECK (((metadata_url = NULL::text) OR (char_length(metadata_url) > 0))),
    CONSTRAINT "metadata_xml not empty" CHECK ((char_length(metadata_xml) > 0))
);


ALTER TABLE auth.saml_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_providers IS 'Auth: Manages SAML Identity Provider connections.';


--
-- Name: saml_relay_states; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.saml_relay_states (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    request_id text NOT NULL,
    for_email text,
    redirect_to text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    flow_state_id uuid,
    CONSTRAINT "request_id not empty" CHECK ((char_length(request_id) > 0))
);


ALTER TABLE auth.saml_relay_states OWNER TO supabase_auth_admin;

--
-- Name: TABLE saml_relay_states; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.saml_relay_states IS 'Auth: Contains SAML Relay State information for each Service Provider initiated login.';


--
-- Name: schema_migrations; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.schema_migrations (
    version character varying(255) NOT NULL
);


ALTER TABLE auth.schema_migrations OWNER TO supabase_auth_admin;

--
-- Name: TABLE schema_migrations; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.schema_migrations IS 'Auth: Manages updates to the auth system.';


--
-- Name: sessions; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sessions (
    id uuid NOT NULL,
    user_id uuid NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    factor_id uuid,
    aal auth.aal_level,
    not_after timestamp with time zone,
    refreshed_at timestamp without time zone,
    user_agent text,
    ip inet,
    tag text
);


ALTER TABLE auth.sessions OWNER TO supabase_auth_admin;

--
-- Name: TABLE sessions; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sessions IS 'Auth: Stores session data associated to a user.';


--
-- Name: COLUMN sessions.not_after; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sessions.not_after IS 'Auth: Not after is a nullable column that contains a timestamp after which the session should be regarded as expired.';


--
-- Name: sso_domains; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_domains (
    id uuid NOT NULL,
    sso_provider_id uuid NOT NULL,
    domain text NOT NULL,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "domain not empty" CHECK ((char_length(domain) > 0))
);


ALTER TABLE auth.sso_domains OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_domains; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_domains IS 'Auth: Manages SSO email address domain mapping to an SSO Identity Provider.';


--
-- Name: sso_providers; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.sso_providers (
    id uuid NOT NULL,
    resource_id text,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    CONSTRAINT "resource_id not empty" CHECK (((resource_id = NULL::text) OR (char_length(resource_id) > 0)))
);


ALTER TABLE auth.sso_providers OWNER TO supabase_auth_admin;

--
-- Name: TABLE sso_providers; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.sso_providers IS 'Auth: Manages SSO identity provider information; see saml_providers for SAML.';


--
-- Name: COLUMN sso_providers.resource_id; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.sso_providers.resource_id IS 'Auth: Uniquely identifies a SSO provider according to a user-chosen resource ID (case insensitive), useful in infrastructure as code.';


--
-- Name: users; Type: TABLE; Schema: auth; Owner: supabase_auth_admin
--

CREATE TABLE auth.users (
    instance_id uuid,
    id uuid NOT NULL,
    aud character varying(255),
    role character varying(255),
    email character varying(255),
    encrypted_password character varying(255),
    email_confirmed_at timestamp with time zone,
    invited_at timestamp with time zone,
    confirmation_token character varying(255),
    confirmation_sent_at timestamp with time zone,
    recovery_token character varying(255),
    recovery_sent_at timestamp with time zone,
    email_change_token_new character varying(255),
    email_change character varying(255),
    email_change_sent_at timestamp with time zone,
    last_sign_in_at timestamp with time zone,
    raw_app_meta_data jsonb,
    raw_user_meta_data jsonb,
    is_super_admin boolean,
    created_at timestamp with time zone,
    updated_at timestamp with time zone,
    phone text DEFAULT NULL::character varying,
    phone_confirmed_at timestamp with time zone,
    phone_change text DEFAULT ''::character varying,
    phone_change_token character varying(255) DEFAULT ''::character varying,
    phone_change_sent_at timestamp with time zone,
    confirmed_at timestamp with time zone GENERATED ALWAYS AS (LEAST(email_confirmed_at, phone_confirmed_at)) STORED,
    email_change_token_current character varying(255) DEFAULT ''::character varying,
    email_change_confirm_status smallint DEFAULT 0,
    banned_until timestamp with time zone,
    reauthentication_token character varying(255) DEFAULT ''::character varying,
    reauthentication_sent_at timestamp with time zone,
    is_sso_user boolean DEFAULT false NOT NULL,
    deleted_at timestamp with time zone,
    is_anonymous boolean DEFAULT false NOT NULL,
    CONSTRAINT users_email_change_confirm_status_check CHECK (((email_change_confirm_status >= 0) AND (email_change_confirm_status <= 2)))
);


ALTER TABLE auth.users OWNER TO supabase_auth_admin;

--
-- Name: TABLE users; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON TABLE auth.users IS 'Auth: Stores user login data within a secure schema.';


--
-- Name: COLUMN users.is_sso_user; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON COLUMN auth.users.is_sso_user IS 'Auth: Set this column to true when the account comes from SSO. These accounts can have duplicate emails.';


--
-- Name: members; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.members (
    id uuid DEFAULT extensions.uuid_generate_v4() NOT NULL,
    fullname text NOT NULL,
    email text NOT NULL,
    phone text,
    address text,
    category text NOT NULL,
    assignedto uuid,
    churchunit text,
    auxanogroup text,
    joindate date DEFAULT CURRENT_DATE NOT NULL,
    notes text,
    isactive boolean DEFAULT true NOT NULL,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    churchunits text[],
    title text,
    userid uuid,
    CONSTRAINT check_members_category CHECK ((category = ANY (ARRAY['Members'::text, 'Pastors'::text, 'Workers'::text, 'Visitors'::text, 'Partners'::text]))),
    CONSTRAINT check_members_email_format CHECK ((email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text)),
    CONSTRAINT check_members_phone_format CHECK (((phone IS NULL) OR (phone ~* '^\+?[0-9\s\-\(\)\.]{7,20}$'::text)))
);


ALTER TABLE public.members OWNER TO postgres;

--
-- Name: TABLE members; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.members IS 'Stores information about church members, including pastors. The userid column is nullable and references auth.users(id).';


--
-- Name: COLUMN members.title; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.members.title IS 'Pastor''s title (e.g., Senior Pastor, Youth Pastor)';


--
-- Name: COLUMN members.userid; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.members.userid IS 'Reference to the auth.users table for linking members to authenticated users (nullable)';


--
-- Name: migrations; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.migrations (
    id integer NOT NULL,
    name character varying(255) NOT NULL,
    applied_at timestamp with time zone DEFAULT now(),
    description text
);


ALTER TABLE public.migrations OWNER TO postgres;

--
-- Name: migrations_id_seq; Type: SEQUENCE; Schema: public; Owner: postgres
--

CREATE SEQUENCE public.migrations_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.migrations_id_seq OWNER TO postgres;

--
-- Name: migrations_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: postgres
--

ALTER SEQUENCE public.migrations_id_seq OWNED BY public.migrations.id;


--
-- Name: profiles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.profiles (
    id uuid NOT NULL,
    email text,
    full_name text,
    updated_at timestamp with time zone DEFAULT timezone('utc'::text, now()),
    church_unit text,
    assigned_pastor text,
    phone text,
    genotype text,
    address text,
    role text,
    date_of_birth date,
    CONSTRAINT check_profiles_email_format CHECK ((email ~* '^[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\.[A-Za-z]{2,}$'::text)),
    CONSTRAINT check_profiles_phone_format CHECK (((phone IS NULL) OR (phone ~* '^\+?[0-9\s\-\(\)\.]{7,20}$'::text)))
);


ALTER TABLE public.profiles OWNER TO postgres;

--
-- Name: COLUMN profiles.role; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON COLUMN public.profiles.role IS 'DEPRECATED: Use user_roles table instead. This column is kept for backward compatibility.';


--
-- Name: user_roles; Type: TABLE; Schema: public; Owner: postgres
--

CREATE TABLE public.user_roles (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    user_id uuid NOT NULL,
    role public.app_role DEFAULT 'user'::public.app_role NOT NULL,
    created_at timestamp with time zone DEFAULT now()
);


ALTER TABLE public.user_roles OWNER TO postgres;

--
-- Name: TABLE user_roles; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON TABLE public.user_roles IS 'Stores role assignments for users. This is the primary source of role information.';


--
-- Name: user_roles_view; Type: VIEW; Schema: public; Owner: postgres
--

CREATE VIEW public.user_roles_view AS
 SELECT p.id,
    p.email,
    p.full_name,
    COALESCE(( SELECT user_roles.role
           FROM public.user_roles
          WHERE ((user_roles.user_id = p.id) AND (user_roles.role = 'superuser'::public.app_role))
         LIMIT 1), ( SELECT user_roles.role
           FROM public.user_roles
          WHERE ((user_roles.user_id = p.id) AND (user_roles.role = 'admin'::public.app_role))
         LIMIT 1), 'user'::public.app_role) AS highest_role,
    ARRAY( SELECT user_roles.role
           FROM public.user_roles
          WHERE (user_roles.user_id = p.id)) AS all_roles
   FROM public.profiles p;


ALTER TABLE public.user_roles_view OWNER TO postgres;

--
-- Name: VIEW user_roles_view; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON VIEW public.user_roles_view IS 'View that provides a simplified way to query user roles.';


--
-- Name: messages; Type: TABLE; Schema: realtime; Owner: supabase_realtime_admin
--

CREATE TABLE realtime.messages (
    topic text NOT NULL,
    extension text NOT NULL,
    payload jsonb,
    event text,
    private boolean DEFAULT false,
    updated_at timestamp without time zone DEFAULT now() NOT NULL,
    inserted_at timestamp without time zone DEFAULT now() NOT NULL,
    id uuid DEFAULT gen_random_uuid() NOT NULL
)
PARTITION BY RANGE (inserted_at);


ALTER TABLE realtime.messages OWNER TO supabase_realtime_admin;

--
-- Name: schema_migrations; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.schema_migrations (
    version bigint NOT NULL,
    inserted_at timestamp(0) without time zone
);


ALTER TABLE realtime.schema_migrations OWNER TO supabase_admin;

--
-- Name: subscription; Type: TABLE; Schema: realtime; Owner: supabase_admin
--

CREATE TABLE realtime.subscription (
    id bigint NOT NULL,
    subscription_id uuid NOT NULL,
    entity regclass NOT NULL,
    filters realtime.user_defined_filter[] DEFAULT '{}'::realtime.user_defined_filter[] NOT NULL,
    claims jsonb NOT NULL,
    claims_role regrole GENERATED ALWAYS AS (realtime.to_regrole((claims ->> 'role'::text))) STORED NOT NULL,
    created_at timestamp without time zone DEFAULT timezone('utc'::text, now()) NOT NULL
);


ALTER TABLE realtime.subscription OWNER TO supabase_admin;

--
-- Name: subscription_id_seq; Type: SEQUENCE; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE realtime.subscription ALTER COLUMN id ADD GENERATED ALWAYS AS IDENTITY (
    SEQUENCE NAME realtime.subscription_id_seq
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1
);


--
-- Name: buckets; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.buckets (
    id text NOT NULL,
    name text NOT NULL,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    public boolean DEFAULT false,
    avif_autodetection boolean DEFAULT false,
    file_size_limit bigint,
    allowed_mime_types text[],
    owner_id text
);


ALTER TABLE storage.buckets OWNER TO supabase_storage_admin;

--
-- Name: COLUMN buckets.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.buckets.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: migrations; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.migrations (
    id integer NOT NULL,
    name character varying(100) NOT NULL,
    hash character varying(40) NOT NULL,
    executed_at timestamp without time zone DEFAULT CURRENT_TIMESTAMP
);


ALTER TABLE storage.migrations OWNER TO supabase_storage_admin;

--
-- Name: objects; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.objects (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    bucket_id text,
    name text,
    owner uuid,
    created_at timestamp with time zone DEFAULT now(),
    updated_at timestamp with time zone DEFAULT now(),
    last_accessed_at timestamp with time zone DEFAULT now(),
    metadata jsonb,
    path_tokens text[] GENERATED ALWAYS AS (string_to_array(name, '/'::text)) STORED,
    version text,
    owner_id text,
    user_metadata jsonb
);


ALTER TABLE storage.objects OWNER TO supabase_storage_admin;

--
-- Name: COLUMN objects.owner; Type: COMMENT; Schema: storage; Owner: supabase_storage_admin
--

COMMENT ON COLUMN storage.objects.owner IS 'Field is deprecated, use owner_id instead';


--
-- Name: s3_multipart_uploads; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads (
    id text NOT NULL,
    in_progress_size bigint DEFAULT 0 NOT NULL,
    upload_signature text NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    version text NOT NULL,
    owner_id text,
    created_at timestamp with time zone DEFAULT now() NOT NULL,
    user_metadata jsonb
);


ALTER TABLE storage.s3_multipart_uploads OWNER TO supabase_storage_admin;

--
-- Name: s3_multipart_uploads_parts; Type: TABLE; Schema: storage; Owner: supabase_storage_admin
--

CREATE TABLE storage.s3_multipart_uploads_parts (
    id uuid DEFAULT gen_random_uuid() NOT NULL,
    upload_id text NOT NULL,
    size bigint DEFAULT 0 NOT NULL,
    part_number integer NOT NULL,
    bucket_id text NOT NULL,
    key text NOT NULL COLLATE pg_catalog."C",
    etag text NOT NULL,
    owner_id text,
    version text NOT NULL,
    created_at timestamp with time zone DEFAULT now() NOT NULL
);


ALTER TABLE storage.s3_multipart_uploads_parts OWNER TO supabase_storage_admin;

--
-- Name: refresh_tokens id; Type: DEFAULT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens ALTER COLUMN id SET DEFAULT nextval('auth.refresh_tokens_id_seq'::regclass);


--
-- Name: migrations id; Type: DEFAULT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.migrations ALTER COLUMN id SET DEFAULT nextval('public.migrations_id_seq'::regclass);


--
-- Data for Name: audit_log_entries; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.audit_log_entries (instance_id, id, payload, created_at, ip_address) FROM stdin;
00000000-0000-0000-0000-000000000000	e786d66c-998a-415c-b079-6c4419e2dbb4	{"action":"user_confirmation_requested","actor_id":"856529b7-c25c-4dee-9d24-6fff5031082b","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-04-22 13:28:06.01657+00	
00000000-0000-0000-0000-000000000000	5ba25ba0-b9fd-4ea7-868d-028b1c32719a	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"ojidelawrence@gmail.com","user_id":"856529b7-c25c-4dee-9d24-6fff5031082b","user_phone":""}}	2025-04-22 13:33:26.071509+00	
00000000-0000-0000-0000-000000000000	44a58878-5f34-4a87-b9e5-5721438143b6	{"action":"user_confirmation_requested","actor_id":"cbb27039-c4a3-4c1a-a9f1-93ac6b07c1a8","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-04-24 01:09:50.066256+00	
00000000-0000-0000-0000-000000000000	b2d6eb56-feab-42de-b8a9-e04a9fd85c4d	{"action":"user_signedup","actor_id":"cbb27039-c4a3-4c1a-a9f1-93ac6b07c1a8","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-04-24 01:10:07.203258+00	
00000000-0000-0000-0000-000000000000	4165469c-818b-40d4-aa4c-842980f48dc6	{"action":"user_repeated_signup","actor_id":"cbb27039-c4a3-4c1a-a9f1-93ac6b07c1a8","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-04-24 01:11:31.558513+00	
00000000-0000-0000-0000-000000000000	16d813c6-7b63-4692-ab73-691287702dc2	{"action":"user_repeated_signup","actor_id":"cbb27039-c4a3-4c1a-a9f1-93ac6b07c1a8","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-04-30 12:49:57.092667+00	
00000000-0000-0000-0000-000000000000	188c9bd4-9a3a-41ef-84bd-e12504a380ea	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"ojidelawrence@gmail.com","user_id":"cbb27039-c4a3-4c1a-a9f1-93ac6b07c1a8","user_phone":""}}	2025-04-30 13:09:39.47942+00	
00000000-0000-0000-0000-000000000000	e35704b5-ef40-4183-91eb-03ea584ab8af	{"action":"user_confirmation_requested","actor_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-04-30 13:13:02.422572+00	
00000000-0000-0000-0000-000000000000	5db17ef6-712a-4e07-83c0-cacd80b89682	{"action":"user_signedup","actor_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-04-30 13:13:12.561728+00	
00000000-0000-0000-0000-000000000000	aa9e7439-eab5-421d-a688-7ee82c13e419	{"action":"login","actor_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-30 13:17:12.100951+00	
00000000-0000-0000-0000-000000000000	13bd009d-803e-43ff-b401-6906d200069f	{"action":"login","actor_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-30 13:21:30.132585+00	
00000000-0000-0000-0000-000000000000	b23081b7-e49f-47a4-aee4-5f4beda63cf0	{"action":"login","actor_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-30 13:22:50.401376+00	
00000000-0000-0000-0000-000000000000	7e766495-c83f-4e3c-a30d-621d3c57ee2f	{"action":"login","actor_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-04-30 13:24:04.938146+00	
00000000-0000-0000-0000-000000000000	26cbade7-62f0-42fb-8841-0eec37d32813	{"action":"token_refreshed","actor_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 09:38:03.532862+00	
00000000-0000-0000-0000-000000000000	28ea800e-1f97-4687-a8d9-b01e283ce074	{"action":"token_revoked","actor_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 09:38:03.55171+00	
00000000-0000-0000-0000-000000000000	831a5867-e5f2-4d77-85e0-633f1ae2abf9	{"action":"login","actor_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 09:48:17.786082+00	
00000000-0000-0000-0000-000000000000	2621cb98-c508-4277-af26-96f3005bdee2	{"action":"login","actor_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 09:50:35.975448+00	
00000000-0000-0000-0000-000000000000	3d0b7992-4b3d-48fd-b5a3-12f8462ceecb	{"action":"user_deleted","actor_id":"00000000-0000-0000-0000-000000000000","actor_username":"service_role","actor_via_sso":false,"log_type":"team","traits":{"user_email":"ojidelawrence@gmail.com","user_id":"cad9643f-49e3-4b10-ba70-17406b8ae101","user_phone":""}}	2025-05-01 09:54:23.963211+00	
00000000-0000-0000-0000-000000000000	91d9ad78-c4e4-49e0-8cf7-f42e455423a6	{"action":"user_confirmation_requested","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-01 09:58:57.97272+00	
00000000-0000-0000-0000-000000000000	9fcc1e37-4380-4678-81c1-6808d07e0b83	{"action":"user_signedup","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-01 09:59:08.946298+00	
00000000-0000-0000-0000-000000000000	19292335-2493-4804-8db8-6869cb191f1f	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 10:02:42.069259+00	
00000000-0000-0000-0000-000000000000	aaa98239-4350-48e8-bc15-464a6824660c	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 10:05:35.471315+00	
00000000-0000-0000-0000-000000000000	463f1112-7d62-4fb5-aa3c-69c73d26bae0	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 10:06:41.754438+00	
00000000-0000-0000-0000-000000000000	158ffdaf-e12c-4a03-be4e-519d5b5710ea	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 10:20:37.803939+00	
00000000-0000-0000-0000-000000000000	e941d428-dd83-4209-ab3a-50adba210682	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 10:21:39.560582+00	
00000000-0000-0000-0000-000000000000	1fc2d2d0-9843-41a0-8cb5-87388ac318b3	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 10:34:54.873241+00	
00000000-0000-0000-0000-000000000000	154fb0c6-b321-486f-9bb2-a8a37bd4f758	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 10:35:38.949814+00	
00000000-0000-0000-0000-000000000000	5329e087-215b-4ce1-8338-34e9b97a247c	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 10:40:29.157488+00	
00000000-0000-0000-0000-000000000000	09957ae8-14f8-424f-81b0-c6dd8d7efc6d	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 10:45:11.09987+00	
00000000-0000-0000-0000-000000000000	5c91f475-0a21-46e7-97ec-ac56ed340d15	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 10:58:57.167392+00	
00000000-0000-0000-0000-000000000000	32059fde-0e0a-4704-8adb-d8290e708002	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 10:58:57.169013+00	
00000000-0000-0000-0000-000000000000	c24307f5-acb0-4d09-85d1-f23278cc0e47	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 10:59:21.00995+00	
00000000-0000-0000-0000-000000000000	0357cbcd-b9a4-4c46-9461-f60e1efa9205	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 11:28:00.10284+00	
00000000-0000-0000-0000-000000000000	c7dcfe1f-8725-4bde-9cec-c9b9b4eb5b17	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 11:28:00.104557+00	
00000000-0000-0000-0000-000000000000	298de76c-4279-42b6-9e5f-171b10b747d4	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 11:35:39.383714+00	
00000000-0000-0000-0000-000000000000	a2bcccaf-7c88-43cd-9c35-7c087e19827c	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 11:35:39.385376+00	
00000000-0000-0000-0000-000000000000	69d4a4cc-b363-44be-8be4-e9bb9e22fcbc	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 11:55:03.441426+00	
00000000-0000-0000-0000-000000000000	a92d3281-f996-400a-9f8e-212eb1f9e449	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 12:02:55.558497+00	
00000000-0000-0000-0000-000000000000	26390d91-2e7c-4e60-83d0-e9fcea4e68ed	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 12:02:55.560658+00	
00000000-0000-0000-0000-000000000000	49210aaf-842b-4d54-a0d2-66343a0b3b19	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 12:07:49.280728+00	
00000000-0000-0000-0000-000000000000	1e672c3c-2ccb-405d-9875-7c137d1f6d43	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 12:24:09.31491+00	
00000000-0000-0000-0000-000000000000	f3343fa5-3482-4e5c-be56-71fd3e22e9e9	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 12:50:50.55551+00	
00000000-0000-0000-0000-000000000000	30f56689-1f63-45fc-a1d3-441a0f4b5c5d	{"action":"user_confirmation_requested","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-01 13:08:47.081896+00	
00000000-0000-0000-0000-000000000000	314473f2-f75f-48a4-b272-1aa450248f01	{"action":"user_signedup","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-01 13:09:26.939044+00	
00000000-0000-0000-0000-000000000000	b9a5ed8b-a93b-4b98-b7ca-e73d6868fc9e	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 13:10:02.525692+00	
00000000-0000-0000-0000-000000000000	52a7862d-b285-4701-8c34-2c5946f5017d	{"action":"login","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 13:10:15.024133+00	
00000000-0000-0000-0000-000000000000	79ae90a4-702b-4e6a-ae12-7ea6a86e5e69	{"action":"login","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 13:11:17.660452+00	
00000000-0000-0000-0000-000000000000	5bf68a1e-c492-49fe-8dbf-34a7c7b24a99	{"action":"logout","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-05-01 13:23:01.878479+00	
00000000-0000-0000-0000-000000000000	99e4ac7f-e7b7-4390-82a4-6686fe5ee405	{"action":"login","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 13:23:16.783743+00	
00000000-0000-0000-0000-000000000000	4c6c7200-4f2d-4afa-a46d-b98cae2b1f0a	{"action":"user_confirmation_requested","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-01 13:30:02.353729+00	
00000000-0000-0000-0000-000000000000	2a38887e-f728-453a-9747-f7657b0bab8e	{"action":"user_signedup","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-01 13:30:21.562587+00	
00000000-0000-0000-0000-000000000000	176f9566-0110-4eaf-a258-ac6d63e4109b	{"action":"login","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 13:33:06.843417+00	
00000000-0000-0000-0000-000000000000	fe46dceb-0fe2-45c7-b84b-c46d86bf4492	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 13:55:58.555553+00	
00000000-0000-0000-0000-000000000000	4194a648-f09b-4565-b224-4f75f31504f8	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 13:59:17.774038+00	
00000000-0000-0000-0000-000000000000	24cdd620-0fb7-4475-ba3e-bf77cc407fd5	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-01 13:59:17.775629+00	
00000000-0000-0000-0000-000000000000	3cb0ce14-5de9-4e19-8dac-06ef136fabe0	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 14:00:13.461733+00	
00000000-0000-0000-0000-000000000000	1a11a19e-8758-4115-9738-fdc25509ef9e	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 14:18:05.271373+00	
00000000-0000-0000-0000-000000000000	41847b11-0d24-4a9c-924d-f1ff7a4c3dd9	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 14:31:29.045321+00	
00000000-0000-0000-0000-000000000000	984ae232-d508-42c3-8d7b-58341ade533f	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 14:34:57.312153+00	
00000000-0000-0000-0000-000000000000	61ebae2c-0a1a-49f8-901a-49e269637e09	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 14:52:34.710945+00	
00000000-0000-0000-0000-000000000000	0db03bef-ffdf-4750-8c1c-41dab7e7a32e	{"action":"login","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 14:53:46.091821+00	
00000000-0000-0000-0000-000000000000	ffed18c2-ef87-46aa-b891-092088b2f01e	{"action":"login","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 14:54:18.86045+00	
00000000-0000-0000-0000-000000000000	4b5ccbee-d6bf-4634-8b07-2546fff8828b	{"action":"login","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 14:56:26.723056+00	
00000000-0000-0000-0000-000000000000	378288ef-edc1-4957-b090-86397ef9c2fd	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 15:04:21.752182+00	
00000000-0000-0000-0000-000000000000	775818cb-8c39-43ac-8ec9-94b4144e6816	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 15:07:09.45005+00	
00000000-0000-0000-0000-000000000000	9a58bdc3-74ab-46c5-8f89-494bca177136	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 15:08:44.832158+00	
00000000-0000-0000-0000-000000000000	da62a7d7-abf5-430d-a37d-a5fea3b980b5	{"action":"logout","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-05-01 15:08:53.702986+00	
00000000-0000-0000-0000-000000000000	305a6f8f-d906-424b-ac85-298a95d0f142	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 15:09:10.664612+00	
00000000-0000-0000-0000-000000000000	8ebb9a2d-3707-4377-91f3-3401201cf4e9	{"action":"login","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 15:11:45.784856+00	
00000000-0000-0000-0000-000000000000	eb8d97b4-f3cb-43f8-8ab1-5de0461b7d08	{"action":"login","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 15:14:11.984937+00	
00000000-0000-0000-0000-000000000000	25f8fa7f-31ea-4799-8f07-24412fdba79c	{"action":"login","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 15:15:20.152976+00	
00000000-0000-0000-0000-000000000000	437435c2-430a-4c35-a1f8-c75c21a5adf8	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 15:18:26.379682+00	
00000000-0000-0000-0000-000000000000	d663e132-0ae4-45b8-b377-004ae763ea75	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 16:12:14.214908+00	
00000000-0000-0000-0000-000000000000	77f4f507-6343-4fa6-a0bb-e08049a7644e	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 16:57:53.548288+00	
00000000-0000-0000-0000-000000000000	bb61d797-30a5-4340-8a85-9d519f30256e	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-01 17:15:19.356459+00	
00000000-0000-0000-0000-000000000000	5333de45-aaa3-466b-81fd-b116dade95a0	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-02 12:28:56.752539+00	
00000000-0000-0000-0000-000000000000	ce60d98d-cc74-47d0-90dc-b4b95f7a5216	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-02 13:27:27.775834+00	
00000000-0000-0000-0000-000000000000	cd1b5c26-f87a-40b3-b765-5f9fe49adadf	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-02 13:27:27.779527+00	
00000000-0000-0000-0000-000000000000	9f64c52b-302e-4c65-82d4-cf9e97c76439	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-02 13:33:04.781907+00	
00000000-0000-0000-0000-000000000000	e50b564b-38eb-4685-b49f-fb7a68b6284a	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-02 13:33:04.784935+00	
00000000-0000-0000-0000-000000000000	3eb0c10c-3e3d-44a5-9b7a-d7466484f855	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-02 15:06:18.516234+00	
00000000-0000-0000-0000-000000000000	c6bdb53f-0667-402f-80a1-cc0aad7de8d9	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-02 15:06:18.518378+00	
00000000-0000-0000-0000-000000000000	d6f4bc40-b777-4fce-b660-73618818aee8	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-02 15:20:40.604169+00	
00000000-0000-0000-0000-000000000000	104c2fe1-3aae-4dbb-8fc5-1006bb5d3e38	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-02 15:26:36.029426+00	
00000000-0000-0000-0000-000000000000	75384d4b-bd83-4cc2-a7b7-44d30954910c	{"action":"logout","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account"}	2025-05-02 15:26:40.915312+00	
00000000-0000-0000-0000-000000000000	476d1481-84ee-4d54-9b81-144bfe02d049	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-02 15:29:24.955724+00	
00000000-0000-0000-0000-000000000000	f5577067-a6dc-4f5f-b620-5e2bd170bf6c	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-02 19:04:13.34304+00	
00000000-0000-0000-0000-000000000000	fb5e3147-ef1d-434e-ac80-77b4358fee73	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 13:09:42.433155+00	
00000000-0000-0000-0000-000000000000	3229b3db-3cad-4ad4-94b8-ccccc6d86074	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 13:42:19.61096+00	
00000000-0000-0000-0000-000000000000	31e315fc-096f-45da-adc0-8fc1471d7987	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 13:43:47.963627+00	
00000000-0000-0000-0000-000000000000	cc68568a-5715-4c23-a14d-8d9c306af7d2	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 13:46:08.353769+00	
00000000-0000-0000-0000-000000000000	b47ccf73-7c54-44ad-9243-9ff10c7bdbdd	{"action":"login","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 13:46:43.246776+00	
00000000-0000-0000-0000-000000000000	e479770d-4cc8-48cc-928f-5d43b317cf95	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 14:11:07.752774+00	
00000000-0000-0000-0000-000000000000	00e409ca-1c23-4937-bfd8-153948db3388	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 14:14:33.650995+00	
00000000-0000-0000-0000-000000000000	6d5d62d4-3dc4-465f-bb05-3d48e89aaf5f	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 14:22:34.79485+00	
00000000-0000-0000-0000-000000000000	187a84c5-f693-4908-bc03-96b7641aef86	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 14:22:34.795834+00	
00000000-0000-0000-0000-000000000000	b0f3b2e4-9a37-4d80-bd14-e01c878d93ca	{"action":"user_confirmation_requested","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-04 14:35:49.066132+00	
00000000-0000-0000-0000-000000000000	6ba44f60-3821-410d-bb96-d75b89e029d2	{"action":"user_signedup","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-04 14:36:17.646692+00	
00000000-0000-0000-0000-000000000000	f945e2bf-f50c-4ffc-aef9-073d5a0e204a	{"action":"login","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 14:36:30.308062+00	
00000000-0000-0000-0000-000000000000	35569bd2-b57c-4f24-a1eb-ed3cebd9c686	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 14:50:06.541614+00	
00000000-0000-0000-0000-000000000000	8bb82eed-7b45-4242-9236-89b001cea0f3	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 15:08:58.87564+00	
00000000-0000-0000-0000-000000000000	2e1f3441-ca6a-4f2d-8cee-efe071ca4b50	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 15:38:44.127054+00	
00000000-0000-0000-0000-000000000000	2ac4b819-e9d2-4a0f-bd00-d772e04feffa	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 15:47:33.186109+00	
00000000-0000-0000-0000-000000000000	90d5d34b-a539-4281-923a-68b865c73136	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 16:39:17.798186+00	
00000000-0000-0000-0000-000000000000	e724a709-74ed-452d-ac8f-095d30557091	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 16:39:17.804934+00	
00000000-0000-0000-0000-000000000000	8f899c00-4e13-4cdb-a990-6949d64f57cd	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 16:39:26.348783+00	
00000000-0000-0000-0000-000000000000	fe84015f-445f-4c36-a2fa-498b91859f20	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 16:55:40.874697+00	
00000000-0000-0000-0000-000000000000	fd8cf184-dd40-47f1-b587-bb614edf31c8	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 16:55:40.877568+00	
00000000-0000-0000-0000-000000000000	3143b048-acd1-4d8a-85b2-8ac5adacaddc	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 16:57:42.207514+00	
00000000-0000-0000-0000-000000000000	ff73b883-c0d1-4c69-9d56-6242e18b6ea1	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 17:04:01.783063+00	
00000000-0000-0000-0000-000000000000	f359e2a1-0010-49cf-9619-db9174009c12	{"action":"login","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 17:13:06.123521+00	
00000000-0000-0000-0000-000000000000	9e0e1fdf-da0d-44c4-965f-5cd086c1e049	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-04 17:46:22.609096+00	
00000000-0000-0000-0000-000000000000	8f63bdb2-94db-4178-bffa-ed5827418a43	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 20:24:03.479978+00	
00000000-0000-0000-0000-000000000000	c4380df5-ff80-47c9-8577-fd3cc3a38cc8	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 20:24:03.487328+00	
00000000-0000-0000-0000-000000000000	47ab051d-1a53-426f-8660-93470f8fb284	{"action":"token_refreshed","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 20:24:52.001931+00	
00000000-0000-0000-0000-000000000000	33cd2eef-3bc0-4e8c-a6ee-51a66d8c4fed	{"action":"token_revoked","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 20:24:52.00256+00	
00000000-0000-0000-0000-000000000000	4ecedf7a-657c-471e-91d5-9906c325fb52	{"action":"token_refreshed","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 21:27:54.528862+00	
00000000-0000-0000-0000-000000000000	e48408b1-48f2-47d5-8814-79ecc358d41d	{"action":"token_revoked","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-04 21:27:54.531322+00	
00000000-0000-0000-0000-000000000000	b84c5d5b-fb24-4125-8954-12a640cd2657	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 09:18:00.597134+00	
00000000-0000-0000-0000-000000000000	b8e52a59-a7ee-47a1-8e39-cc39d9228543	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 09:18:00.613396+00	
00000000-0000-0000-0000-000000000000	b2af414b-1376-42dc-8842-78c536774771	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 09:18:03.386279+00	
00000000-0000-0000-0000-000000000000	d65169b8-f2b6-4c81-a189-2fd766402708	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 09:46:41.595037+00	
00000000-0000-0000-0000-000000000000	82eee147-b8c3-4d02-af46-0991edf24630	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 09:46:41.597282+00	
00000000-0000-0000-0000-000000000000	265340cd-13be-4537-ba3e-07d9564270dd	{"action":"token_refreshed","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 09:46:50.525603+00	
00000000-0000-0000-0000-000000000000	8a360d89-1d5d-4d16-99ee-1b9c30aad210	{"action":"token_revoked","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 09:46:50.526215+00	
00000000-0000-0000-0000-000000000000	c7efc205-d76c-4767-98a8-319e932ee324	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 10:05:06.937349+00	
00000000-0000-0000-0000-000000000000	159f9e17-6d2f-4166-933f-8df55365a4d3	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 10:05:06.940265+00	
00000000-0000-0000-0000-000000000000	3d06fac7-6ef4-4d21-b666-ee3dc3d1c2bc	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 10:12:13.174632+00	
00000000-0000-0000-0000-000000000000	c027435f-615f-4cca-b834-144cf0bcf587	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 10:12:13.175571+00	
00000000-0000-0000-0000-000000000000	53f5de9f-a722-44da-80c8-c567d8759c98	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-05 10:12:25.675893+00	
00000000-0000-0000-0000-000000000000	e2f566be-7ab2-40e9-b3f8-39ecab69cea7	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 10:18:45.87945+00	
00000000-0000-0000-0000-000000000000	24f8295a-cfb7-4e07-987e-2d661d38c581	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 10:18:45.883677+00	
00000000-0000-0000-0000-000000000000	1330cd5d-ce6d-4535-9d7b-61caf4541741	{"action":"token_refreshed","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 12:03:56.416211+00	
00000000-0000-0000-0000-000000000000	e0deadd5-3a50-4745-9344-5cc54b3aa306	{"action":"token_revoked","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 12:03:56.419447+00	
00000000-0000-0000-0000-000000000000	759f9cc2-cf4c-4a6b-ab9b-b5b5d75d6960	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 20:05:12.387624+00	
00000000-0000-0000-0000-000000000000	e4c67dc9-77b6-4f32-9580-5d02947e2a82	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 20:05:12.403877+00	
00000000-0000-0000-0000-000000000000	918651fe-9931-4d15-9ba2-190bcb402132	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 20:07:29.261786+00	
00000000-0000-0000-0000-000000000000	670a808c-c3be-40ff-a2e3-8672afd1cf08	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 20:07:29.262894+00	
00000000-0000-0000-0000-000000000000	850f6f24-f179-44e5-8a66-21fd767bc96c	{"action":"token_refreshed","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 20:47:09.494468+00	
00000000-0000-0000-0000-000000000000	b2f6726b-585a-4dea-9bf6-a0859a6b408b	{"action":"token_revoked","actor_id":"ff7e4890-af34-4476-8d67-53322ce6b03f","actor_name":"Samuel Adeyemi","actor_username":"adeyemis958@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-05 20:47:09.496071+00	
00000000-0000-0000-0000-000000000000	7bf0bae9-cb76-4243-a6b4-0a0e8230e488	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 10:23:33.88932+00	
00000000-0000-0000-0000-000000000000	2f5e5871-b1c7-4f12-af68-343b911b47b9	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 10:23:33.89638+00	
00000000-0000-0000-0000-000000000000	6ecaf668-cc72-4ffa-977f-a4ae8b86b6fd	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 11:23:23.95186+00	
00000000-0000-0000-0000-000000000000	795190a5-df3e-4cdc-a92c-8f8a2d530f0c	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 11:23:23.954099+00	
00000000-0000-0000-0000-000000000000	b29d273d-b4fd-43b0-8cfd-4690b2fcb5a1	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 11:44:23.489043+00	
00000000-0000-0000-0000-000000000000	f602bcf6-124f-4c41-9b9c-34f3a00341c2	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 11:44:23.491885+00	
00000000-0000-0000-0000-000000000000	578f5b2f-a2c0-44a9-803e-277160a0f4d0	{"action":"user_confirmation_requested","actor_id":"ab2997bd-6765-493b-9395-83e18867e031","actor_name":"Post Its","actor_username":"007postit@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-06 12:15:10.469981+00	
00000000-0000-0000-0000-000000000000	71bb73f4-1748-4af5-8182-bd84568e940f	{"action":"user_signedup","actor_id":"ab2997bd-6765-493b-9395-83e18867e031","actor_name":"Post Its","actor_username":"007postit@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-06 12:15:17.96167+00	
00000000-0000-0000-0000-000000000000	6ce28a52-0b9c-47ff-9fca-d0337428cac4	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 12:15:19.87486+00	
00000000-0000-0000-0000-000000000000	0a3b7fb6-2efb-4410-86bd-148b8c94a5f7	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 12:15:19.875502+00	
00000000-0000-0000-0000-000000000000	00fbcbea-0289-4a4d-98c3-20b6303bd79f	{"action":"login","actor_id":"ab2997bd-6765-493b-9395-83e18867e031","actor_name":"Post Its","actor_username":"007postit@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-06 12:16:44.572631+00	
00000000-0000-0000-0000-000000000000	48f349c5-9c06-4e5a-aad0-2026e8a3c9da	{"action":"user_confirmation_requested","actor_id":"16761181-49b6-4d34-addc-2369d09bec79","actor_name":"Abiodun Popoola","actor_username":"popsabey1@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-06 12:19:21.617808+00	
00000000-0000-0000-0000-000000000000	e5c2cef3-689b-4448-9256-b6746a669f69	{"action":"user_signedup","actor_id":"16761181-49b6-4d34-addc-2369d09bec79","actor_name":"Abiodun Popoola","actor_username":"popsabey1@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-06 12:19:48.693933+00	
00000000-0000-0000-0000-000000000000	e092f773-7e29-45f2-bc9a-c4dabfd80176	{"action":"login","actor_id":"16761181-49b6-4d34-addc-2369d09bec79","actor_name":"Abiodun Popoola","actor_username":"popsabey1@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-05-06 12:19:50.425156+00	
00000000-0000-0000-0000-000000000000	31d04660-6509-4ed6-b1bd-d467adde0620	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 12:25:57.047828+00	
00000000-0000-0000-0000-000000000000	9d28086e-4c26-43e6-ab30-75da54b51ed5	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 12:25:57.051467+00	
00000000-0000-0000-0000-000000000000	6bd944df-1587-4bf3-bf26-ea2f08ef2b2c	{"action":"login","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-06 12:49:09.42362+00	
00000000-0000-0000-0000-000000000000	8fdeb11f-8671-4ce0-b7f6-5b3151b43290	{"action":"token_refreshed","actor_id":"ab2997bd-6765-493b-9395-83e18867e031","actor_name":"Post Its","actor_username":"007postit@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 13:16:36.094037+00	
00000000-0000-0000-0000-000000000000	a2d25214-3aa4-4a25-b309-97d63fb94037	{"action":"token_revoked","actor_id":"ab2997bd-6765-493b-9395-83e18867e031","actor_name":"Post Its","actor_username":"007postit@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 13:16:36.095063+00	
00000000-0000-0000-0000-000000000000	d47a9153-46d6-40c8-b4cf-f6473143a08a	{"action":"login","actor_id":"ab2997bd-6765-493b-9395-83e18867e031","actor_name":"Post Its","actor_username":"007postit@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-06 13:23:01.101083+00	
00000000-0000-0000-0000-000000000000	28dbf5d0-07cf-4afd-9c46-e37b1f442310	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 13:25:38.624104+00	
00000000-0000-0000-0000-000000000000	fedfdb19-7ba7-41a4-9bc5-dc801d19c6d6	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 13:25:38.62502+00	
00000000-0000-0000-0000-000000000000	39b03c1a-13af-4901-a170-4961a1f38c0b	{"action":"user_repeated_signup","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-06 13:30:02.063587+00	
00000000-0000-0000-0000-000000000000	3c05e478-3b4c-4e1f-83f4-4cc166ed6caa	{"action":"user_repeated_signup","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-06 13:46:44.221691+00	
00000000-0000-0000-0000-000000000000	c3d13e43-62c9-4b49-8d5c-87cc45813709	{"action":"user_repeated_signup","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-06 13:59:11.728796+00	
00000000-0000-0000-0000-000000000000	d124088c-a085-456c-9c65-3863db8043eb	{"action":"user_repeated_signup","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-06 13:59:30.171562+00	
00000000-0000-0000-0000-000000000000	8211aef8-4899-464a-95a7-2b08df1e50f3	{"action":"user_repeated_signup","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-06 14:06:31.736598+00	
00000000-0000-0000-0000-000000000000	4419e620-a14f-4007-a0fa-c4e3b70cda56	{"action":"login","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-06 14:07:25.492629+00	
00000000-0000-0000-0000-000000000000	a7498951-6d07-46e6-9b7d-60ef4994a2ad	{"action":"user_repeated_signup","actor_id":"817f453e-800d-493b-b6e7-3734dc98b96a","actor_name":"Igbalaye Olajide Temitope","actor_username":"igbalayeolajide@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-06 14:09:05.893052+00	
00000000-0000-0000-0000-000000000000	a5fd0e65-7990-4945-b2f7-592cf0c5575f	{"action":"user_repeated_signup","actor_id":"ab2997bd-6765-493b-9395-83e18867e031","actor_name":"Post Its","actor_username":"007postit@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-06 14:09:31.82901+00	
00000000-0000-0000-0000-000000000000	4d6dd93f-d7c4-47a0-91f4-9803648702dd	{"action":"token_refreshed","actor_id":"16761181-49b6-4d34-addc-2369d09bec79","actor_name":"Abiodun Popoola","actor_username":"popsabey1@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 14:14:12.464779+00	
00000000-0000-0000-0000-000000000000	e2eb80af-ce1b-4ba6-bf08-116181a623ea	{"action":"token_revoked","actor_id":"16761181-49b6-4d34-addc-2369d09bec79","actor_name":"Abiodun Popoola","actor_username":"popsabey1@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 14:14:12.467071+00	
00000000-0000-0000-0000-000000000000	cfca78cb-e403-4259-af8e-21b53eb83a19	{"action":"token_refreshed","actor_id":"ab2997bd-6765-493b-9395-83e18867e031","actor_name":"Post Its","actor_username":"007postit@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 14:24:15.365807+00	
00000000-0000-0000-0000-000000000000	33fb74a2-29e9-4508-a405-9b26a11125ba	{"action":"token_revoked","actor_id":"ab2997bd-6765-493b-9395-83e18867e031","actor_name":"Post Its","actor_username":"007postit@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 14:24:15.36735+00	
00000000-0000-0000-0000-000000000000	49f47031-6559-419e-93d5-fbef19276277	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 15:05:35.067926+00	
00000000-0000-0000-0000-000000000000	7d3cf26d-3ee8-43c8-8540-a18c3a80a876	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 15:05:35.069527+00	
00000000-0000-0000-0000-000000000000	7391619f-23aa-4f58-b471-b9fb11faa15d	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 16:04:08.74543+00	
00000000-0000-0000-0000-000000000000	4fdd500e-c401-499c-87e7-4e9a5c89c7ab	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 16:04:08.747173+00	
00000000-0000-0000-0000-000000000000	2feb2704-34b1-4db2-a719-16087bb6d3de	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 17:02:40.505007+00	
00000000-0000-0000-0000-000000000000	dff730bf-13d8-492a-8520-280366ffb969	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-06 17:02:40.5059+00	
00000000-0000-0000-0000-000000000000	4d74e35e-ccc5-444f-bebe-10a434e12596	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-08 09:34:18.922236+00	
00000000-0000-0000-0000-000000000000	00d9c7ca-d36c-4462-bb54-8c764055fdb5	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-08 09:34:18.94147+00	
00000000-0000-0000-0000-000000000000	e839ab1a-3fc3-4e99-85c2-6e7c4fb18df0	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-08 11:16:04.180392+00	
00000000-0000-0000-0000-000000000000	6ec4d187-2a52-4f73-9ab6-e5dee1c22171	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-08 11:16:04.183261+00	
00000000-0000-0000-0000-000000000000	e285a855-ea76-453b-be62-f60c79910cb0	{"action":"login","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-08 11:41:42.303109+00	
00000000-0000-0000-0000-000000000000	136fb34f-dc65-4f46-a89d-368bf18c3378	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-08 12:17:52.087113+00	
00000000-0000-0000-0000-000000000000	6b885c20-2c33-4297-ad0a-30af5336b25a	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-08 12:17:52.088951+00	
00000000-0000-0000-0000-000000000000	476c18e4-1628-4148-b304-1283ff561859	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-08 13:59:57.6852+00	
00000000-0000-0000-0000-000000000000	6fe9e36a-26e7-4449-a04b-b8b3e3c2d915	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-08 13:59:57.687494+00	
00000000-0000-0000-0000-000000000000	620b7357-f299-4f46-b749-f2f7fec21d46	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-08 14:32:52.937584+00	
00000000-0000-0000-0000-000000000000	5af24391-a552-4c0c-ac06-a159d76d24b4	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-08 15:00:02.954879+00	
00000000-0000-0000-0000-000000000000	3fd36389-c4c1-44bc-90d5-a3c18b0e4591	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-08 15:00:02.957152+00	
00000000-0000-0000-0000-000000000000	8c47ecbc-0def-4324-a514-fdc51b11e804	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-12 11:39:58.13134+00	
00000000-0000-0000-0000-000000000000	d94adf0a-cd70-4c6d-a136-7252a9d11564	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-12 11:40:51.454384+00	
00000000-0000-0000-0000-000000000000	d032f007-366d-4272-9213-c0a234d91ccf	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-12 11:40:51.456546+00	
00000000-0000-0000-0000-000000000000	e3d69cf2-fd88-4118-8c07-ab0dc8e71cec	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-12 11:42:17.239954+00	
00000000-0000-0000-0000-000000000000	b3e9575e-876f-40b1-a02a-369984b95d7f	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-12 11:42:17.240786+00	
00000000-0000-0000-0000-000000000000	64e4c406-bdc3-4518-a6ac-fbc1e7ed1f68	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-12 21:13:02.258686+00	
00000000-0000-0000-0000-000000000000	2df7543d-fe91-4023-9d4e-a0937dddb4d2	{"action":"token_refreshed","actor_id":"16761181-49b6-4d34-addc-2369d09bec79","actor_name":"Abiodun Popoola","actor_username":"popsabey1@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 03:58:12.684637+00	
00000000-0000-0000-0000-000000000000	da60ccb1-9269-4173-98cf-31d4b7b1dab5	{"action":"token_revoked","actor_id":"16761181-49b6-4d34-addc-2369d09bec79","actor_name":"Abiodun Popoola","actor_username":"popsabey1@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 03:58:12.691345+00	
00000000-0000-0000-0000-000000000000	eebe9abc-a91f-48f0-afb9-de7abe8d38ca	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 04:57:50.873682+00	
00000000-0000-0000-0000-000000000000	95ec212f-8fec-43fa-9ea6-654d31f8448f	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 04:57:50.875969+00	
00000000-0000-0000-0000-000000000000	bc18c55a-5732-41fa-8aab-df2623976e92	{"action":"user_confirmation_requested","actor_id":"991287ba-763d-40f5-a26c-620a0c7169c1","actor_name":"Olowookere Heritage Precious ","actor_username":"heritageprecious91@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-13 05:10:57.517877+00	
00000000-0000-0000-0000-000000000000	468c7b1c-3a78-4fd2-a481-f22430d27d5c	{"action":"user_signedup","actor_id":"991287ba-763d-40f5-a26c-620a0c7169c1","actor_name":"Olowookere Heritage Precious ","actor_username":"heritageprecious91@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-13 05:16:00.156113+00	
00000000-0000-0000-0000-000000000000	340c000c-3a0d-4ffd-bd34-31b48c805aa9	{"action":"login","actor_id":"991287ba-763d-40f5-a26c-620a0c7169c1","actor_name":"Olowookere Heritage Precious ","actor_username":"heritageprecious91@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-13 05:17:03.765439+00	
00000000-0000-0000-0000-000000000000	2d45a8d9-b196-46a8-8aee-bd902eae9424	{"action":"user_confirmation_requested","actor_id":"1add9088-4034-4efd-8601-7c80024feb99","actor_name":"Taiwo Bashir ","actor_username":"taiwobashir111@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-13 05:53:35.620532+00	
00000000-0000-0000-0000-000000000000	68c06138-b6a0-49ef-bf22-969e964fa741	{"action":"user_signedup","actor_id":"1add9088-4034-4efd-8601-7c80024feb99","actor_name":"Taiwo Bashir ","actor_username":"taiwobashir111@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-13 05:54:37.174559+00	
00000000-0000-0000-0000-000000000000	8a97e793-4036-4a83-b58a-319224cac3a0	{"action":"login","actor_id":"1add9088-4034-4efd-8601-7c80024feb99","actor_name":"Taiwo Bashir ","actor_username":"taiwobashir111@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-05-13 05:54:40.2204+00	
00000000-0000-0000-0000-000000000000	b2fbc518-7bed-49bf-aa83-ae82ed29cd50	{"action":"user_confirmation_requested","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-13 06:02:01.360683+00	
00000000-0000-0000-0000-000000000000	36cfea8f-c105-44b5-ac38-7d13703eae92	{"action":"user_confirmation_requested","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-13 06:03:16.898708+00	
00000000-0000-0000-0000-000000000000	4d9d1302-eb54-4079-92f9-bd7e1e565e92	{"action":"user_signedup","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-13 06:03:58.223348+00	
00000000-0000-0000-0000-000000000000	82ccc9f9-a0a2-4d1f-ba33-cd67eb6e4e7a	{"action":"login","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-05-13 06:04:00.59314+00	
00000000-0000-0000-0000-000000000000	a26a00bb-774a-4f56-998e-6a2160988d4c	{"action":"user_confirmation_requested","actor_id":"8c2cb9bd-4de4-43f6-ad3b-90096fc73680","actor_name":"Gidado bamidele ","actor_username":"gidadobamidele@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-13 06:19:04.691769+00	
00000000-0000-0000-0000-000000000000	5cc49da1-4481-463e-a1b9-a9f5d3f80460	{"action":"user_signedup","actor_id":"8c2cb9bd-4de4-43f6-ad3b-90096fc73680","actor_name":"Gidado bamidele ","actor_username":"gidadobamidele@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-13 06:23:04.668809+00	
00000000-0000-0000-0000-000000000000	a41d9f3e-5818-4f25-91ea-08665ce4e798	{"action":"login","actor_id":"8c2cb9bd-4de4-43f6-ad3b-90096fc73680","actor_name":"Gidado bamidele ","actor_username":"gidadobamidele@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider_type":"email"}}	2025-05-13 06:23:09.352964+00	
00000000-0000-0000-0000-000000000000	b76f8a21-0f85-48d5-8b43-afc65f1fc470	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 06:51:26.911596+00	
00000000-0000-0000-0000-000000000000	4af162e1-dcac-43a6-8d21-5216814ee229	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 06:51:26.91458+00	
00000000-0000-0000-0000-000000000000	772dd6d2-68a7-42cf-92cb-9cbf469e8b6a	{"action":"user_confirmation_requested","actor_id":"9354fd5f-ff68-4e3a-be0a-32fed8127b15","actor_name":"Timileyin Adeola","actor_username":"adeolaotimileyin@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-13 09:14:25.795923+00	
00000000-0000-0000-0000-000000000000	19dca6d5-5683-486d-98c4-54296f14aa19	{"action":"user_signedup","actor_id":"9354fd5f-ff68-4e3a-be0a-32fed8127b15","actor_name":"Timileyin Adeola","actor_username":"adeolaotimileyin@gmail.com","actor_via_sso":false,"log_type":"team"}	2025-05-13 09:17:29.189988+00	
00000000-0000-0000-0000-000000000000	13a4f0dc-e906-40c3-a473-5f2c8836e53e	{"action":"login","actor_id":"9354fd5f-ff68-4e3a-be0a-32fed8127b15","actor_name":"Timileyin Adeola","actor_username":"adeolaotimileyin@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-13 09:17:53.312903+00	
00000000-0000-0000-0000-000000000000	ee81814e-8885-4cd0-8a75-652390f09ce3	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 09:45:52.494503+00	
00000000-0000-0000-0000-000000000000	3f8332c2-b163-4517-8b37-056f9c705803	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 09:45:52.497903+00	
00000000-0000-0000-0000-000000000000	f5dda4cb-67d6-4750-a039-8d413061a362	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 10:42:41.767312+00	
00000000-0000-0000-0000-000000000000	4d48f349-fb10-4cf0-9618-b5a91973f419	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 10:42:41.769842+00	
00000000-0000-0000-0000-000000000000	d9ded853-6cd4-435f-b899-e98f4926c1b7	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 10:50:41.275505+00	
00000000-0000-0000-0000-000000000000	7ce8a75c-9feb-483d-906c-55f3a868cb5b	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 10:50:41.277881+00	
00000000-0000-0000-0000-000000000000	7d1e55f5-59c4-4536-ba12-1557ca8a2422	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 10:52:02.112219+00	
00000000-0000-0000-0000-000000000000	65dd99c5-e805-4620-b52d-f3dc03250e31	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 11:42:05.507558+00	
00000000-0000-0000-0000-000000000000	1deb9205-9007-4f68-b4b9-cd3dab7e208c	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 11:42:05.509124+00	
00000000-0000-0000-0000-000000000000	db83d700-2504-4b10-be22-9f3484e65bc7	{"action":"login","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-13 12:07:13.473936+00	
00000000-0000-0000-0000-000000000000	b61f6e5e-04b8-4b65-a611-480b8b538465	{"action":"token_refreshed","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 16:57:22.051299+00	
00000000-0000-0000-0000-000000000000	c2d16084-36c8-47c4-af2d-0cf03916b695	{"action":"token_revoked","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 16:57:22.06384+00	
00000000-0000-0000-0000-000000000000	c9d061b7-410c-4d47-b450-b686582e27cb	{"action":"user_repeated_signup","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-13 17:03:32.634411+00	
00000000-0000-0000-0000-000000000000	2b9597c4-5f01-49ec-a572-25f7c88b1f75	{"action":"user_repeated_signup","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"user","traits":{"provider":"email"}}	2025-05-13 17:06:28.626921+00	
00000000-0000-0000-0000-000000000000	0e5c3f47-64be-4744-a441-2854908b80e7	{"action":"login","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-13 17:07:50.847274+00	
00000000-0000-0000-0000-000000000000	09ba3a76-41c9-4ecc-91c9-be51abda1efa	{"action":"token_refreshed","actor_id":"1add9088-4034-4efd-8601-7c80024feb99","actor_name":"Taiwo Bashir ","actor_username":"taiwobashir111@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 17:23:52.320586+00	
00000000-0000-0000-0000-000000000000	7627f278-9f2d-4919-9fac-62649771793c	{"action":"token_revoked","actor_id":"1add9088-4034-4efd-8601-7c80024feb99","actor_name":"Taiwo Bashir ","actor_username":"taiwobashir111@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 17:23:52.32409+00	
00000000-0000-0000-0000-000000000000	8f00eb2a-8d3b-4ed8-84bd-8647fd3df8f1	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 19:26:09.147157+00	
00000000-0000-0000-0000-000000000000	09e4ec7b-211b-4c4e-9a4c-f2bdcaab9f56	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 19:26:09.149393+00	
00000000-0000-0000-0000-000000000000	67175973-53bb-45ea-9521-7f45fa06804b	{"action":"token_refreshed","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 21:30:13.480711+00	
00000000-0000-0000-0000-000000000000	637b9fed-7f5d-4bcc-8b82-6de73317e12d	{"action":"token_revoked","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-13 21:30:13.482396+00	
00000000-0000-0000-0000-000000000000	d7fce414-9292-42fe-8521-e8e888046d6d	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-17 09:31:00.532967+00	
00000000-0000-0000-0000-000000000000	50c8f72e-ceca-4902-a22d-217f9efa2d8d	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-17 09:31:00.555138+00	
00000000-0000-0000-0000-000000000000	c81a9b3c-7fd9-4965-9c54-6f1e31d5d166	{"action":"login","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-17 09:41:37.360055+00	
00000000-0000-0000-0000-000000000000	7d4945e4-78c9-4e79-8b96-4c3a6bf60b11	{"action":"token_refreshed","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-17 18:12:34.095129+00	
00000000-0000-0000-0000-000000000000	02d00d5f-eac6-4eee-a993-b99b11521c13	{"action":"token_revoked","actor_id":"df22a4cd-0fa0-42dd-a31f-5bc7c7487e94","actor_name":"Akinade Paul Omowonuola ","actor_username":"paulakinade013@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-17 18:12:34.103011+00	
00000000-0000-0000-0000-000000000000	d1ebfb87-03de-4615-b527-ee839ea4f41e	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-19 10:36:04.736553+00	
00000000-0000-0000-0000-000000000000	fb30c71c-dabb-4a43-8b77-73ad90b103d8	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-19 10:36:04.756804+00	
00000000-0000-0000-0000-000000000000	7d22a691-2700-4267-9e80-95d1b11537b6	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-19 10:48:00.96665+00	
00000000-0000-0000-0000-000000000000	653bfc46-dc30-46e2-86df-6b1f32eaf938	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-19 10:48:00.969987+00	
00000000-0000-0000-0000-000000000000	647fc2bb-c784-4320-b593-bc1fee2bdad5	{"action":"token_refreshed","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-19 11:39:33.601949+00	
00000000-0000-0000-0000-000000000000	c34fa202-966d-4809-9b95-d95af4af0506	{"action":"token_revoked","actor_id":"3d5c03dc-089b-4858-ade6-b2587e8e2325","actor_name":"Gigs Dev","actor_username":"gigsdev007@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-19 11:39:33.60567+00	
00000000-0000-0000-0000-000000000000	53181ba1-a75d-41fc-9f0b-7d4e9ad89614	{"action":"token_refreshed","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-19 12:04:33.062924+00	
00000000-0000-0000-0000-000000000000	73487e2c-7b22-41c8-820e-755c75395e98	{"action":"token_revoked","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"token"}	2025-05-19 12:04:33.065621+00	
00000000-0000-0000-0000-000000000000	b67ef56e-f044-40d7-a5fe-d1b951b9e868	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-26 11:52:58.129486+00	
00000000-0000-0000-0000-000000000000	509dc7bc-2884-4eb6-af4b-d523d5cd3e69	{"action":"login","actor_id":"8cf68351-99d4-4c01-ae5f-ba8321e6aeb2","actor_name":"Olajide Igbalaye","actor_username":"ojidelawrence@gmail.com","actor_via_sso":false,"log_type":"account","traits":{"provider":"email"}}	2025-05-26 12:00:24.893239+00	
\.


--
-- Data for Name: flow_state; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.flow_state (id, user_id, auth_code, code_challenge_method, code_challenge, provider_type, provider_access_token, provider_refresh_token, created_at, updated_at, authentication_method, auth_code_issued_at) FROM stdin;
02a6f0a9-23f1-4aa1-9865-634900f507a3	817f453e-800d-493b-b6e7-3734dc98b96a	394b9c18-48b2-4855-88c8-b3eacb0f0ca4	s256	7dJbDbsS11S1FwMshZvkNQejAaJvlQm4dJHqelAwt3c	email			2025-05-01 13:08:47.089595+00	2025-05-01 13:09:26.947012+00	email/signup	2025-05-01 13:09:26.946968+00
d4679b35-8e96-4e1d-8d48-77de363ffa0a	3d5c03dc-089b-4858-ade6-b2587e8e2325	a30a7461-ad04-4fbb-827a-a178ca7284b6	s256	fup1zs92XZk8Bz_H6OjWPTq8OVgsoTe91EvKJTDnGOU	email			2025-05-01 13:30:02.356619+00	2025-05-01 13:30:21.568269+00	email/signup	2025-05-01 13:30:21.568213+00
317ffbfe-391e-4041-bc1f-81828e568d96	ff7e4890-af34-4476-8d67-53322ce6b03f	eaa38f23-452a-44ac-96aa-f1b583ff408e	s256	hO8BipuNd-msBNtnLHCI_xqfBfuOv8ul83cHNCHqZyY	email			2025-05-04 14:35:49.069371+00	2025-05-04 14:36:17.653362+00	email/signup	2025-05-04 14:36:17.653305+00
0ba6d4cb-36d0-4f7d-9873-00839fb62abb	ab2997bd-6765-493b-9395-83e18867e031	9bece384-f717-48cd-9bee-cb3f62f72b78	s256	F2zm7rqdw1sraorpzIqdrygrz5GGR6DPEc7ilJt4CMI	email			2025-05-06 12:15:10.472271+00	2025-05-06 12:15:17.968397+00	email/signup	2025-05-06 12:15:17.968354+00
84b9d5d6-dd31-4eef-950a-c5c2f731a001	991287ba-763d-40f5-a26c-620a0c7169c1	629ae5a0-4ee0-486c-881f-f4a2e71b006a	s256	uLSFoM9WYa5Gqd6RwWrHbdmCeI2WmyibZMNpLt4ksOk	email			2025-05-13 05:10:57.520069+00	2025-05-13 05:16:00.168447+00	email/signup	2025-05-13 05:16:00.168402+00
a0e54342-290a-49ce-818b-036536f8afa5	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	533ea9e8-0e4b-485b-922d-6fc629639861	s256	f0bZ3da6h1yh7fHY2wqp350XMoc81tuig6woKqI-cNk	email			2025-05-13 06:02:01.363504+00	2025-05-13 06:02:01.363504+00	email/signup	\N
0b591995-d27a-4d38-8812-3e875e98ae0c	9354fd5f-ff68-4e3a-be0a-32fed8127b15	3431777e-52b7-4568-a746-be420e623987	s256	jieen4XHm2h02EM74-1Mexi76rqtKamRgybecYxDEW0	email			2025-05-13 09:14:25.797175+00	2025-05-13 09:17:29.20298+00	email/signup	2025-05-13 09:17:29.20294+00
\.


--
-- Data for Name: identities; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.identities (provider_id, user_id, identity_data, provider, last_sign_in_at, created_at, updated_at, id) FROM stdin;
1add9088-4034-4efd-8601-7c80024feb99	1add9088-4034-4efd-8601-7c80024feb99	{"sub": "1add9088-4034-4efd-8601-7c80024feb99", "email": "taiwobashir111@gmail.com", "phone": "07046789327", "address": "Adebayo", "full_name": "Taiwo Bashir ", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false, "assigned_pastor": null}	email	2025-05-13 05:53:35.616316+00	2025-05-13 05:53:35.616378+00	2025-05-13 05:53:35.616378+00	c665d708-9e59-49f0-bb92-baf0487f6706
8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	{"sub": "8cf68351-99d4-4c01-ae5f-ba8321e6aeb2", "email": "ojidelawrence@gmail.com", "full_name": "Olajide Igbalaye", "email_verified": true, "phone_verified": false}	email	2025-05-01 09:58:57.968403+00	2025-05-01 09:58:57.968473+00	2025-05-01 09:58:57.968473+00	2e9a4df2-0db7-43ce-a2c8-bce6253f8660
817f453e-800d-493b-b6e7-3734dc98b96a	817f453e-800d-493b-b6e7-3734dc98b96a	{"sub": "817f453e-800d-493b-b6e7-3734dc98b96a", "email": "igbalayeolajide@gmail.com", "full_name": "Igbalaye Olajide Temitope", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false, "assigned_pastor": null}	email	2025-05-01 13:08:47.078192+00	2025-05-01 13:08:47.078246+00	2025-05-01 13:08:47.078246+00	387f5dbd-284e-43cc-8c37-7a3bb435f2ff
3d5c03dc-089b-4858-ade6-b2587e8e2325	3d5c03dc-089b-4858-ade6-b2587e8e2325	{"sub": "3d5c03dc-089b-4858-ade6-b2587e8e2325", "email": "gigsdev007@gmail.com", "full_name": "Gigs Dev", "church_unit": null, "email_verified": true, "phone_verified": false, "assigned_pastor": null}	email	2025-05-01 13:30:02.349996+00	2025-05-01 13:30:02.350048+00	2025-05-01 13:30:02.350048+00	3d59dfbc-8140-49db-abc1-f14261c61cfe
ff7e4890-af34-4476-8d67-53322ce6b03f	ff7e4890-af34-4476-8d67-53322ce6b03f	{"sub": "ff7e4890-af34-4476-8d67-53322ce6b03f", "email": "adeyemis958@gmail.com", "full_name": "Samuel Adeyemi", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false, "assigned_pastor": null}	email	2025-05-04 14:35:49.060163+00	2025-05-04 14:35:49.060219+00	2025-05-04 14:35:49.060219+00	589d0c85-4d3d-4e80-81af-4c65b772d0e4
ab2997bd-6765-493b-9395-83e18867e031	ab2997bd-6765-493b-9395-83e18867e031	{"sub": "ab2997bd-6765-493b-9395-83e18867e031", "email": "007postit@gmail.com", "phone": "07031098097", "address": "Adebayo Layout", "full_name": "Post Its", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false, "assigned_pastor": null}	email	2025-05-06 12:15:10.465065+00	2025-05-06 12:15:10.465134+00	2025-05-06 12:15:10.465134+00	f4b657ab-6a3c-472b-ad81-294725aeb60e
16761181-49b6-4d34-addc-2369d09bec79	16761181-49b6-4d34-addc-2369d09bec79	{"sub": "16761181-49b6-4d34-addc-2369d09bec79", "email": "popsabey1@gmail.com", "full_name": "Abiodun Popoola", "church_unit": "3hmedia", "email_verified": true, "phone_verified": false, "assigned_pastor": null}	email	2025-05-06 12:19:21.609702+00	2025-05-06 12:19:21.60976+00	2025-05-06 12:19:21.60976+00	a66351b8-2ed7-41a9-8fb5-79f6083ffe12
991287ba-763d-40f5-a26c-620a0c7169c1	991287ba-763d-40f5-a26c-620a0c7169c1	{"sub": "991287ba-763d-40f5-a26c-620a0c7169c1", "email": "heritageprecious91@gmail.com", "phone": "+2349063070708", "address": "Ekiti State University Ado Ekiti ", "full_name": "Olowookere Heritage Precious ", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false, "assigned_pastor": null}	email	2025-05-13 05:10:57.513083+00	2025-05-13 05:10:57.513139+00	2025-05-13 05:10:57.513139+00	8b554695-b5dd-4284-bab6-deb3ffa6aa61
df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	{"sub": "df22a4cd-0fa0-42dd-a31f-5bc7c7487e94", "email": "paulakinade013@gmail.com", "phone": "09165351339", "address": "Ekiti State University,London Hostel around satellite gate ", "full_name": "Akinade Paul Omowonuola ", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false, "assigned_pastor": null}	email	2025-05-13 06:02:01.357623+00	2025-05-13 06:02:01.357673+00	2025-05-13 06:02:01.357673+00	67319353-6779-44f8-8b6b-74de8e4db8e1
8c2cb9bd-4de4-43f6-ad3b-90096fc73680	8c2cb9bd-4de4-43f6-ad3b-90096fc73680	{"sub": "8c2cb9bd-4de4-43f6-ad3b-90096fc73680", "email": "gidadobamidele@gmail.com", "phone": "08144985540", "address": null, "full_name": "Gidado bamidele ", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false, "assigned_pastor": null}	email	2025-05-13 06:19:04.688486+00	2025-05-13 06:19:04.688538+00	2025-05-13 06:19:04.688538+00	9e864644-cffa-4fb0-b25a-d4f85c5f9fc2
9354fd5f-ff68-4e3a-be0a-32fed8127b15	9354fd5f-ff68-4e3a-be0a-32fed8127b15	{"sub": "9354fd5f-ff68-4e3a-be0a-32fed8127b15", "email": "adeolaotimileyin@gmail.com", "phone": "7032511051", "address": "Akinola Ola Street, olora layout, Adebayo", "full_name": "Timileyin Adeola", "church_unit": "3hmedia", "email_verified": true, "phone_verified": false, "assigned_pastor": null}	email	2025-05-13 09:14:25.79265+00	2025-05-13 09:14:25.792698+00	2025-05-13 09:14:25.792698+00	fc06e8e4-e004-4682-a0f5-1dfec8a24104
\.


--
-- Data for Name: instances; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.instances (id, uuid, raw_base_config, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: mfa_amr_claims; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_amr_claims (session_id, created_at, updated_at, authentication_method, id) FROM stdin;
e01ce830-645b-4455-b813-74fb2f48fb7a	2025-05-01 13:23:16.787414+00	2025-05-01 13:23:16.787414+00	password	3807baa7-24b8-42f7-acc5-c75536502f67
e301cb66-3727-41c5-bc69-347b69fea3d2	2025-05-01 13:33:06.853007+00	2025-05-01 13:33:06.853007+00	password	bf79ffd4-d130-44e7-a348-f951bc26c242
3d3c97e4-5400-46d4-910f-3d9d3dd557b9	2025-05-01 14:53:46.099419+00	2025-05-01 14:53:46.099419+00	password	a96a1243-fe75-44f9-a1c8-e32261708b1a
37c966bb-7bf4-4124-982b-dad3f107cda4	2025-05-01 14:54:18.863192+00	2025-05-01 14:54:18.863192+00	password	0361dcee-bd0f-47df-81a0-a8498bf126ef
1a00d080-e110-4f4c-af21-31d4bac2b374	2025-05-01 14:56:26.733801+00	2025-05-01 14:56:26.733801+00	password	c763e9f6-1209-4491-b7b7-d7a7a5e2b15e
9ebc896e-8378-40d5-935c-c93987e4d217	2025-05-01 15:11:45.793208+00	2025-05-01 15:11:45.793208+00	password	05e6c923-fc24-462c-a8ab-89b2e5958b36
e6f3e64c-5b0b-4de9-845d-6a3cbd9ff01d	2025-05-01 15:14:11.989416+00	2025-05-01 15:14:11.989416+00	password	4785e812-c638-42bc-8cc2-73db4764a42d
31994e8d-59f4-4105-ac43-4ceb31f02ee1	2025-05-01 15:15:20.158185+00	2025-05-01 15:15:20.158185+00	password	1dcb37c9-1c4c-460f-b7c4-21149b6230c9
a53be683-fb88-4624-a743-6c9c14917591	2025-05-02 15:29:24.961051+00	2025-05-02 15:29:24.961051+00	password	3d8e908e-15ea-4f63-b74b-531c8caba9ea
586b6a7f-ede0-4e01-9749-c0e0564b96a3	2025-05-02 19:04:13.350297+00	2025-05-02 19:04:13.350297+00	password	826501af-cfef-4ace-9e9d-b8c3d3eced57
ab4bc171-183e-4a52-b7f7-0d99e0ccd4ff	2025-05-04 13:09:42.476365+00	2025-05-04 13:09:42.476365+00	password	a764cc5d-3e5e-4d79-bbb7-53fdbaff44a3
fd7e159d-f24a-456f-8367-d927f291217e	2025-05-04 13:42:19.621515+00	2025-05-04 13:42:19.621515+00	password	7969a5e4-ebe8-4d16-bfd6-766ab407a467
4d4e8294-83d2-41ce-88bd-55863de45344	2025-05-04 13:43:47.968126+00	2025-05-04 13:43:47.968126+00	password	7f0705d8-f769-4399-abeb-4291a2b67d67
5e190b64-9261-4dc3-bf9e-a099ad44aeb9	2025-05-04 13:46:08.358647+00	2025-05-04 13:46:08.358647+00	password	ecbdefb5-7528-43b2-a0bb-5dc0cf931b71
1ac0470b-bddc-450c-b947-7dfd7ad84303	2025-05-04 13:46:43.251041+00	2025-05-04 13:46:43.251041+00	password	efc3958a-a6e0-467e-85d0-5a5d4fc1ef08
c0067018-73c1-4c52-ab1a-0b2ab643953f	2025-05-04 14:11:07.769456+00	2025-05-04 14:11:07.769456+00	password	5eea7030-c9ee-49b7-bfd8-5aca18740ae4
8bd918f7-f597-41c2-bb34-34b8309ed072	2025-05-04 14:14:33.667772+00	2025-05-04 14:14:33.667772+00	password	2311e1c3-539a-41c6-999a-90ce11278d75
f483b31b-b334-4be2-a988-133f68695cec	2025-05-04 14:36:30.313977+00	2025-05-04 14:36:30.313977+00	password	87321735-74db-411c-8cb2-45f9bc951c0f
e1afd709-3b87-4442-b09e-a8a0c843389e	2025-05-04 14:50:06.553115+00	2025-05-04 14:50:06.553115+00	password	24163b50-37bb-4c65-bb98-d869e6c0a368
a045b1b3-097d-4ce9-99b0-3e5ec6bd6438	2025-05-04 15:08:58.885956+00	2025-05-04 15:08:58.885956+00	password	d17e4caa-527e-42d3-8fc6-e21a788d6ddb
c688c48c-25cf-454d-bf3e-77c85f0065d3	2025-05-04 15:38:44.133809+00	2025-05-04 15:38:44.133809+00	password	6f2d19b4-136d-4788-a0af-2d15f0571387
84cd2e2f-b158-4ea2-8b5a-d2301db10d61	2025-05-04 15:47:33.195971+00	2025-05-04 15:47:33.195971+00	password	5f777330-cf07-4ab8-a996-83fe68ba13d8
ed5778fe-518e-4727-8a7a-2838a66653a4	2025-05-04 16:39:26.353102+00	2025-05-04 16:39:26.353102+00	password	b2fa5988-202a-4e76-89e7-ba8cbe1cc225
7c25727e-a125-46a7-bb29-468baffcafbd	2025-05-04 16:57:42.220642+00	2025-05-04 16:57:42.220642+00	password	9fefb7c3-3b17-4665-9124-b68358f873f8
8c47954a-1fcf-4b45-92e8-4647f641681a	2025-05-04 17:04:01.792812+00	2025-05-04 17:04:01.792812+00	password	723ec33b-4a2b-4fdf-9b49-5c4f6529071d
507c83f8-72cb-4a8f-8d12-b64b9533c1b5	2025-05-04 17:13:06.132186+00	2025-05-04 17:13:06.132186+00	password	8779fcf4-3683-40ae-af35-2de9ab5d0c41
f0941c4d-2a3e-4a64-80f2-5c3ed328c74e	2025-05-04 17:46:22.630088+00	2025-05-04 17:46:22.630088+00	password	7170f784-b92f-45c4-8046-824f9e88680c
9b7931a3-fc17-4527-af3f-eeaec1c3b921	2025-05-05 10:12:25.69009+00	2025-05-05 10:12:25.69009+00	password	9f374df4-9e9e-4fbb-9577-c6f66e5de831
cd938a29-0694-4b4c-beda-f5aecbc18e31	2025-05-06 12:16:44.614551+00	2025-05-06 12:16:44.614551+00	password	5e37aefd-06c3-42e9-9afd-55ccefc23921
85cbda19-fd06-4f86-9657-12d9e08193a0	2025-05-06 12:19:50.430312+00	2025-05-06 12:19:50.430312+00	email/signup	24565bfd-094c-42ea-bf85-5dbbba30e552
0c2cf76b-2b0e-4940-92cd-b0ce17df27ad	2025-05-06 12:49:09.434786+00	2025-05-06 12:49:09.434786+00	password	204e27d4-7d62-49d9-986b-6b9e3505f2ec
7b6248bc-7415-42c9-9339-520da65e796d	2025-05-06 13:23:01.11454+00	2025-05-06 13:23:01.11454+00	password	19bec4f3-6992-45da-91ab-79a84009f2ae
0d6fdd8a-0894-4ed8-966a-0725c70967d3	2025-05-06 14:07:25.49675+00	2025-05-06 14:07:25.49675+00	password	aa12c092-0913-45c9-8576-4c57421712a2
8d93a12f-4b91-4519-bddd-7e43b5f66c8c	2025-05-08 11:41:42.327174+00	2025-05-08 11:41:42.327174+00	password	9e24b055-7c29-4aa1-b2bf-39dd8aca09fa
05aa8951-06aa-46c4-b2cf-e9ce3bfaabfb	2025-05-08 14:32:52.948638+00	2025-05-08 14:32:52.948638+00	password	c8a67180-53bf-41c8-9706-28182efb5234
fb94e866-bf6f-42cf-a50a-982536613473	2025-05-12 11:39:58.184274+00	2025-05-12 11:39:58.184274+00	password	64db2663-6941-4872-ad77-fcfaf87f419d
72b1f6d4-077b-4073-a907-f684a8f32951	2025-05-12 21:13:02.30298+00	2025-05-12 21:13:02.30298+00	password	eb8a0021-dafe-48d9-b44c-3484b309072c
594c42b8-56ce-4f67-85fd-790c47e11b43	2025-05-13 05:17:03.777234+00	2025-05-13 05:17:03.777234+00	password	b79a494f-9543-40c0-a658-118891725d20
f23b7f96-429e-49aa-8ba2-b05e698b3ac6	2025-05-13 05:54:40.229526+00	2025-05-13 05:54:40.229526+00	email/signup	28f637d8-edfa-4ef5-bd05-f12fe6ae2d36
27992301-33cf-4cb9-8cf5-1e0d6511f7b9	2025-05-13 06:04:00.598222+00	2025-05-13 06:04:00.598222+00	email/signup	c8116cde-ced2-4a3c-bc99-71e18e74c9e8
e5d128cc-e7ad-467d-a1a5-4c9a0fda85ca	2025-05-13 06:23:09.36203+00	2025-05-13 06:23:09.36203+00	email/signup	8b782c02-8599-424f-a597-e9f16782f624
eb0fc2df-3e0f-4979-9a11-3a2fb8819fb4	2025-05-13 09:17:53.327263+00	2025-05-13 09:17:53.327263+00	password	00cebdb8-5e98-4a9d-853f-a96acbdc8ebe
7667f85e-0bc9-4d4d-bd18-aa05a662ac0d	2025-05-13 12:07:13.48546+00	2025-05-13 12:07:13.48546+00	password	c37bcaf4-2d8c-4d7a-921f-3ce06c36d6d4
c62cac79-b671-48c0-ac40-8c9167dff176	2025-05-13 17:07:50.863807+00	2025-05-13 17:07:50.863807+00	password	7bf7bdad-057e-42e5-9c23-70167b48069e
64914174-c07b-47a8-8f13-55ddef7c6645	2025-05-17 09:41:37.378002+00	2025-05-17 09:41:37.378002+00	password	8ab12a6c-6983-4633-b984-b874a2025c34
a3f9af2b-5ba7-4e48-97ed-ee0cbc39e7e8	2025-05-26 11:52:58.164851+00	2025-05-26 11:52:58.164851+00	password	39faccc7-15c4-4623-8ade-7a44a9054c3b
0340e1e5-a542-429d-9926-a479683ac7dd	2025-05-26 12:00:24.982896+00	2025-05-26 12:00:24.982896+00	password	c44e60a2-e8f2-4237-8229-201f447c9fd3
\.


--
-- Data for Name: mfa_challenges; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_challenges (id, factor_id, created_at, verified_at, ip_address, otp_code, web_authn_session_data) FROM stdin;
\.


--
-- Data for Name: mfa_factors; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.mfa_factors (id, user_id, friendly_name, factor_type, status, created_at, updated_at, secret, phone, last_challenged_at, web_authn_credential, web_authn_aaguid) FROM stdin;
\.


--
-- Data for Name: one_time_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.one_time_tokens (id, user_id, token_type, token_hash, relates_to, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: refresh_tokens; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.refresh_tokens (instance_id, id, token, user_id, revoked, created_at, updated_at, parent, session_id) FROM stdin;
00000000-0000-0000-0000-000000000000	61	oupjfiemvyej	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-02 19:04:13.347461+00	2025-05-02 19:04:13.347461+00	\N	586b6a7f-ede0-4e01-9749-c0e0564b96a3
00000000-0000-0000-0000-000000000000	62	iynpx3x3r3g6	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-04 13:09:42.459334+00	2025-05-04 13:09:42.459334+00	\N	ab4bc171-183e-4a52-b7f7-0d99e0ccd4ff
00000000-0000-0000-0000-000000000000	63	mnxskgvzramu	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-04 13:42:19.617271+00	2025-05-04 13:42:19.617271+00	\N	fd7e159d-f24a-456f-8367-d927f291217e
00000000-0000-0000-0000-000000000000	64	xgpg5luqgzme	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-04 13:43:47.965993+00	2025-05-04 13:43:47.965993+00	\N	4d4e8294-83d2-41ce-88bd-55863de45344
00000000-0000-0000-0000-000000000000	65	gtmrgfwwwvow	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-04 13:46:08.356+00	2025-05-04 13:46:08.356+00	\N	5e190b64-9261-4dc3-bf9e-a099ad44aeb9
00000000-0000-0000-0000-000000000000	66	so2vxdod4mqz	817f453e-800d-493b-b6e7-3734dc98b96a	f	2025-05-04 13:46:43.248381+00	2025-05-04 13:46:43.248381+00	\N	1ac0470b-bddc-450c-b947-7dfd7ad84303
00000000-0000-0000-0000-000000000000	67	5igymvxkfrh7	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-04 14:11:07.761469+00	2025-05-04 14:11:07.761469+00	\N	c0067018-73c1-4c52-ab1a-0b2ab643953f
00000000-0000-0000-0000-000000000000	60	guqkbuxyouid	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-02 15:29:24.958196+00	2025-05-04 14:22:34.796409+00	\N	a53be683-fb88-4624-a743-6c9c14917591
00000000-0000-0000-0000-000000000000	69	xzvkvsesndgs	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-04 14:22:34.79817+00	2025-05-04 14:22:34.79817+00	guqkbuxyouid	a53be683-fb88-4624-a743-6c9c14917591
00000000-0000-0000-0000-000000000000	70	sfdf3c4cbbzd	ff7e4890-af34-4476-8d67-53322ce6b03f	f	2025-05-04 14:36:30.311312+00	2025-05-04 14:36:30.311312+00	\N	f483b31b-b334-4be2-a988-133f68695cec
00000000-0000-0000-0000-000000000000	71	tz5clptsspnd	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-04 14:50:06.547856+00	2025-05-04 14:50:06.547856+00	\N	e1afd709-3b87-4442-b09e-a8a0c843389e
00000000-0000-0000-0000-000000000000	72	lclnz5a3hntw	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-04 15:08:58.882102+00	2025-05-04 15:08:58.882102+00	\N	a045b1b3-097d-4ce9-99b0-3e5ec6bd6438
00000000-0000-0000-0000-000000000000	73	sn2tqyigqbqv	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-04 15:38:44.131617+00	2025-05-04 16:39:17.805592+00	\N	c688c48c-25cf-454d-bf3e-77c85f0065d3
00000000-0000-0000-0000-000000000000	75	ck4d5s6hvymf	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-04 16:39:17.809655+00	2025-05-04 16:39:17.809655+00	sn2tqyigqbqv	c688c48c-25cf-454d-bf3e-77c85f0065d3
00000000-0000-0000-0000-000000000000	68	rnk4dsx7mamj	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-04 14:14:33.659186+00	2025-05-04 16:55:40.878221+00	\N	8bd918f7-f597-41c2-bb34-34b8309ed072
00000000-0000-0000-0000-000000000000	77	mecjxektseaa	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-04 16:55:40.880465+00	2025-05-04 16:55:40.880465+00	rnk4dsx7mamj	8bd918f7-f597-41c2-bb34-34b8309ed072
00000000-0000-0000-0000-000000000000	81	nrpn5inkjymo	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-04 17:46:22.616546+00	2025-05-04 20:24:03.487915+00	\N	f0941c4d-2a3e-4a64-80f2-5c3ed328c74e
00000000-0000-0000-0000-000000000000	80	ix5j4r6mefz3	ff7e4890-af34-4476-8d67-53322ce6b03f	t	2025-05-04 17:13:06.12829+00	2025-05-04 20:24:52.003158+00	\N	507c83f8-72cb-4a8f-8d12-b64b9533c1b5
00000000-0000-0000-0000-000000000000	83	tx3r2cvozxve	ff7e4890-af34-4476-8d67-53322ce6b03f	t	2025-05-04 20:24:52.004261+00	2025-05-04 21:27:54.53196+00	ix5j4r6mefz3	507c83f8-72cb-4a8f-8d12-b64b9533c1b5
00000000-0000-0000-0000-000000000000	82	npcj5oe2fyhy	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-04 20:24:03.492791+00	2025-05-05 09:18:00.614851+00	nrpn5inkjymo	f0941c4d-2a3e-4a64-80f2-5c3ed328c74e
00000000-0000-0000-0000-000000000000	79	b324kd3gjfyj	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-04 17:04:01.789009+00	2025-05-05 09:46:41.597948+00	\N	8c47954a-1fcf-4b45-92e8-4647f641681a
00000000-0000-0000-0000-000000000000	31	lxk4agnlskhp	817f453e-800d-493b-b6e7-3734dc98b96a	f	2025-05-01 13:23:16.785586+00	2025-05-01 13:23:16.785586+00	\N	e01ce830-645b-4455-b813-74fb2f48fb7a
00000000-0000-0000-0000-000000000000	32	lvou2rko6ild	3d5c03dc-089b-4858-ade6-b2587e8e2325	f	2025-05-01 13:33:06.849151+00	2025-05-01 13:33:06.849151+00	\N	e301cb66-3727-41c5-bc69-347b69fea3d2
00000000-0000-0000-0000-000000000000	84	43tbgwjhvihr	ff7e4890-af34-4476-8d67-53322ce6b03f	t	2025-05-04 21:27:54.533439+00	2025-05-05 09:46:50.52674+00	tx3r2cvozxve	507c83f8-72cb-4a8f-8d12-b64b9533c1b5
00000000-0000-0000-0000-000000000000	74	uoylpto6di6c	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-04 15:47:33.191771+00	2025-05-05 10:05:06.940899+00	\N	84cd2e2f-b158-4ea2-8b5a-d2301db10d61
00000000-0000-0000-0000-000000000000	76	sx3ru7yuspjt	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-04 16:39:26.351776+00	2025-05-05 10:12:13.176134+00	\N	ed5778fe-518e-4727-8a7a-2838a66653a4
00000000-0000-0000-0000-000000000000	89	5xgzdyyuhmgx	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-05 10:12:13.177632+00	2025-05-05 10:12:13.177632+00	sx3ru7yuspjt	ed5778fe-518e-4727-8a7a-2838a66653a4
00000000-0000-0000-0000-000000000000	85	2gmfhfmvufid	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-05 09:18:00.628863+00	2025-05-05 10:18:45.88432+00	npcj5oe2fyhy	f0941c4d-2a3e-4a64-80f2-5c3ed328c74e
00000000-0000-0000-0000-000000000000	40	3b73a4dshsn5	817f453e-800d-493b-b6e7-3734dc98b96a	f	2025-05-01 14:53:46.09425+00	2025-05-01 14:53:46.09425+00	\N	3d3c97e4-5400-46d4-910f-3d9d3dd557b9
00000000-0000-0000-0000-000000000000	41	ztvxyoziuh5p	3d5c03dc-089b-4858-ade6-b2587e8e2325	f	2025-05-01 14:54:18.861982+00	2025-05-01 14:54:18.861982+00	\N	37c966bb-7bf4-4124-982b-dad3f107cda4
00000000-0000-0000-0000-000000000000	42	glezjlbwjkoy	817f453e-800d-493b-b6e7-3734dc98b96a	f	2025-05-01 14:56:26.728534+00	2025-05-01 14:56:26.728534+00	\N	1a00d080-e110-4f4c-af21-31d4bac2b374
00000000-0000-0000-0000-000000000000	87	2ezsxcheumac	ff7e4890-af34-4476-8d67-53322ce6b03f	t	2025-05-05 09:46:50.527075+00	2025-05-05 12:03:56.420033+00	43tbgwjhvihr	507c83f8-72cb-4a8f-8d12-b64b9533c1b5
00000000-0000-0000-0000-000000000000	90	pqud6n73qayo	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-05 10:12:25.687953+00	2025-05-05 20:05:12.404549+00	\N	9b7931a3-fc17-4527-af3f-eeaec1c3b921
00000000-0000-0000-0000-000000000000	47	ywxityzee2wn	3d5c03dc-089b-4858-ade6-b2587e8e2325	f	2025-05-01 15:11:45.788608+00	2025-05-01 15:11:45.788608+00	\N	9ebc896e-8378-40d5-935c-c93987e4d217
00000000-0000-0000-0000-000000000000	48	ij54gbqxbyxx	817f453e-800d-493b-b6e7-3734dc98b96a	f	2025-05-01 15:14:11.987258+00	2025-05-01 15:14:11.987258+00	\N	e6f3e64c-5b0b-4de9-845d-6a3cbd9ff01d
00000000-0000-0000-0000-000000000000	49	txx7fgnp33dn	817f453e-800d-493b-b6e7-3734dc98b96a	f	2025-05-01 15:15:20.155573+00	2025-05-01 15:15:20.155573+00	\N	31994e8d-59f4-4105-ac43-4ceb31f02ee1
00000000-0000-0000-0000-000000000000	86	ngoxngjeh2gc	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-05 09:46:41.601502+00	2025-05-05 20:07:29.26715+00	b324kd3gjfyj	8c47954a-1fcf-4b45-92e8-4647f641681a
00000000-0000-0000-0000-000000000000	92	zadu3x3mvztz	ff7e4890-af34-4476-8d67-53322ce6b03f	t	2025-05-05 12:03:56.420761+00	2025-05-05 20:47:09.496671+00	2ezsxcheumac	507c83f8-72cb-4a8f-8d12-b64b9533c1b5
00000000-0000-0000-0000-000000000000	95	3hnt5ph7ff6v	ff7e4890-af34-4476-8d67-53322ce6b03f	f	2025-05-05 20:47:09.499809+00	2025-05-05 20:47:09.499809+00	zadu3x3mvztz	507c83f8-72cb-4a8f-8d12-b64b9533c1b5
00000000-0000-0000-0000-000000000000	88	y7722ydyelbx	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-05 10:05:06.943556+00	2025-05-06 10:23:33.897152+00	uoylpto6di6c	84cd2e2f-b158-4ea2-8b5a-d2301db10d61
00000000-0000-0000-0000-000000000000	96	k4htang76owp	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-06 10:23:33.917121+00	2025-05-06 10:23:33.917121+00	y7722ydyelbx	84cd2e2f-b158-4ea2-8b5a-d2301db10d61
00000000-0000-0000-0000-000000000000	93	dzztnqvegfz6	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-05 20:05:12.421783+00	2025-05-06 11:23:23.954651+00	pqud6n73qayo	9b7931a3-fc17-4527-af3f-eeaec1c3b921
00000000-0000-0000-0000-000000000000	94	ci4gb3lpsn3z	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-05 20:07:29.269718+00	2025-05-06 11:44:23.493221+00	ngoxngjeh2gc	8c47954a-1fcf-4b45-92e8-4647f641681a
00000000-0000-0000-0000-000000000000	98	d6cbbenl5l6l	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-06 11:44:23.495827+00	2025-05-06 11:44:23.495827+00	ci4gb3lpsn3z	8c47954a-1fcf-4b45-92e8-4647f641681a
00000000-0000-0000-0000-000000000000	78	t45ibyiereec	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-04 16:57:42.216935+00	2025-05-06 12:15:19.876066+00	\N	7c25727e-a125-46a7-bb29-468baffcafbd
00000000-0000-0000-0000-000000000000	99	ahf72bfaor2h	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-06 12:15:19.878706+00	2025-05-06 12:15:19.878706+00	t45ibyiereec	7c25727e-a125-46a7-bb29-468baffcafbd
00000000-0000-0000-0000-000000000000	97	6jlkgaf6o4kk	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-06 11:23:23.957854+00	2025-05-06 12:25:57.052197+00	dzztnqvegfz6	9b7931a3-fc17-4527-af3f-eeaec1c3b921
00000000-0000-0000-0000-000000000000	103	vherjerm33vj	3d5c03dc-089b-4858-ade6-b2587e8e2325	f	2025-05-06 12:49:09.431172+00	2025-05-06 12:49:09.431172+00	\N	0c2cf76b-2b0e-4940-92cd-b0ce17df27ad
00000000-0000-0000-0000-000000000000	100	ltgvlqj5pmkv	ab2997bd-6765-493b-9395-83e18867e031	t	2025-05-06 12:16:44.594541+00	2025-05-06 13:16:36.095707+00	\N	cd938a29-0694-4b4c-beda-f5aecbc18e31
00000000-0000-0000-0000-000000000000	102	rr2xhf3s5fzk	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-06 12:25:57.056347+00	2025-05-06 13:25:38.625564+00	6jlkgaf6o4kk	9b7931a3-fc17-4527-af3f-eeaec1c3b921
00000000-0000-0000-0000-000000000000	101	xktrhia45rq2	16761181-49b6-4d34-addc-2369d09bec79	t	2025-05-06 12:19:50.426749+00	2025-05-06 14:14:12.467701+00	\N	85cbda19-fd06-4f86-9657-12d9e08193a0
00000000-0000-0000-0000-000000000000	91	vja3mnozxopk	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-05 10:18:45.887017+00	2025-05-13 06:51:26.915096+00	2gmfhfmvufid	f0941c4d-2a3e-4a64-80f2-5c3ed328c74e
00000000-0000-0000-0000-000000000000	104	kx6u3q6clzju	ab2997bd-6765-493b-9395-83e18867e031	f	2025-05-06 13:16:36.097167+00	2025-05-06 13:16:36.097167+00	ltgvlqj5pmkv	cd938a29-0694-4b4c-beda-f5aecbc18e31
00000000-0000-0000-0000-000000000000	106	uvs4dwlaijy5	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-06 13:25:38.626237+00	2025-05-06 13:25:38.626237+00	rr2xhf3s5fzk	9b7931a3-fc17-4527-af3f-eeaec1c3b921
00000000-0000-0000-0000-000000000000	105	t3z6okgfvx5l	ab2997bd-6765-493b-9395-83e18867e031	t	2025-05-06 13:23:01.108602+00	2025-05-06 14:24:15.367891+00	\N	7b6248bc-7415-42c9-9339-520da65e796d
00000000-0000-0000-0000-000000000000	109	v4kpkjtti3dr	ab2997bd-6765-493b-9395-83e18867e031	f	2025-05-06 14:24:15.369182+00	2025-05-06 14:24:15.369182+00	t3z6okgfvx5l	7b6248bc-7415-42c9-9339-520da65e796d
00000000-0000-0000-0000-000000000000	107	iuhdow7v7ks7	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-06 14:07:25.494605+00	2025-05-06 15:05:35.07011+00	\N	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	110	maz74kxu62yb	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-06 15:05:35.071582+00	2025-05-06 16:04:08.747797+00	iuhdow7v7ks7	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	111	nn2pjc5zy2ad	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-06 16:04:08.749317+00	2025-05-06 17:02:40.506406+00	maz74kxu62yb	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	112	v4xphyggmqwi	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-06 17:02:40.507139+00	2025-05-08 09:34:18.945438+00	nn2pjc5zy2ad	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	113	kgfapd6m6u5w	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-08 09:34:18.968936+00	2025-05-08 11:16:04.183889+00	v4xphyggmqwi	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	114	dgi4oadkcjrc	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-08 11:16:04.188539+00	2025-05-08 12:17:52.089577+00	kgfapd6m6u5w	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	116	sgoqp6bbhgsk	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-08 12:17:52.092943+00	2025-05-08 13:59:57.688073+00	dgi4oadkcjrc	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	117	payo2y4w7wjq	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-08 13:59:57.690158+00	2025-05-08 15:00:02.957697+00	sgoqp6bbhgsk	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	120	cg3cirax4hyj	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-12 11:39:58.159889+00	2025-05-12 11:39:58.159889+00	\N	fb94e866-bf6f-42cf-a50a-982536613473
00000000-0000-0000-0000-000000000000	118	4ixanfghsdgd	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-08 14:32:52.945253+00	2025-05-12 11:40:51.460495+00	\N	05aa8951-06aa-46c4-b2cf-e9ce3bfaabfb
00000000-0000-0000-0000-000000000000	119	kj5vggnobq5y	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-08 15:00:02.959775+00	2025-05-12 11:42:17.241367+00	payo2y4w7wjq	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	108	2bbc7pntbm5x	16761181-49b6-4d34-addc-2369d09bec79	t	2025-05-06 14:14:12.471529+00	2025-05-13 03:58:12.691926+00	xktrhia45rq2	85cbda19-fd06-4f86-9657-12d9e08193a0
00000000-0000-0000-0000-000000000000	124	jkuvf5crfi2t	16761181-49b6-4d34-addc-2369d09bec79	f	2025-05-13 03:58:12.698104+00	2025-05-13 03:58:12.698104+00	2bbc7pntbm5x	85cbda19-fd06-4f86-9657-12d9e08193a0
00000000-0000-0000-0000-000000000000	123	3bwbjtkrzehk	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-12 21:13:02.282718+00	2025-05-13 04:57:50.876433+00	\N	72b1f6d4-077b-4073-a907-f684a8f32951
00000000-0000-0000-0000-000000000000	125	y62awrb5ya7p	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-13 04:57:50.879277+00	2025-05-13 04:57:50.879277+00	3bwbjtkrzehk	72b1f6d4-077b-4073-a907-f684a8f32951
00000000-0000-0000-0000-000000000000	126	x7w6b6wbqe7y	991287ba-763d-40f5-a26c-620a0c7169c1	f	2025-05-13 05:17:03.77024+00	2025-05-13 05:17:03.77024+00	\N	594c42b8-56ce-4f67-85fd-790c47e11b43
00000000-0000-0000-0000-000000000000	129	fzmorxklndwn	8c2cb9bd-4de4-43f6-ad3b-90096fc73680	f	2025-05-13 06:23:09.356063+00	2025-05-13 06:23:09.356063+00	\N	e5d128cc-e7ad-467d-a1a5-4c9a0fda85ca
00000000-0000-0000-0000-000000000000	130	ptlykmqgbnrf	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-13 06:51:26.917263+00	2025-05-13 06:51:26.917263+00	vja3mnozxopk	f0941c4d-2a3e-4a64-80f2-5c3ed328c74e
00000000-0000-0000-0000-000000000000	131	enzwmosqh3bn	9354fd5f-ff68-4e3a-be0a-32fed8127b15	f	2025-05-13 09:17:53.318716+00	2025-05-13 09:17:53.318716+00	\N	eb0fc2df-3e0f-4979-9a11-3a2fb8819fb4
00000000-0000-0000-0000-000000000000	122	ofqrl22e6v4r	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-12 11:42:17.242017+00	2025-05-13 09:45:52.498465+00	kj5vggnobq5y	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	121	w73covfygfzs	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-12 11:40:51.462866+00	2025-05-13 10:42:41.770355+00	4ixanfghsdgd	05aa8951-06aa-46c4-b2cf-e9ce3bfaabfb
00000000-0000-0000-0000-000000000000	132	ndr2yq3jjwyt	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-13 09:45:52.502952+00	2025-05-13 10:50:41.278428+00	ofqrl22e6v4r	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	134	nd3spxwt5t75	3d5c03dc-089b-4858-ade6-b2587e8e2325	f	2025-05-13 10:50:41.280516+00	2025-05-13 10:50:41.280516+00	ndr2yq3jjwyt	0d6fdd8a-0894-4ed8-966a-0725c70967d3
00000000-0000-0000-0000-000000000000	133	haufdkxraes5	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-13 10:42:41.773458+00	2025-05-13 11:42:05.509668+00	w73covfygfzs	05aa8951-06aa-46c4-b2cf-e9ce3bfaabfb
00000000-0000-0000-0000-000000000000	136	r2os7cwcx3pg	3d5c03dc-089b-4858-ade6-b2587e8e2325	f	2025-05-13 12:07:13.479741+00	2025-05-13 12:07:13.479741+00	\N	7667f85e-0bc9-4d4d-bd18-aa05a662ac0d
00000000-0000-0000-0000-000000000000	128	aonfqfihqram	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	t	2025-05-13 06:04:00.594761+00	2025-05-13 16:57:22.06519+00	\N	27992301-33cf-4cb9-8cf5-1e0d6511f7b9
00000000-0000-0000-0000-000000000000	137	gnehmnsgcoaj	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	f	2025-05-13 16:57:22.077187+00	2025-05-13 16:57:22.077187+00	aonfqfihqram	27992301-33cf-4cb9-8cf5-1e0d6511f7b9
00000000-0000-0000-0000-000000000000	127	gwxezwggioxi	1add9088-4034-4efd-8601-7c80024feb99	t	2025-05-13 05:54:40.223447+00	2025-05-13 17:23:52.324726+00	\N	f23b7f96-429e-49aa-8ba2-b05e698b3ac6
00000000-0000-0000-0000-000000000000	139	ib656vnb755w	1add9088-4034-4efd-8601-7c80024feb99	f	2025-05-13 17:23:52.327017+00	2025-05-13 17:23:52.327017+00	gwxezwggioxi	f23b7f96-429e-49aa-8ba2-b05e698b3ac6
00000000-0000-0000-0000-000000000000	135	radm7y7yexok	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-13 11:42:05.510342+00	2025-05-13 19:26:09.149983+00	haufdkxraes5	05aa8951-06aa-46c4-b2cf-e9ce3bfaabfb
00000000-0000-0000-0000-000000000000	138	flootjfgur6g	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	t	2025-05-13 17:07:50.858422+00	2025-05-13 21:30:13.4838+00	\N	c62cac79-b671-48c0-ac40-8c9167dff176
00000000-0000-0000-0000-000000000000	141	yo3c2pgo7mkh	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	f	2025-05-13 21:30:13.487372+00	2025-05-13 21:30:13.487372+00	flootjfgur6g	c62cac79-b671-48c0-ac40-8c9167dff176
00000000-0000-0000-0000-000000000000	140	uz6i2tvhur5r	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-13 19:26:09.15286+00	2025-05-17 09:31:00.556435+00	radm7y7yexok	05aa8951-06aa-46c4-b2cf-e9ce3bfaabfb
00000000-0000-0000-0000-000000000000	143	ifeqibq3pzr2	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	t	2025-05-17 09:41:37.373059+00	2025-05-17 18:12:34.103603+00	\N	64914174-c07b-47a8-8f13-55ddef7c6645
00000000-0000-0000-0000-000000000000	144	b37c6p5r6pye	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	f	2025-05-17 18:12:34.110461+00	2025-05-17 18:12:34.110461+00	ifeqibq3pzr2	64914174-c07b-47a8-8f13-55ddef7c6645
00000000-0000-0000-0000-000000000000	115	4iqkvkp3r2jr	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-08 11:41:42.321998+00	2025-05-19 10:36:04.757415+00	\N	8d93a12f-4b91-4519-bddd-7e43b5f66c8c
00000000-0000-0000-0000-000000000000	142	4c3enj3xywoy	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-17 09:31:00.582657+00	2025-05-19 10:48:00.97053+00	uz6i2tvhur5r	05aa8951-06aa-46c4-b2cf-e9ce3bfaabfb
00000000-0000-0000-0000-000000000000	145	du77qzf3sgii	3d5c03dc-089b-4858-ade6-b2587e8e2325	t	2025-05-19 10:36:04.790447+00	2025-05-19 11:39:33.606892+00	4iqkvkp3r2jr	8d93a12f-4b91-4519-bddd-7e43b5f66c8c
00000000-0000-0000-0000-000000000000	147	efkxp2lgqp2e	3d5c03dc-089b-4858-ade6-b2587e8e2325	f	2025-05-19 11:39:33.610397+00	2025-05-19 11:39:33.610397+00	du77qzf3sgii	8d93a12f-4b91-4519-bddd-7e43b5f66c8c
00000000-0000-0000-0000-000000000000	146	bxcnewuyjulk	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	t	2025-05-19 10:48:00.976683+00	2025-05-19 12:04:33.069236+00	4c3enj3xywoy	05aa8951-06aa-46c4-b2cf-e9ce3bfaabfb
00000000-0000-0000-0000-000000000000	148	7uf2qqlsootd	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-19 12:04:33.073309+00	2025-05-19 12:04:33.073309+00	bxcnewuyjulk	05aa8951-06aa-46c4-b2cf-e9ce3bfaabfb
00000000-0000-0000-0000-000000000000	149	tcs5zdkvuurm	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-26 11:52:58.1509+00	2025-05-26 11:52:58.1509+00	\N	a3f9af2b-5ba7-4e48-97ed-ee0cbc39e7e8
00000000-0000-0000-0000-000000000000	150	aswbabk3pmz2	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	f	2025-05-26 12:00:24.967243+00	2025-05-26 12:00:24.967243+00	\N	0340e1e5-a542-429d-9926-a479683ac7dd
\.


--
-- Data for Name: saml_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_providers (id, sso_provider_id, entity_id, metadata_xml, metadata_url, attribute_mapping, created_at, updated_at, name_id_format) FROM stdin;
\.


--
-- Data for Name: saml_relay_states; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.saml_relay_states (id, sso_provider_id, request_id, for_email, redirect_to, created_at, updated_at, flow_state_id) FROM stdin;
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.schema_migrations (version) FROM stdin;
20171026211738
20171026211808
20171026211834
20180103212743
20180108183307
20180119214651
20180125194653
00
20210710035447
20210722035447
20210730183235
20210909172000
20210927181326
20211122151130
20211124214934
20211202183645
20220114185221
20220114185340
20220224000811
20220323170000
20220429102000
20220531120530
20220614074223
20220811173540
20221003041349
20221003041400
20221011041400
20221020193600
20221021073300
20221021082433
20221027105023
20221114143122
20221114143410
20221125140132
20221208132122
20221215195500
20221215195800
20221215195900
20230116124310
20230116124412
20230131181311
20230322519590
20230402418590
20230411005111
20230508135423
20230523124323
20230818113222
20230914180801
20231027141322
20231114161723
20231117164230
20240115144230
20240214120130
20240306115329
20240314092811
20240427152123
20240612123726
20240729123726
20240802193726
20240806073726
20241009103726
\.


--
-- Data for Name: sessions; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sessions (id, user_id, created_at, updated_at, factor_id, aal, not_after, refreshed_at, user_agent, ip, tag) FROM stdin;
e01ce830-645b-4455-b813-74fb2f48fb7a	817f453e-800d-493b-b6e7-3734dc98b96a	2025-05-01 13:23:16.78455+00	2025-05-01 13:23:16.78455+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	98.97.79.23	\N
e301cb66-3727-41c5-bc69-347b69fea3d2	3d5c03dc-089b-4858-ade6-b2587e8e2325	2025-05-01 13:33:06.845918+00	2025-05-01 13:33:06.845918+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	98.97.79.23	\N
c688c48c-25cf-454d-bf3e-77c85f0065d3	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 15:38:44.128159+00	2025-05-04 16:39:17.815882+00	\N	aal1	\N	2025-05-04 16:39:17.815798	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.134	\N
3d3c97e4-5400-46d4-910f-3d9d3dd557b9	817f453e-800d-493b-b6e7-3734dc98b96a	2025-05-01 14:53:46.093048+00	2025-05-01 14:53:46.093048+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	98.97.79.23	\N
37c966bb-7bf4-4124-982b-dad3f107cda4	3d5c03dc-089b-4858-ade6-b2587e8e2325	2025-05-01 14:54:18.861262+00	2025-05-01 14:54:18.861262+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	98.97.79.23	\N
1a00d080-e110-4f4c-af21-31d4bac2b374	817f453e-800d-493b-b6e7-3734dc98b96a	2025-05-01 14:56:26.72552+00	2025-05-01 14:56:26.72552+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	98.97.79.23	\N
9ebc896e-8378-40d5-935c-c93987e4d217	3d5c03dc-089b-4858-ade6-b2587e8e2325	2025-05-01 15:11:45.78668+00	2025-05-01 15:11:45.78668+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	98.97.79.23	\N
e6f3e64c-5b0b-4de9-845d-6a3cbd9ff01d	817f453e-800d-493b-b6e7-3734dc98b96a	2025-05-01 15:14:11.986073+00	2025-05-01 15:14:11.986073+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	98.97.79.23	\N
31994e8d-59f4-4105-ac43-4ceb31f02ee1	817f453e-800d-493b-b6e7-3734dc98b96a	2025-05-01 15:15:20.154182+00	2025-05-01 15:15:20.154182+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	98.97.79.23	\N
8bd918f7-f597-41c2-bb34-34b8309ed072	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 14:14:33.65549+00	2025-05-04 16:55:40.88736+00	\N	aal1	\N	2025-05-04 16:55:40.887287	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.134	\N
586b6a7f-ede0-4e01-9749-c0e0564b96a3	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-02 19:04:13.345476+00	2025-05-02 19:04:13.345476+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Mobile Safari/537.36	102.90.45.113	\N
ab4bc171-183e-4a52-b7f7-0d99e0ccd4ff	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 13:09:42.447317+00	2025-05-04 13:09:42.447317+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	98.97.79.72	\N
fd7e159d-f24a-456f-8367-d927f291217e	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 13:42:19.612705+00	2025-05-04 13:42:19.612705+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.134	\N
4d4e8294-83d2-41ce-88bd-55863de45344	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 13:43:47.964699+00	2025-05-04 13:43:47.964699+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.134	\N
5e190b64-9261-4dc3-bf9e-a099ad44aeb9	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 13:46:08.354828+00	2025-05-04 13:46:08.354828+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.134	\N
1ac0470b-bddc-450c-b947-7dfd7ad84303	817f453e-800d-493b-b6e7-3734dc98b96a	2025-05-04 13:46:43.247575+00	2025-05-04 13:46:43.247575+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.134	\N
c0067018-73c1-4c52-ab1a-0b2ab643953f	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 14:11:07.756183+00	2025-05-04 14:11:07.756183+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.134	\N
a53be683-fb88-4624-a743-6c9c14917591	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-02 15:29:24.956973+00	2025-05-04 14:22:34.801655+00	\N	aal1	\N	2025-05-04 14:22:34.80158	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.134	\N
f483b31b-b334-4be2-a988-133f68695cec	ff7e4890-af34-4476-8d67-53322ce6b03f	2025-05-04 14:36:30.308861+00	2025-05-04 14:36:30.308861+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	129.222.206.134	\N
e1afd709-3b87-4442-b09e-a8a0c843389e	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 14:50:06.543485+00	2025-05-04 14:50:06.543485+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.134	\N
a045b1b3-097d-4ce9-99b0-3e5ec6bd6438	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 15:08:58.878484+00	2025-05-04 15:08:58.878484+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.134	\N
7c25727e-a125-46a7-bb29-468baffcafbd	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 16:57:42.212659+00	2025-05-06 12:15:19.881264+00	\N	aal1	\N	2025-05-06 12:15:19.881189	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.237	\N
f0941c4d-2a3e-4a64-80f2-5c3ed328c74e	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 17:46:22.612534+00	2025-05-13 06:51:26.919473+00	\N	aal1	\N	2025-05-13 06:51:26.919401	Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Mobile Safari/537.36	102.89.84.178	\N
507c83f8-72cb-4a8f-8d12-b64b9533c1b5	ff7e4890-af34-4476-8d67-53322ce6b03f	2025-05-04 17:13:06.12476+00	2025-05-05 20:47:09.504507+00	\N	aal1	\N	2025-05-05 20:47:09.504417	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	102.89.68.242	\N
ed5778fe-518e-4727-8a7a-2838a66653a4	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 16:39:26.349597+00	2025-05-05 10:12:13.180178+00	\N	aal1	\N	2025-05-05 10:12:13.180105	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.89.84.204	\N
84cd2e2f-b158-4ea2-8b5a-d2301db10d61	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 15:47:33.188535+00	2025-05-13 10:52:02.113624+00	\N	aal1	\N	2025-05-13 10:52:02.113551	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.244	\N
0c2cf76b-2b0e-4940-92cd-b0ce17df27ad	3d5c03dc-089b-4858-ade6-b2587e8e2325	2025-05-06 12:49:09.428645+00	2025-05-06 12:49:09.428645+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.237	\N
8c47954a-1fcf-4b45-92e8-4647f641681a	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-04 17:04:01.785643+00	2025-05-06 11:44:23.499986+00	\N	aal1	\N	2025-05-06 11:44:23.49991	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	98.97.79.27	\N
cd938a29-0694-4b4c-beda-f5aecbc18e31	ab2997bd-6765-493b-9395-83e18867e031	2025-05-06 12:16:44.583969+00	2025-05-06 13:16:36.101078+00	\N	aal1	\N	2025-05-06 13:16:36.100994	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.237	\N
9b7931a3-fc17-4527-af3f-eeaec1c3b921	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-05 10:12:25.681182+00	2025-05-06 13:25:38.63053+00	\N	aal1	\N	2025-05-06 13:25:38.63046	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.237	\N
7b6248bc-7415-42c9-9339-520da65e796d	ab2997bd-6765-493b-9395-83e18867e031	2025-05-06 13:23:01.104384+00	2025-05-06 14:24:15.372098+00	\N	aal1	\N	2025-05-06 14:24:15.372025	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.237	\N
fb94e866-bf6f-42cf-a50a-982536613473	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-12 11:39:58.143816+00	2025-05-12 11:39:58.143816+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	129.222.206.26	\N
85cbda19-fd06-4f86-9657-12d9e08193a0	16761181-49b6-4d34-addc-2369d09bec79	2025-05-06 12:19:50.425788+00	2025-05-13 03:58:12.705617+00	\N	aal1	\N	2025-05-13 03:58:12.704795	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.89.82.124	\N
0d6fdd8a-0894-4ed8-966a-0725c70967d3	3d5c03dc-089b-4858-ade6-b2587e8e2325	2025-05-06 14:07:25.493524+00	2025-05-13 10:50:41.283094+00	\N	aal1	\N	2025-05-13 10:50:41.283024	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.244	\N
8d93a12f-4b91-4519-bddd-7e43b5f66c8c	3d5c03dc-089b-4858-ade6-b2587e8e2325	2025-05-08 11:41:42.31314+00	2025-05-19 11:39:33.615039+00	\N	aal1	\N	2025-05-19 11:39:33.614277	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.35	\N
72b1f6d4-077b-4073-a907-f684a8f32951	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-12 21:13:02.267512+00	2025-05-13 04:57:50.882536+00	\N	aal1	\N	2025-05-13 04:57:50.882462	Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/128.0.0.0 Mobile Safari/537.36	102.89.84.26	\N
594c42b8-56ce-4f67-85fd-790c47e11b43	991287ba-763d-40f5-a26c-620a0c7169c1	2025-05-13 05:17:03.766197+00	2025-05-13 05:17:03.766197+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Mobile Safari/537.36	102.89.85.108	\N
e5d128cc-e7ad-467d-a1a5-4c9a0fda85ca	8c2cb9bd-4de4-43f6-ad3b-90096fc73680	2025-05-13 06:23:09.353587+00	2025-05-13 06:23:09.353587+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Mobile Safari/537.36	102.89.75.222	\N
eb0fc2df-3e0f-4979-9a11-3a2fb8819fb4	9354fd5f-ff68-4e3a-be0a-32fed8127b15	2025-05-13 09:17:53.31443+00	2025-05-13 09:17:53.31443+00	\N	aal1	\N	\N	Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/131.0.0.0 Mobile Safari/537.36	102.89.85.36	\N
7667f85e-0bc9-4d4d-bd18-aa05a662ac0d	3d5c03dc-089b-4858-ade6-b2587e8e2325	2025-05-13 12:07:13.476952+00	2025-05-13 12:07:13.476952+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	135.129.124.158	\N
27992301-33cf-4cb9-8cf5-1e0d6511f7b9	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	2025-05-13 06:04:00.593743+00	2025-05-13 16:57:22.087943+00	\N	aal1	\N	2025-05-13 16:57:22.087849	Mozilla/5.0 (Android 13; Mobile; rv:138.0) Gecko/138.0 Firefox/138.0	41.203.81.130	\N
f23b7f96-429e-49aa-8ba2-b05e698b3ac6	1add9088-4034-4efd-8601-7c80024feb99	2025-05-13 05:54:40.22175+00	2025-05-13 17:23:52.330125+00	\N	aal1	\N	2025-05-13 17:23:52.330049	Mozilla/5.0 (Linux; Android 10; K) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/135.0.0.0 Safari/537.36	197.211.63.14	\N
c62cac79-b671-48c0-ac40-8c9167dff176	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	2025-05-13 17:07:50.85285+00	2025-05-13 21:30:13.489756+00	\N	aal1	\N	2025-05-13 21:30:13.489686	Mozilla/5.0 (X11; Linux x86_64; rv:138.0) Gecko/20100101 Firefox/138.0	102.89.82.133	\N
64914174-c07b-47a8-8f13-55ddef7c6645	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	2025-05-17 09:41:37.363415+00	2025-05-17 18:12:34.116466+00	\N	aal1	\N	2025-05-17 18:12:34.11638	Mozilla/5.0 (X11; Linux x86_64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.89.76.247	\N
05aa8951-06aa-46c4-b2cf-e9ce3bfaabfb	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-08 14:32:52.940758+00	2025-05-19 12:04:33.082556+00	\N	aal1	\N	2025-05-19 12:04:33.082472	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.35	\N
a3f9af2b-5ba7-4e48-97ed-ee0cbc39e7e8	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-26 11:52:58.140402+00	2025-05-26 11:52:58.140402+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.95	\N
0340e1e5-a542-429d-9926-a479683ac7dd	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	2025-05-26 12:00:24.964715+00	2025-05-26 12:00:24.964715+00	\N	aal1	\N	\N	Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/136.0.0.0 Safari/537.36	102.215.57.95	\N
\.


--
-- Data for Name: sso_domains; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_domains (id, sso_provider_id, domain, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: sso_providers; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.sso_providers (id, resource_id, created_at, updated_at) FROM stdin;
\.


--
-- Data for Name: users; Type: TABLE DATA; Schema: auth; Owner: supabase_auth_admin
--

COPY auth.users (instance_id, id, aud, role, email, encrypted_password, email_confirmed_at, invited_at, confirmation_token, confirmation_sent_at, recovery_token, recovery_sent_at, email_change_token_new, email_change, email_change_sent_at, last_sign_in_at, raw_app_meta_data, raw_user_meta_data, is_super_admin, created_at, updated_at, phone, phone_confirmed_at, phone_change, phone_change_token, phone_change_sent_at, email_change_token_current, email_change_confirm_status, banned_until, reauthentication_token, reauthentication_sent_at, is_sso_user, deleted_at, is_anonymous) FROM stdin;
00000000-0000-0000-0000-000000000000	991287ba-763d-40f5-a26c-620a0c7169c1	authenticated	authenticated	heritageprecious91@gmail.com	$2a$10$Fa8WjPGRvptasMNVPr1LGelFaMJ6.Fgqr4JY8MVisGHsldm8rKg3y	2025-05-13 05:16:00.159331+00	\N		2025-05-13 05:10:57.524455+00		\N			\N	2025-05-13 05:17:03.766128+00	{"provider": "email", "providers": ["email"]}	{"sub": "991287ba-763d-40f5-a26c-620a0c7169c1", "email": "heritageprecious91@gmail.com", "phone": "+2349063070708", "address": "Ekiti State University Ado Ekiti ", "full_name": "Olowookere Heritage Precious ", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false}	\N	2025-05-13 05:10:57.471541+00	2025-05-13 05:17:03.776701+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	817f453e-800d-493b-b6e7-3734dc98b96a	authenticated	authenticated	igbalayeolajide@gmail.com	$2a$10$KHxsZ9yWnQYLhWJEqbicVuOFDu4fvvxRCZkDa8N0.jLQx2iltDtzW	2025-05-01 13:09:26.940635+00	\N		2025-05-01 13:08:47.101553+00		\N			\N	2025-05-04 13:46:43.247489+00	{"provider": "email", "providers": ["email"]}	{"sub": "817f453e-800d-493b-b6e7-3734dc98b96a", "email": "igbalayeolajide@gmail.com", "full_name": "Igbalaye Olajide Temitope", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false}	\N	2025-05-01 13:08:47.045657+00	2025-05-04 13:46:43.25003+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	16761181-49b6-4d34-addc-2369d09bec79	authenticated	authenticated	popsabey1@gmail.com	$2a$10$z5wjxkPvmkFf9bOVMkSNYe7jKn/YUx2odmMZKGH47Bc7HZuLLjhSe	2025-05-06 12:19:48.694608+00	\N		2025-05-06 12:19:21.625296+00		\N			\N	2025-05-06 12:19:50.425713+00	{"provider": "email", "providers": ["email"]}	{"sub": "16761181-49b6-4d34-addc-2369d09bec79", "email": "popsabey1@gmail.com", "full_name": "Abiodun Popoola", "church_unit": "3hmedia", "email_verified": true, "phone_verified": false}	\N	2025-05-06 12:19:21.597189+00	2025-05-13 03:58:12.702019+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	1add9088-4034-4efd-8601-7c80024feb99	authenticated	authenticated	taiwobashir111@gmail.com	$2a$10$egrEhO3PyYBnYeSQa1iqQeoAjXm4m3rtVf7mDSC35kRYIojJya3Sm	2025-05-13 05:54:37.175377+00	\N		2025-05-13 05:53:35.622916+00		\N			\N	2025-05-13 05:54:40.221679+00	{"provider": "email", "providers": ["email"]}	{"sub": "1add9088-4034-4efd-8601-7c80024feb99", "email": "taiwobashir111@gmail.com", "phone": "07046789327", "address": "Adebayo", "full_name": "Taiwo Bashir ", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false}	\N	2025-05-13 05:53:35.608509+00	2025-05-13 17:23:52.328131+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	ff7e4890-af34-4476-8d67-53322ce6b03f	authenticated	authenticated	adeyemis958@gmail.com	$2a$10$tNlkGrgARnWI1K2EcWZ2Q.PzLIim5CKWKDXjt4N0skbmE35/4myIm	2025-05-04 14:36:17.647512+00	\N		2025-05-04 14:35:49.076656+00		\N			\N	2025-05-04 17:13:06.124683+00	{"provider": "email", "providers": ["email"]}	{"sub": "ff7e4890-af34-4476-8d67-53322ce6b03f", "email": "adeyemis958@gmail.com", "full_name": "Samuel Adeyemi", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false}	\N	2025-05-04 14:35:49.041746+00	2025-05-05 20:47:09.501001+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	ab2997bd-6765-493b-9395-83e18867e031	authenticated	authenticated	007postit@gmail.com	$2a$10$fF9D0ANuT5viOhNco6/J2ONCEW2X7QpgywzhhEe7E/pjLPMjv1CI2	2025-05-06 12:15:17.963152+00	\N		2025-05-06 12:15:10.477103+00		\N			\N	2025-05-06 13:23:01.104297+00	{"provider": "email", "providers": ["email"]}	{"sub": "ab2997bd-6765-493b-9395-83e18867e031", "email": "007postit@gmail.com", "phone": "07031098097", "address": "Adebayo Layout", "full_name": "Post Its", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false}	\N	2025-05-06 12:15:10.450042+00	2025-05-06 14:24:15.370227+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	8c2cb9bd-4de4-43f6-ad3b-90096fc73680	authenticated	authenticated	gidadobamidele@gmail.com	$2a$10$cSn8vJNcO.VGsCfYBcwD8etduZ/t.JDDyHwc0MiqDMYwkEOw1EBoS	2025-05-13 06:23:04.671229+00	\N		2025-05-13 06:19:04.694648+00		\N			\N	2025-05-13 06:23:09.353503+00	{"provider": "email", "providers": ["email"]}	{"sub": "8c2cb9bd-4de4-43f6-ad3b-90096fc73680", "email": "gidadobamidele@gmail.com", "phone": "08144985540", "full_name": "Gidado bamidele ", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false}	\N	2025-05-13 06:19:04.678599+00	2025-05-13 06:23:09.361592+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	3d5c03dc-089b-4858-ade6-b2587e8e2325	authenticated	authenticated	gigsdev007@gmail.com	$2a$10$fzDf8bnUzzXYmt6z3vlwd.mxejGjoilZ57u2pJEnosr.ugP7OcUVe	2025-05-01 13:30:21.563248+00	\N		2025-05-01 13:30:02.357695+00		\N			\N	2025-05-13 12:07:13.476864+00	{"provider": "email", "providers": ["email"]}	{"sub": "3d5c03dc-089b-4858-ade6-b2587e8e2325", "email": "gigsdev007@gmail.com", "full_name": "Gigs Dev", "email_verified": true, "phone_verified": false}	\N	2025-05-01 13:30:02.34378+00	2025-05-19 11:39:33.611464+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	authenticated	authenticated	paulakinade013@gmail.com	$2a$10$/CEBGS.AK3i3v3QyJU.7ruXM3WvjjOWwIdaBiOVVL9sbCh0FCHaea	2025-05-13 06:03:58.223979+00	\N		2025-05-13 06:03:16.900377+00		\N			\N	2025-05-17 09:41:37.363341+00	{"provider": "email", "providers": ["email"]}	{"sub": "df22a4cd-0fa0-42dd-a31f-5bc7c7487e94", "email": "paulakinade013@gmail.com", "phone": "09165351339", "address": "Ekiti State University,London Hostel around satellite gate ", "full_name": "Akinade Paul Omowonuola ", "church_unit": "3hsecurity", "email_verified": true, "phone_verified": false}	\N	2025-05-13 06:02:01.350212+00	2025-05-17 18:12:34.111635+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	9354fd5f-ff68-4e3a-be0a-32fed8127b15	authenticated	authenticated	adeolaotimileyin@gmail.com	$2a$10$pzbgHGsA9M.l0KSgAgu3A.uiTuBULIVqDLaLOap/a1FI9U1ByeNiW	2025-05-13 09:17:29.192588+00	\N		2025-05-13 09:14:25.797931+00		\N			\N	2025-05-13 09:17:53.313602+00	{"provider": "email", "providers": ["email"]}	{"sub": "9354fd5f-ff68-4e3a-be0a-32fed8127b15", "email": "adeolaotimileyin@gmail.com", "phone": "7032511051", "address": "Akinola Ola Street, olora layout, Adebayo", "full_name": "Timileyin Adeola", "church_unit": "3hmedia", "email_verified": true, "phone_verified": false}	\N	2025-05-13 09:14:25.735404+00	2025-05-13 09:17:53.326729+00	\N	\N			\N		0	\N		\N	f	\N	f
00000000-0000-0000-0000-000000000000	8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	authenticated	authenticated	ojidelawrence@gmail.com	$2a$10$tb0LG6qVC77V1WxacIZXneCb3tlGyonZ8vt7UAhUiRDKjmwVADBOq	2025-05-01 09:59:08.946951+00	\N		2025-05-01 09:58:57.976052+00		\N			\N	2025-05-26 12:00:24.964605+00	{"provider": "email", "providers": ["email"]}	{"sub": "8cf68351-99d4-4c01-ae5f-ba8321e6aeb2", "email": "ojidelawrence@gmail.com", "full_name": "Olajide Igbalaye", "email_verified": true, "phone_verified": false}	\N	2025-05-01 09:58:57.950713+00	2025-05-26 12:00:24.982113+00	\N	\N			\N		0	\N		\N	f	\N	f
\.


--
-- Data for Name: members; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.members (id, fullname, email, phone, address, category, assignedto, churchunit, auxanogroup, joindate, notes, isactive, created_at, updated_at, churchunits, title, userid) FROM stdin;
ed2e1b01-5d6c-4d3b-8a67-3b59405f18e0	Gigs Dev	gigsdev007@gmail.com	\N	\N	Pastors	\N	3hsecurity	\N	2025-05-06	\N	t	2025-05-06 14:08:09.34851+00	2025-05-06 14:08:09.34851+00	\N	\N	3d5c03dc-089b-4858-ade6-b2587e8e2325
8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	Olajide Igbalaye	ojidelawrence@gmail.com	\N	\N	Members	\N	\N	\N	2025-05-01	\N	t	2025-05-01 13:46:46.003577+00	2025-05-01 13:46:46.003577+00	\N	\N	\N
3d5c03dc-089b-4858-ade6-b2587e8e2325	Gigs Dev	gigsdev007@gmail.com	\N	\N	Members	\N	\N	\N	2025-05-01	\N	t	2025-05-01 13:46:46.003577+00	2025-05-01 13:46:46.003577+00	\N	\N	\N
817f453e-800d-493b-b6e7-3734dc98b96a	Igbalaye Olajide Temitope	igbalayeolajide@gmail.com	\N	\N	Members	\N	3hsecurity	\N	2025-05-01	\N	t	2025-05-01 13:46:46.003577+00	2025-05-01 13:46:46.003577+00	{3hsecurity}	\N	\N
32c69904-897e-493b-9126-b652e5d0877f	Samuel Adeyemi	adeyemi958@gmail.com	\N	\N	Visitors	\N	\N	\N	2025-05-06	\N	t	2025-05-06 11:42:29.972191+00	2025-05-06 11:42:29.972191+00	\N	\N	\N
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.migrations (id, name, applied_at, description) FROM stdin;
1	standardize_roles_001	2025-05-06 15:44:44.861479+00	Standardize role management between profiles.role and user_roles
3	add_constraints_001	2025-05-06 15:54:56.922257+00	Add constraints to ensure data integrity
\.


--
-- Data for Name: profiles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.profiles (id, email, full_name, updated_at, church_unit, assigned_pastor, phone, genotype, address, role, date_of_birth) FROM stdin;
817f453e-800d-493b-b6e7-3734dc98b96a	igbalayeolajide@gmail.com	Igbalaye Olajide Temitope	2025-05-01 15:14:31.235+00	3hsecurity	\N	07031098097	AA	L1 TEMIDIRE STREET OFF HOUSING ROAD	\N	\N
ff7e4890-af34-4476-8d67-53322ce6b03f	adeyemis958@gmail.com	Samuel Adeyemi	2025-05-04 14:35:49.041394+00	3hsecurity	\N	\N	\N	\N	\N	\N
ab2997bd-6765-493b-9395-83e18867e031	007postit@gmail.com	Post Its	2025-05-06 12:15:10.449724+00	3hsecurity	\N	07031098097	\N	Adebayo Layout	\N	\N
16761181-49b6-4d34-addc-2369d09bec79	popsabey1@gmail.com	Abiodun Popoola	2025-05-06 12:23:35.844+00	3hmedia	\N	07032488573	\N	Olart Hotel Str. Adebayo Ado-Ekiti	\N	\N
8cf68351-99d4-4c01-ae5f-ba8321e6aeb2	ojidelawrence@gmail.com	Olajide Igbalaye	2025-05-01 09:58:57.95036+00	\N	\N	\N	\N	\N	\N	\N
991287ba-763d-40f5-a26c-620a0c7169c1	heritageprecious91@gmail.com	Olowookere Heritage Precious 	2025-05-13 05:10:57.471173+00	3hsecurity	\N	+2349063070708	\N	Ekiti State University Ado Ekiti 	\N	\N
1add9088-4034-4efd-8601-7c80024feb99	taiwobashir111@gmail.com	Taiwo Bashir 	2025-05-13 05:53:35.608159+00	3hsecurity	\N	07046789327	\N	Adebayo	\N	\N
df22a4cd-0fa0-42dd-a31f-5bc7c7487e94	paulakinade013@gmail.com	Akinade Paul Omowonuola 	2025-05-13 06:02:01.34988+00	3hsecurity	\N	09165351339	\N	Ekiti State University,London Hostel around satellite gate 	\N	\N
8c2cb9bd-4de4-43f6-ad3b-90096fc73680	gidadobamidele@gmail.com	Gidado bamidele 	2025-05-13 06:19:04.678227+00	3hsecurity	\N	08144985540	\N	\N	\N	\N
9354fd5f-ff68-4e3a-be0a-32fed8127b15	adeolaotimileyin@gmail.com	Timileyin Adeola	2025-05-13 09:14:25.734354+00	3hmedia	\N	7032511051	\N	Akinola Ola Street, olora layout, Adebayo	\N	\N
3d5c03dc-089b-4858-ade6-b2587e8e2325	gigsdev007@gmail.com	Gigs Dev	2025-05-13 12:08:45.99+00	3hmedia	\N	07031098097	AA	Olora layout, off Housing Road	\N	2025-04-30
\.


--
-- Data for Name: user_roles; Type: TABLE DATA; Schema: public; Owner: postgres
--

COPY public.user_roles (id, user_id, role, created_at) FROM stdin;
95188740-127a-426e-be80-2394ec97fb86	817f453e-800d-493b-b6e7-3734dc98b96a	superuser	2025-05-06 12:41:11.047921+00
408c86a8-f599-4eb5-a773-39b134c5e744	3d5c03dc-089b-4858-ade6-b2587e8e2325	superuser	2025-05-06 12:48:09.804603+00
00ef33f7-68f7-4a9b-8f6a-86afdba6b3ed	16761181-49b6-4d34-addc-2369d09bec79	superuser	2025-05-06 13:48:59.866766+00
\.


--
-- Data for Name: schema_migrations; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.schema_migrations (version, inserted_at) FROM stdin;
20211116024918	2025-04-22 13:15:26
20211116045059	2025-04-22 13:15:28
20211116050929	2025-04-22 13:15:30
20211116051442	2025-04-22 13:15:31
20211116212300	2025-04-22 13:15:33
20211116213355	2025-04-22 13:15:35
20211116213934	2025-04-22 13:15:36
20211116214523	2025-04-22 13:15:37
20211122062447	2025-04-22 13:15:37
20211124070109	2025-04-22 13:15:37
20211202204204	2025-04-22 13:15:38
20211202204605	2025-04-22 13:15:38
20211210212804	2025-04-22 13:15:38
20211228014915	2025-04-22 13:15:39
20220107221237	2025-04-22 13:15:39
20220228202821	2025-04-22 13:15:39
20220312004840	2025-04-22 13:15:39
20220603231003	2025-04-22 13:15:40
20220603232444	2025-04-22 13:15:40
20220615214548	2025-04-22 13:15:40
20220712093339	2025-04-22 13:15:40
20220908172859	2025-04-22 13:15:40
20220916233421	2025-04-22 13:15:41
20230119133233	2025-04-22 13:15:41
20230128025114	2025-04-22 13:15:41
20230128025212	2025-04-22 13:15:41
20230227211149	2025-04-22 13:15:41
20230228184745	2025-04-22 13:15:42
20230308225145	2025-04-22 13:15:42
20230328144023	2025-04-22 13:15:42
20231018144023	2025-04-22 13:15:42
20231204144023	2025-04-22 13:15:43
20231204144024	2025-04-22 13:15:43
20231204144025	2025-04-22 13:15:43
20240108234812	2025-04-22 13:15:44
20240109165339	2025-04-22 13:15:44
20240227174441	2025-04-22 13:15:44
20240311171622	2025-04-22 13:15:44
20240321100241	2025-04-22 13:15:45
20240401105812	2025-04-22 13:15:45
20240418121054	2025-04-22 13:15:46
20240523004032	2025-04-22 13:15:46
20240618124746	2025-04-22 13:15:47
20240801235015	2025-04-22 13:15:47
20240805133720	2025-04-22 13:15:47
20240827160934	2025-04-22 13:15:47
20240919163303	2025-04-22 13:15:48
20240919163305	2025-04-22 13:15:48
20241019105805	2025-04-22 13:15:48
20241030150047	2025-04-22 13:15:49
20241108114728	2025-04-22 13:15:49
20241121104152	2025-04-22 13:15:50
20241130184212	2025-04-22 13:15:50
20241220035512	2025-04-22 13:15:50
20241220123912	2025-04-22 13:15:50
20241224161212	2025-04-22 13:15:51
20250107150512	2025-04-22 13:15:51
20250110162412	2025-04-22 13:15:51
20250123174212	2025-04-22 13:15:51
20250128220012	2025-04-22 13:15:51
20250506224012	2025-05-26 11:52:48
20250523164012	2025-05-30 11:02:36
\.


--
-- Data for Name: subscription; Type: TABLE DATA; Schema: realtime; Owner: supabase_admin
--

COPY realtime.subscription (id, subscription_id, entity, filters, claims, created_at) FROM stdin;
\.


--
-- Data for Name: buckets; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.buckets (id, name, owner, created_at, updated_at, public, avif_autodetection, file_size_limit, allowed_mime_types, owner_id) FROM stdin;
\.


--
-- Data for Name: migrations; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.migrations (id, name, hash, executed_at) FROM stdin;
0	create-migrations-table	e18db593bcde2aca2a408c4d1100f6abba2195df	2025-04-22 14:03:11.803768
1	initialmigration	6ab16121fbaa08bbd11b712d05f358f9b555d777	2025-04-22 14:03:11.810448
2	storage-schema	5c7968fd083fcea04050c1b7f6253c9771b99011	2025-04-22 14:03:11.816031
3	pathtoken-column	2cb1b0004b817b29d5b0a971af16bafeede4b70d	2025-04-22 14:03:11.835351
4	add-migrations-rls	427c5b63fe1c5937495d9c635c263ee7a5905058	2025-04-22 14:03:11.867982
5	add-size-functions	79e081a1455b63666c1294a440f8ad4b1e6a7f84	2025-04-22 14:03:11.872084
6	change-column-name-in-get-size	f93f62afdf6613ee5e7e815b30d02dc990201044	2025-04-22 14:03:11.877168
7	add-rls-to-buckets	e7e7f86adbc51049f341dfe8d30256c1abca17aa	2025-04-22 14:03:11.882063
8	add-public-to-buckets	fd670db39ed65f9d08b01db09d6202503ca2bab3	2025-04-22 14:03:11.886347
9	fix-search-function	3a0af29f42e35a4d101c259ed955b67e1bee6825	2025-04-22 14:03:11.890602
10	search-files-search-function	68dc14822daad0ffac3746a502234f486182ef6e	2025-04-22 14:03:11.896792
11	add-trigger-to-auto-update-updated_at-column	7425bdb14366d1739fa8a18c83100636d74dcaa2	2025-04-22 14:03:11.90203
12	add-automatic-avif-detection-flag	8e92e1266eb29518b6a4c5313ab8f29dd0d08df9	2025-04-22 14:03:11.908976
13	add-bucket-custom-limits	cce962054138135cd9a8c4bcd531598684b25e7d	2025-04-22 14:03:11.919842
14	use-bytes-for-max-size	941c41b346f9802b411f06f30e972ad4744dad27	2025-04-22 14:03:11.925306
15	add-can-insert-object-function	934146bc38ead475f4ef4b555c524ee5d66799e5	2025-04-22 14:03:11.977333
16	add-version	76debf38d3fd07dcfc747ca49096457d95b1221b	2025-04-22 14:03:11.989861
17	drop-owner-foreign-key	f1cbb288f1b7a4c1eb8c38504b80ae2a0153d101	2025-04-22 14:03:11.997183
18	add_owner_id_column_deprecate_owner	e7a511b379110b08e2f214be852c35414749fe66	2025-04-22 14:03:12.007789
19	alter-default-value-objects-id	02e5e22a78626187e00d173dc45f58fa66a4f043	2025-04-22 14:03:12.017376
20	list-objects-with-delimiter	cd694ae708e51ba82bf012bba00caf4f3b6393b7	2025-04-22 14:03:12.030076
21	s3-multipart-uploads	8c804d4a566c40cd1e4cc5b3725a664a9303657f	2025-04-22 14:03:12.043057
22	s3-multipart-uploads-big-ints	9737dc258d2397953c9953d9b86920b8be0cdb73	2025-04-22 14:03:12.080986
23	optimize-search-function	9d7e604cddc4b56a5422dc68c9313f4a1b6f132c	2025-04-22 14:03:12.117915
24	operation-function	8312e37c2bf9e76bbe841aa5fda889206d2bf8aa	2025-04-22 14:03:12.13514
25	custom-metadata	d974c6057c3db1c1f847afa0e291e6165693b990	2025-04-22 14:03:12.147836
\.


--
-- Data for Name: objects; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.objects (id, bucket_id, name, owner, created_at, updated_at, last_accessed_at, metadata, version, owner_id, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads (id, in_progress_size, upload_signature, bucket_id, key, version, owner_id, created_at, user_metadata) FROM stdin;
\.


--
-- Data for Name: s3_multipart_uploads_parts; Type: TABLE DATA; Schema: storage; Owner: supabase_storage_admin
--

COPY storage.s3_multipart_uploads_parts (id, upload_id, size, part_number, bucket_id, key, etag, owner_id, version, created_at) FROM stdin;
\.


--
-- Data for Name: secrets; Type: TABLE DATA; Schema: vault; Owner: supabase_admin
--

COPY vault.secrets (id, name, description, secret, key_id, nonce, created_at, updated_at) FROM stdin;
\.


--
-- Name: refresh_tokens_id_seq; Type: SEQUENCE SET; Schema: auth; Owner: supabase_auth_admin
--

SELECT pg_catalog.setval('auth.refresh_tokens_id_seq', 150, true);


--
-- Name: migrations_id_seq; Type: SEQUENCE SET; Schema: public; Owner: postgres
--

SELECT pg_catalog.setval('public.migrations_id_seq', 3, true);


--
-- Name: subscription_id_seq; Type: SEQUENCE SET; Schema: realtime; Owner: supabase_admin
--

SELECT pg_catalog.setval('realtime.subscription_id_seq', 1, false);


--
-- Name: mfa_amr_claims amr_id_pk; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT amr_id_pk PRIMARY KEY (id);


--
-- Name: audit_log_entries audit_log_entries_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.audit_log_entries
    ADD CONSTRAINT audit_log_entries_pkey PRIMARY KEY (id);


--
-- Name: flow_state flow_state_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.flow_state
    ADD CONSTRAINT flow_state_pkey PRIMARY KEY (id);


--
-- Name: identities identities_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_pkey PRIMARY KEY (id);


--
-- Name: identities identities_provider_id_provider_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_provider_id_provider_unique UNIQUE (provider_id, provider);


--
-- Name: instances instances_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.instances
    ADD CONSTRAINT instances_pkey PRIMARY KEY (id);


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_authentication_method_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_authentication_method_pkey UNIQUE (session_id, authentication_method);


--
-- Name: mfa_challenges mfa_challenges_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_pkey PRIMARY KEY (id);


--
-- Name: mfa_factors mfa_factors_last_challenged_at_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_last_challenged_at_key UNIQUE (last_challenged_at);


--
-- Name: mfa_factors mfa_factors_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_pkey PRIMARY KEY (id);


--
-- Name: one_time_tokens one_time_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_pkey PRIMARY KEY (id);


--
-- Name: refresh_tokens refresh_tokens_token_unique; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_token_unique UNIQUE (token);


--
-- Name: saml_providers saml_providers_entity_id_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_entity_id_key UNIQUE (entity_id);


--
-- Name: saml_providers saml_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_pkey PRIMARY KEY (id);


--
-- Name: saml_relay_states saml_relay_states_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_pkey PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: sessions sessions_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_pkey PRIMARY KEY (id);


--
-- Name: sso_domains sso_domains_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_pkey PRIMARY KEY (id);


--
-- Name: sso_providers sso_providers_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_providers
    ADD CONSTRAINT sso_providers_pkey PRIMARY KEY (id);


--
-- Name: users users_phone_key; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_phone_key UNIQUE (phone);


--
-- Name: users users_pkey; Type: CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.users
    ADD CONSTRAINT users_pkey PRIMARY KEY (id);


--
-- Name: members members_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.members
    ADD CONSTRAINT members_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: profiles profiles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_pkey PRIMARY KEY (id);


--
-- Name: user_roles user_roles_pkey; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_pkey PRIMARY KEY (id);


--
-- Name: user_roles user_roles_user_id_key; Type: CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_user_id_key UNIQUE (user_id);


--
-- Name: messages messages_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE ONLY realtime.messages
    ADD CONSTRAINT messages_pkey PRIMARY KEY (id, inserted_at);


--
-- Name: subscription pk_subscription; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.subscription
    ADD CONSTRAINT pk_subscription PRIMARY KEY (id);


--
-- Name: schema_migrations schema_migrations_pkey; Type: CONSTRAINT; Schema: realtime; Owner: supabase_admin
--

ALTER TABLE ONLY realtime.schema_migrations
    ADD CONSTRAINT schema_migrations_pkey PRIMARY KEY (version);


--
-- Name: buckets buckets_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.buckets
    ADD CONSTRAINT buckets_pkey PRIMARY KEY (id);


--
-- Name: migrations migrations_name_key; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_name_key UNIQUE (name);


--
-- Name: migrations migrations_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.migrations
    ADD CONSTRAINT migrations_pkey PRIMARY KEY (id);


--
-- Name: objects objects_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT objects_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_pkey PRIMARY KEY (id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_pkey; Type: CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_pkey PRIMARY KEY (id);


--
-- Name: audit_logs_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX audit_logs_instance_id_idx ON auth.audit_log_entries USING btree (instance_id);


--
-- Name: confirmation_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX confirmation_token_idx ON auth.users USING btree (confirmation_token) WHERE ((confirmation_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_current_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_current_idx ON auth.users USING btree (email_change_token_current) WHERE ((email_change_token_current)::text !~ '^[0-9 ]*$'::text);


--
-- Name: email_change_token_new_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX email_change_token_new_idx ON auth.users USING btree (email_change_token_new) WHERE ((email_change_token_new)::text !~ '^[0-9 ]*$'::text);


--
-- Name: factor_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX factor_id_created_at_idx ON auth.mfa_factors USING btree (user_id, created_at);


--
-- Name: flow_state_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX flow_state_created_at_idx ON auth.flow_state USING btree (created_at DESC);


--
-- Name: identities_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_email_idx ON auth.identities USING btree (email text_pattern_ops);


--
-- Name: INDEX identities_email_idx; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.identities_email_idx IS 'Auth: Ensures indexed queries on the email column';


--
-- Name: identities_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX identities_user_id_idx ON auth.identities USING btree (user_id);


--
-- Name: idx_auth_code; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_auth_code ON auth.flow_state USING btree (auth_code);


--
-- Name: idx_user_id_auth_method; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX idx_user_id_auth_method ON auth.flow_state USING btree (user_id, authentication_method);


--
-- Name: mfa_challenge_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_challenge_created_at_idx ON auth.mfa_challenges USING btree (created_at DESC);


--
-- Name: mfa_factors_user_friendly_name_unique; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX mfa_factors_user_friendly_name_unique ON auth.mfa_factors USING btree (friendly_name, user_id) WHERE (TRIM(BOTH FROM friendly_name) <> ''::text);


--
-- Name: mfa_factors_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX mfa_factors_user_id_idx ON auth.mfa_factors USING btree (user_id);


--
-- Name: one_time_tokens_relates_to_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_relates_to_hash_idx ON auth.one_time_tokens USING hash (relates_to);


--
-- Name: one_time_tokens_token_hash_hash_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX one_time_tokens_token_hash_hash_idx ON auth.one_time_tokens USING hash (token_hash);


--
-- Name: one_time_tokens_user_id_token_type_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX one_time_tokens_user_id_token_type_key ON auth.one_time_tokens USING btree (user_id, token_type);


--
-- Name: reauthentication_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX reauthentication_token_idx ON auth.users USING btree (reauthentication_token) WHERE ((reauthentication_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: recovery_token_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX recovery_token_idx ON auth.users USING btree (recovery_token) WHERE ((recovery_token)::text !~ '^[0-9 ]*$'::text);


--
-- Name: refresh_tokens_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_idx ON auth.refresh_tokens USING btree (instance_id);


--
-- Name: refresh_tokens_instance_id_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_instance_id_user_id_idx ON auth.refresh_tokens USING btree (instance_id, user_id);


--
-- Name: refresh_tokens_parent_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_parent_idx ON auth.refresh_tokens USING btree (parent);


--
-- Name: refresh_tokens_session_id_revoked_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_session_id_revoked_idx ON auth.refresh_tokens USING btree (session_id, revoked);


--
-- Name: refresh_tokens_updated_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX refresh_tokens_updated_at_idx ON auth.refresh_tokens USING btree (updated_at DESC);


--
-- Name: saml_providers_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_providers_sso_provider_id_idx ON auth.saml_providers USING btree (sso_provider_id);


--
-- Name: saml_relay_states_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_created_at_idx ON auth.saml_relay_states USING btree (created_at DESC);


--
-- Name: saml_relay_states_for_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_for_email_idx ON auth.saml_relay_states USING btree (for_email);


--
-- Name: saml_relay_states_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX saml_relay_states_sso_provider_id_idx ON auth.saml_relay_states USING btree (sso_provider_id);


--
-- Name: sessions_not_after_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_not_after_idx ON auth.sessions USING btree (not_after DESC);


--
-- Name: sessions_user_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sessions_user_id_idx ON auth.sessions USING btree (user_id);


--
-- Name: sso_domains_domain_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_domains_domain_idx ON auth.sso_domains USING btree (lower(domain));


--
-- Name: sso_domains_sso_provider_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX sso_domains_sso_provider_id_idx ON auth.sso_domains USING btree (sso_provider_id);


--
-- Name: sso_providers_resource_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX sso_providers_resource_id_idx ON auth.sso_providers USING btree (lower(resource_id));


--
-- Name: unique_phone_factor_per_user; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX unique_phone_factor_per_user ON auth.mfa_factors USING btree (user_id, phone);


--
-- Name: user_id_created_at_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX user_id_created_at_idx ON auth.sessions USING btree (user_id, created_at);


--
-- Name: users_email_partial_key; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE UNIQUE INDEX users_email_partial_key ON auth.users USING btree (email) WHERE (is_sso_user = false);


--
-- Name: INDEX users_email_partial_key; Type: COMMENT; Schema: auth; Owner: supabase_auth_admin
--

COMMENT ON INDEX auth.users_email_partial_key IS 'Auth: A partial unique index that applies only when is_sso_user is false';


--
-- Name: users_instance_id_email_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_email_idx ON auth.users USING btree (instance_id, lower((email)::text));


--
-- Name: users_instance_id_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_instance_id_idx ON auth.users USING btree (instance_id);


--
-- Name: users_is_anonymous_idx; Type: INDEX; Schema: auth; Owner: supabase_auth_admin
--

CREATE INDEX users_is_anonymous_idx ON auth.users USING btree (is_anonymous);


--
-- Name: idx_members_assigned_to; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_assigned_to ON public.members USING btree (assignedto);


--
-- Name: idx_members_assignedto; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_assignedto ON public.members USING btree (assignedto);


--
-- Name: INDEX idx_members_assignedto; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_members_assignedto IS 'Improves performance when querying members assigned to a specific pastor';


--
-- Name: idx_members_category; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_category ON public.members USING btree (category);


--
-- Name: INDEX idx_members_category; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_members_category IS 'Improves performance when filtering members by category';


--
-- Name: idx_members_church_unit; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_church_unit ON public.members USING btree (churchunit);


--
-- Name: idx_members_churchunit; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_churchunit ON public.members USING btree (churchunit);


--
-- Name: INDEX idx_members_churchunit; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_members_churchunit IS 'Improves performance when filtering members by church unit';


--
-- Name: idx_members_churchunits; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_churchunits ON public.members USING gin (churchunits);


--
-- Name: INDEX idx_members_churchunits; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_members_churchunits IS 'Enables efficient searching within the churchunits array';


--
-- Name: idx_members_email; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_email ON public.members USING btree (email);


--
-- Name: INDEX idx_members_email; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_members_email IS 'Improves performance of searches and filters by email';


--
-- Name: idx_members_full_name; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_full_name ON public.members USING btree (fullname);


--
-- Name: idx_members_fullname; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_fullname ON public.members USING btree (fullname);


--
-- Name: INDEX idx_members_fullname; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_members_fullname IS 'Improves performance of searches and filters by member name';


--
-- Name: idx_members_is_active; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_is_active ON public.members USING btree (isactive);


--
-- Name: idx_members_isactive; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_isactive ON public.members USING btree (isactive);


--
-- Name: INDEX idx_members_isactive; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_members_isactive IS 'Improves performance when filtering active/inactive members';


--
-- Name: idx_members_userid; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_members_userid ON public.members USING btree (userid);


--
-- Name: idx_profiles_assigned_pastor; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_profiles_assigned_pastor ON public.profiles USING btree (assigned_pastor);


--
-- Name: idx_profiles_church_unit; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_profiles_church_unit ON public.profiles USING btree (church_unit);


--
-- Name: INDEX idx_profiles_church_unit; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_profiles_church_unit IS 'Improves performance when filtering profiles by church unit';


--
-- Name: idx_profiles_email; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_profiles_email ON public.profiles USING btree (email);


--
-- Name: INDEX idx_profiles_email; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_profiles_email IS 'Improves performance of searches and filters by email in profiles';


--
-- Name: idx_profiles_full_name; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_profiles_full_name ON public.profiles USING btree (full_name);


--
-- Name: INDEX idx_profiles_full_name; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_profiles_full_name IS 'Improves performance of searches and filters by name in profiles';


--
-- Name: idx_profiles_role; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_profiles_role ON public.profiles USING btree (role);


--
-- Name: INDEX idx_profiles_role; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_profiles_role IS 'Improves performance when filtering profiles by role';


--
-- Name: idx_user_roles_role; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_roles_role ON public.user_roles USING btree (role);


--
-- Name: INDEX idx_user_roles_role; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_user_roles_role IS 'Improves performance when filtering users by role';


--
-- Name: idx_user_roles_user_id; Type: INDEX; Schema: public; Owner: postgres
--

CREATE INDEX idx_user_roles_user_id ON public.user_roles USING btree (user_id);


--
-- Name: INDEX idx_user_roles_user_id; Type: COMMENT; Schema: public; Owner: postgres
--

COMMENT ON INDEX public.idx_user_roles_user_id IS 'Improves performance when querying roles for a specific user';


--
-- Name: ix_realtime_subscription_entity; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE INDEX ix_realtime_subscription_entity ON realtime.subscription USING btree (entity);


--
-- Name: subscription_subscription_id_entity_filters_key; Type: INDEX; Schema: realtime; Owner: supabase_admin
--

CREATE UNIQUE INDEX subscription_subscription_id_entity_filters_key ON realtime.subscription USING btree (subscription_id, entity, filters);


--
-- Name: bname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bname ON storage.buckets USING btree (name);


--
-- Name: bucketid_objname; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE UNIQUE INDEX bucketid_objname ON storage.objects USING btree (bucket_id, name);


--
-- Name: idx_multipart_uploads_list; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_multipart_uploads_list ON storage.s3_multipart_uploads USING btree (bucket_id, key, created_at);


--
-- Name: idx_objects_bucket_id_name; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX idx_objects_bucket_id_name ON storage.objects USING btree (bucket_id, name COLLATE "C");


--
-- Name: name_prefix_search; Type: INDEX; Schema: storage; Owner: supabase_storage_admin
--

CREATE INDEX name_prefix_search ON storage.objects USING btree (name text_pattern_ops);


--
-- Name: users on_auth_user_created; Type: TRIGGER; Schema: auth; Owner: supabase_auth_admin
--

CREATE TRIGGER on_auth_user_created AFTER INSERT ON auth.users FOR EACH ROW EXECUTE FUNCTION public.handle_new_user();


--
-- Name: profiles on_profile_created; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER on_profile_created AFTER INSERT ON public.profiles FOR EACH ROW EXECUTE FUNCTION public.sync_profile_to_members();


--
-- Name: profiles on_profile_updated; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER on_profile_updated AFTER UPDATE ON public.profiles FOR EACH ROW WHEN (((old.email IS DISTINCT FROM new.email) OR (old.full_name IS DISTINCT FROM new.full_name) OR (old.phone IS DISTINCT FROM new.phone) OR (old.address IS DISTINCT FROM new.address) OR (old.date_of_birth IS DISTINCT FROM new.date_of_birth))) EXECUTE FUNCTION public.sync_profile_to_members();


--
-- Name: user_roles trigger_handle_role_deletion; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_handle_role_deletion AFTER DELETE ON public.user_roles FOR EACH ROW EXECUTE FUNCTION public.handle_user_role_deletion();


--
-- Name: profiles trigger_sync_profile_role; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_sync_profile_role AFTER INSERT OR UPDATE OF role ON public.profiles FOR EACH ROW EXECUTE FUNCTION public.sync_profile_role_to_user_roles();


--
-- Name: user_roles trigger_sync_user_roles; Type: TRIGGER; Schema: public; Owner: postgres
--

CREATE TRIGGER trigger_sync_user_roles AFTER INSERT OR UPDATE OF role ON public.user_roles FOR EACH ROW EXECUTE FUNCTION public.sync_user_roles_to_profile();


--
-- Name: subscription tr_check_filters; Type: TRIGGER; Schema: realtime; Owner: supabase_admin
--

CREATE TRIGGER tr_check_filters BEFORE INSERT OR UPDATE ON realtime.subscription FOR EACH ROW EXECUTE FUNCTION realtime.subscription_check_filters();


--
-- Name: objects update_objects_updated_at; Type: TRIGGER; Schema: storage; Owner: supabase_storage_admin
--

CREATE TRIGGER update_objects_updated_at BEFORE UPDATE ON storage.objects FOR EACH ROW EXECUTE FUNCTION storage.update_updated_at_column();


--
-- Name: identities identities_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.identities
    ADD CONSTRAINT identities_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: mfa_amr_claims mfa_amr_claims_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_amr_claims
    ADD CONSTRAINT mfa_amr_claims_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: mfa_challenges mfa_challenges_auth_factor_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_challenges
    ADD CONSTRAINT mfa_challenges_auth_factor_id_fkey FOREIGN KEY (factor_id) REFERENCES auth.mfa_factors(id) ON DELETE CASCADE;


--
-- Name: mfa_factors mfa_factors_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.mfa_factors
    ADD CONSTRAINT mfa_factors_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: one_time_tokens one_time_tokens_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.one_time_tokens
    ADD CONSTRAINT one_time_tokens_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: refresh_tokens refresh_tokens_session_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.refresh_tokens
    ADD CONSTRAINT refresh_tokens_session_id_fkey FOREIGN KEY (session_id) REFERENCES auth.sessions(id) ON DELETE CASCADE;


--
-- Name: saml_providers saml_providers_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_providers
    ADD CONSTRAINT saml_providers_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_flow_state_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_flow_state_id_fkey FOREIGN KEY (flow_state_id) REFERENCES auth.flow_state(id) ON DELETE CASCADE;


--
-- Name: saml_relay_states saml_relay_states_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.saml_relay_states
    ADD CONSTRAINT saml_relay_states_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: sessions sessions_user_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sessions
    ADD CONSTRAINT sessions_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: sso_domains sso_domains_sso_provider_id_fkey; Type: FK CONSTRAINT; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE ONLY auth.sso_domains
    ADD CONSTRAINT sso_domains_sso_provider_id_fkey FOREIGN KEY (sso_provider_id) REFERENCES auth.sso_providers(id) ON DELETE CASCADE;


--
-- Name: members fk_members_assignedto; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.members
    ADD CONSTRAINT fk_members_assignedto FOREIGN KEY (assignedto) REFERENCES public.members(id) ON DELETE SET NULL;


--
-- Name: members members_assignedto_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.members
    ADD CONSTRAINT members_assignedto_fkey FOREIGN KEY (assignedto) REFERENCES public.profiles(id);


--
-- Name: members members_userid_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.members
    ADD CONSTRAINT members_userid_fkey FOREIGN KEY (userid) REFERENCES auth.users(id);


--
-- Name: profiles profiles_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.profiles
    ADD CONSTRAINT profiles_id_fkey FOREIGN KEY (id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: user_roles user_roles_user_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: postgres
--

ALTER TABLE ONLY public.user_roles
    ADD CONSTRAINT user_roles_user_id_fkey FOREIGN KEY (user_id) REFERENCES auth.users(id) ON DELETE CASCADE;


--
-- Name: objects objects_bucketId_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.objects
    ADD CONSTRAINT "objects_bucketId_fkey" FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads s3_multipart_uploads_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads
    ADD CONSTRAINT s3_multipart_uploads_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_bucket_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_bucket_id_fkey FOREIGN KEY (bucket_id) REFERENCES storage.buckets(id);


--
-- Name: s3_multipart_uploads_parts s3_multipart_uploads_parts_upload_id_fkey; Type: FK CONSTRAINT; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE ONLY storage.s3_multipart_uploads_parts
    ADD CONSTRAINT s3_multipart_uploads_parts_upload_id_fkey FOREIGN KEY (upload_id) REFERENCES storage.s3_multipart_uploads(id) ON DELETE CASCADE;


--
-- Name: audit_log_entries; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.audit_log_entries ENABLE ROW LEVEL SECURITY;

--
-- Name: flow_state; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.flow_state ENABLE ROW LEVEL SECURITY;

--
-- Name: identities; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.identities ENABLE ROW LEVEL SECURITY;

--
-- Name: instances; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.instances ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_amr_claims; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_amr_claims ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_challenges; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_challenges ENABLE ROW LEVEL SECURITY;

--
-- Name: mfa_factors; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.mfa_factors ENABLE ROW LEVEL SECURITY;

--
-- Name: one_time_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.one_time_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: refresh_tokens; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.refresh_tokens ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: saml_relay_states; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.saml_relay_states ENABLE ROW LEVEL SECURITY;

--
-- Name: schema_migrations; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.schema_migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: sessions; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sessions ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_domains; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_domains ENABLE ROW LEVEL SECURITY;

--
-- Name: sso_providers; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.sso_providers ENABLE ROW LEVEL SECURITY;

--
-- Name: users; Type: ROW SECURITY; Schema: auth; Owner: supabase_auth_admin
--

ALTER TABLE auth.users ENABLE ROW LEVEL SECURITY;

--
-- Name: members Allow authenticated users to insert members; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to insert members" ON public.members FOR INSERT TO authenticated WITH CHECK (true);


--
-- Name: members Allow authenticated users to read all members; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to read all members" ON public.members FOR SELECT TO authenticated USING (true);


--
-- Name: members Allow authenticated users to update members; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Allow authenticated users to update members" ON public.members FOR UPDATE TO authenticated USING (true);


--
-- Name: user_roles Enable delete for users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable delete for users" ON public.user_roles FOR DELETE TO authenticated USING ((auth.uid() IN ( SELECT ur.user_id
   FROM public.user_roles ur
  WHERE (ur.role = 'admin'::public.app_role))));


--
-- Name: user_roles Enable insert for users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable insert for users" ON public.user_roles FOR INSERT TO authenticated WITH CHECK ((auth.uid() IN ( SELECT ur.user_id
   FROM public.user_roles ur
  WHERE (ur.role = 'admin'::public.app_role))));


--
-- Name: user_roles Enable read access for users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable read access for users" ON public.user_roles FOR SELECT TO authenticated USING (true);


--
-- Name: user_roles Enable update for users; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Enable update for users" ON public.user_roles FOR UPDATE TO authenticated USING ((auth.uid() IN ( SELECT ur.user_id
   FROM public.user_roles ur
  WHERE (ur.role = 'admin'::public.app_role))));


--
-- Name: profiles Users can update own profile; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can update own profile" ON public.profiles FOR UPDATE USING ((auth.uid() = id));


--
-- Name: profiles Users can view own profile; Type: POLICY; Schema: public; Owner: postgres
--

CREATE POLICY "Users can view own profile" ON public.profiles FOR SELECT USING ((auth.uid() = id));


--
-- Name: members; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.members ENABLE ROW LEVEL SECURITY;

--
-- Name: profiles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.profiles ENABLE ROW LEVEL SECURITY;

--
-- Name: user_roles; Type: ROW SECURITY; Schema: public; Owner: postgres
--

ALTER TABLE public.user_roles ENABLE ROW LEVEL SECURITY;

--
-- Name: messages; Type: ROW SECURITY; Schema: realtime; Owner: supabase_realtime_admin
--

ALTER TABLE realtime.messages ENABLE ROW LEVEL SECURITY;

--
-- Name: buckets; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.buckets ENABLE ROW LEVEL SECURITY;

--
-- Name: migrations; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.migrations ENABLE ROW LEVEL SECURITY;

--
-- Name: objects; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.objects ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads ENABLE ROW LEVEL SECURITY;

--
-- Name: s3_multipart_uploads_parts; Type: ROW SECURITY; Schema: storage; Owner: supabase_storage_admin
--

ALTER TABLE storage.s3_multipart_uploads_parts ENABLE ROW LEVEL SECURITY;

--
-- Name: supabase_realtime; Type: PUBLICATION; Schema: -; Owner: postgres
--

CREATE PUBLICATION supabase_realtime WITH (publish = 'insert, update, delete, truncate');


ALTER PUBLICATION supabase_realtime OWNER TO postgres;

--
-- Name: SCHEMA auth; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA auth TO anon;
GRANT USAGE ON SCHEMA auth TO authenticated;
GRANT USAGE ON SCHEMA auth TO service_role;
GRANT ALL ON SCHEMA auth TO supabase_auth_admin;
GRANT ALL ON SCHEMA auth TO dashboard_user;
GRANT USAGE ON SCHEMA auth TO postgres;


--
-- Name: SCHEMA extensions; Type: ACL; Schema: -; Owner: postgres
--

GRANT USAGE ON SCHEMA extensions TO anon;
GRANT USAGE ON SCHEMA extensions TO authenticated;
GRANT USAGE ON SCHEMA extensions TO service_role;
GRANT ALL ON SCHEMA extensions TO dashboard_user;


--
-- Name: SCHEMA public; Type: ACL; Schema: -; Owner: pg_database_owner
--

GRANT USAGE ON SCHEMA public TO postgres;
GRANT USAGE ON SCHEMA public TO anon;
GRANT USAGE ON SCHEMA public TO authenticated;
GRANT USAGE ON SCHEMA public TO service_role;


--
-- Name: SCHEMA realtime; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA realtime TO postgres;
GRANT USAGE ON SCHEMA realtime TO anon;
GRANT USAGE ON SCHEMA realtime TO authenticated;
GRANT USAGE ON SCHEMA realtime TO service_role;
GRANT ALL ON SCHEMA realtime TO supabase_realtime_admin;


--
-- Name: SCHEMA storage; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA storage TO postgres;
GRANT USAGE ON SCHEMA storage TO anon;
GRANT USAGE ON SCHEMA storage TO authenticated;
GRANT USAGE ON SCHEMA storage TO service_role;
GRANT ALL ON SCHEMA storage TO supabase_storage_admin;
GRANT ALL ON SCHEMA storage TO dashboard_user;


--
-- Name: SCHEMA vault; Type: ACL; Schema: -; Owner: supabase_admin
--

GRANT USAGE ON SCHEMA vault TO postgres WITH GRANT OPTION;
GRANT USAGE ON SCHEMA vault TO service_role;


--
-- Name: FUNCTION email(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.email() TO dashboard_user;
GRANT ALL ON FUNCTION auth.email() TO postgres;


--
-- Name: FUNCTION jwt(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.jwt() TO postgres;
GRANT ALL ON FUNCTION auth.jwt() TO dashboard_user;


--
-- Name: FUNCTION role(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.role() TO dashboard_user;
GRANT ALL ON FUNCTION auth.role() TO postgres;


--
-- Name: FUNCTION uid(); Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON FUNCTION auth.uid() TO dashboard_user;
GRANT ALL ON FUNCTION auth.uid() TO postgres;


--
-- Name: FUNCTION algorithm_sign(signables text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.algorithm_sign(signables text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea) TO dashboard_user;


--
-- Name: FUNCTION armor(bytea, text[], text[]); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.armor(bytea, text[], text[]) TO dashboard_user;


--
-- Name: FUNCTION crypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.crypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.crypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION dearmor(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.dearmor(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.dearmor(text) TO dashboard_user;


--
-- Name: FUNCTION decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION decrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.decrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION digest(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.digest(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.digest(text, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION encrypt_iv(bytea, bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.encrypt_iv(bytea, bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION gen_random_bytes(integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_bytes(integer) TO dashboard_user;


--
-- Name: FUNCTION gen_random_uuid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_random_uuid() TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text) TO dashboard_user;


--
-- Name: FUNCTION gen_salt(text, integer); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.gen_salt(text, integer) TO dashboard_user;


--
-- Name: FUNCTION grant_pg_cron_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION extensions.grant_pg_cron_access() FROM supabase_admin;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO supabase_admin WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_cron_access() TO dashboard_user;


--
-- Name: FUNCTION grant_pg_graphql_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.grant_pg_graphql_access() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION grant_pg_net_access(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION extensions.grant_pg_net_access() FROM supabase_admin;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO supabase_admin WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.grant_pg_net_access() TO dashboard_user;


--
-- Name: FUNCTION hmac(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION hmac(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.hmac(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements(showtext boolean, OUT userid oid, OUT dbid oid, OUT toplevel boolean, OUT queryid bigint, OUT query text, OUT plans bigint, OUT total_plan_time double precision, OUT min_plan_time double precision, OUT max_plan_time double precision, OUT mean_plan_time double precision, OUT stddev_plan_time double precision, OUT calls bigint, OUT total_exec_time double precision, OUT min_exec_time double precision, OUT max_exec_time double precision, OUT mean_exec_time double precision, OUT stddev_exec_time double precision, OUT rows bigint, OUT shared_blks_hit bigint, OUT shared_blks_read bigint, OUT shared_blks_dirtied bigint, OUT shared_blks_written bigint, OUT local_blks_hit bigint, OUT local_blks_read bigint, OUT local_blks_dirtied bigint, OUT local_blks_written bigint, OUT temp_blks_read bigint, OUT temp_blks_written bigint, OUT blk_read_time double precision, OUT blk_write_time double precision, OUT temp_blk_read_time double precision, OUT temp_blk_write_time double precision, OUT wal_records bigint, OUT wal_fpi bigint, OUT wal_bytes numeric, OUT jit_functions bigint, OUT jit_generation_time double precision, OUT jit_inlining_count bigint, OUT jit_inlining_time double precision, OUT jit_optimization_count bigint, OUT jit_optimization_time double precision, OUT jit_emission_count bigint, OUT jit_emission_time double precision) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_info(OUT dealloc bigint, OUT stats_reset timestamp with time zone) TO dashboard_user;


--
-- Name: FUNCTION pg_stat_statements_reset(userid oid, dbid oid, queryid bigint); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pg_stat_statements_reset(userid oid, dbid oid, queryid bigint) TO dashboard_user;


--
-- Name: FUNCTION pgp_armor_headers(text, OUT key text, OUT value text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_armor_headers(text, OUT key text, OUT value text) TO dashboard_user;


--
-- Name: FUNCTION pgp_key_id(bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_key_id(bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_decrypt_bytea(bytea, bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_decrypt_bytea(bytea, bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt(text, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt(text, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea) TO dashboard_user;


--
-- Name: FUNCTION pgp_pub_encrypt_bytea(bytea, bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_pub_encrypt_bytea(bytea, bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_decrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_decrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt(text, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt(text, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text) TO dashboard_user;


--
-- Name: FUNCTION pgp_sym_encrypt_bytea(bytea, text, text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.pgp_sym_encrypt_bytea(bytea, text, text) TO dashboard_user;


--
-- Name: FUNCTION pgrst_ddl_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_ddl_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION pgrst_drop_watch(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.pgrst_drop_watch() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION set_graphql_placeholder(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.set_graphql_placeholder() TO postgres WITH GRANT OPTION;


--
-- Name: FUNCTION sign(payload json, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.sign(payload json, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION try_cast_double(inp text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.try_cast_double(inp text) TO dashboard_user;


--
-- Name: FUNCTION url_decode(data text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_decode(data text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_decode(data text) TO dashboard_user;


--
-- Name: FUNCTION url_encode(data bytea); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.url_encode(data bytea) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v1mc(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v1mc() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v3(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v3(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v4(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v4() TO dashboard_user;


--
-- Name: FUNCTION uuid_generate_v5(namespace uuid, name text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_generate_v5(namespace uuid, name text) TO dashboard_user;


--
-- Name: FUNCTION uuid_nil(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_nil() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_nil() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_dns(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_dns() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_oid(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_oid() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_url(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_url() TO dashboard_user;


--
-- Name: FUNCTION uuid_ns_x500(); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.uuid_ns_x500() TO dashboard_user;


--
-- Name: FUNCTION verify(token text, secret text, algorithm text); Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION extensions.verify(token text, secret text, algorithm text) TO dashboard_user;


--
-- Name: FUNCTION graphql("operationName" text, query text, variables jsonb, extensions jsonb); Type: ACL; Schema: graphql_public; Owner: supabase_admin
--

GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO postgres;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO anon;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO authenticated;
GRANT ALL ON FUNCTION graphql_public.graphql("operationName" text, query text, variables jsonb, extensions jsonb) TO service_role;


--
-- Name: FUNCTION get_auth(p_usename text); Type: ACL; Schema: pgbouncer; Owner: supabase_admin
--

REVOKE ALL ON FUNCTION pgbouncer.get_auth(p_usename text) FROM PUBLIC;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO pgbouncer;
GRANT ALL ON FUNCTION pgbouncer.get_auth(p_usename text) TO postgres;


--
-- Name: FUNCTION add_super_admin_by_email(admin_email text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.add_super_admin_by_email(admin_email text) TO anon;
GRANT ALL ON FUNCTION public.add_super_admin_by_email(admin_email text) TO authenticated;
GRANT ALL ON FUNCTION public.add_super_admin_by_email(admin_email text) TO service_role;


--
-- Name: FUNCTION check_superuser_role(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.check_superuser_role() TO anon;
GRANT ALL ON FUNCTION public.check_superuser_role() TO authenticated;
GRANT ALL ON FUNCTION public.check_superuser_role() TO service_role;


--
-- Name: FUNCTION check_trigger_exists(trigger_name text, table_name text, schema_name text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.check_trigger_exists(trigger_name text, table_name text, schema_name text) TO anon;
GRANT ALL ON FUNCTION public.check_trigger_exists(trigger_name text, table_name text, schema_name text) TO authenticated;
GRANT ALL ON FUNCTION public.check_trigger_exists(trigger_name text, table_name text, schema_name text) TO service_role;


--
-- Name: FUNCTION create_trigger_check_function(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.create_trigger_check_function() TO anon;
GRANT ALL ON FUNCTION public.create_trigger_check_function() TO authenticated;
GRANT ALL ON FUNCTION public.create_trigger_check_function() TO service_role;


--
-- Name: FUNCTION ensure_superuser_role(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.ensure_superuser_role() TO anon;
GRANT ALL ON FUNCTION public.ensure_superuser_role() TO authenticated;
GRANT ALL ON FUNCTION public.ensure_superuser_role() TO service_role;


--
-- Name: FUNCTION get_hardcoded_super_admin_emails(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_hardcoded_super_admin_emails() TO anon;
GRANT ALL ON FUNCTION public.get_hardcoded_super_admin_emails() TO authenticated;
GRANT ALL ON FUNCTION public.get_hardcoded_super_admin_emails() TO service_role;


--
-- Name: FUNCTION get_user_highest_role(user_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.get_user_highest_role(user_id uuid) TO anon;
GRANT ALL ON FUNCTION public.get_user_highest_role(user_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.get_user_highest_role(user_id uuid) TO service_role;


--
-- Name: FUNCTION handle_new_user(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.handle_new_user() TO anon;
GRANT ALL ON FUNCTION public.handle_new_user() TO authenticated;
GRANT ALL ON FUNCTION public.handle_new_user() TO service_role;


--
-- Name: FUNCTION handle_user_role_deletion(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.handle_user_role_deletion() TO anon;
GRANT ALL ON FUNCTION public.handle_user_role_deletion() TO authenticated;
GRANT ALL ON FUNCTION public.handle_user_role_deletion() TO service_role;


--
-- Name: FUNCTION has_role(requested_role public.app_role); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.has_role(requested_role public.app_role) TO anon;
GRANT ALL ON FUNCTION public.has_role(requested_role public.app_role) TO authenticated;
GRANT ALL ON FUNCTION public.has_role(requested_role public.app_role) TO service_role;


--
-- Name: FUNCTION is_migration_applied(migration_name character varying); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.is_migration_applied(migration_name character varying) TO anon;
GRANT ALL ON FUNCTION public.is_migration_applied(migration_name character varying) TO authenticated;
GRANT ALL ON FUNCTION public.is_migration_applied(migration_name character varying) TO service_role;


--
-- Name: FUNCTION list_app_roles(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.list_app_roles() TO anon;
GRANT ALL ON FUNCTION public.list_app_roles() TO authenticated;
GRANT ALL ON FUNCTION public.list_app_roles() TO service_role;


--
-- Name: FUNCTION list_super_admins(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.list_super_admins() TO anon;
GRANT ALL ON FUNCTION public.list_super_admins() TO authenticated;
GRANT ALL ON FUNCTION public.list_super_admins() TO service_role;


--
-- Name: FUNCTION record_migration(migration_name character varying, migration_description text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.record_migration(migration_name character varying, migration_description text) TO anon;
GRANT ALL ON FUNCTION public.record_migration(migration_name character varying, migration_description text) TO authenticated;
GRANT ALL ON FUNCTION public.record_migration(migration_name character varying, migration_description text) TO service_role;


--
-- Name: FUNCTION remove_super_admin(admin_id uuid); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.remove_super_admin(admin_id uuid) TO anon;
GRANT ALL ON FUNCTION public.remove_super_admin(admin_id uuid) TO authenticated;
GRANT ALL ON FUNCTION public.remove_super_admin(admin_id uuid) TO service_role;


--
-- Name: FUNCTION sync_all_profiles_to_members(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.sync_all_profiles_to_members() TO anon;
GRANT ALL ON FUNCTION public.sync_all_profiles_to_members() TO authenticated;
GRANT ALL ON FUNCTION public.sync_all_profiles_to_members() TO service_role;


--
-- Name: FUNCTION sync_profile_role_to_user_roles(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.sync_profile_role_to_user_roles() TO anon;
GRANT ALL ON FUNCTION public.sync_profile_role_to_user_roles() TO authenticated;
GRANT ALL ON FUNCTION public.sync_profile_role_to_user_roles() TO service_role;


--
-- Name: FUNCTION sync_profile_to_members(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.sync_profile_to_members() TO anon;
GRANT ALL ON FUNCTION public.sync_profile_to_members() TO authenticated;
GRANT ALL ON FUNCTION public.sync_profile_to_members() TO service_role;


--
-- Name: FUNCTION sync_user_roles_to_profile(); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.sync_user_roles_to_profile() TO anon;
GRANT ALL ON FUNCTION public.sync_user_roles_to_profile() TO authenticated;
GRANT ALL ON FUNCTION public.sync_user_roles_to_profile() TO service_role;


--
-- Name: FUNCTION user_has_role(user_id uuid, role_to_check text); Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON FUNCTION public.user_has_role(user_id uuid, role_to_check text) TO anon;
GRANT ALL ON FUNCTION public.user_has_role(user_id uuid, role_to_check text) TO authenticated;
GRANT ALL ON FUNCTION public.user_has_role(user_id uuid, role_to_check text) TO service_role;


--
-- Name: FUNCTION apply_rls(wal jsonb, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.apply_rls(wal jsonb, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO postgres;
GRANT ALL ON FUNCTION realtime.broadcast_changes(topic_name text, event_name text, operation text, table_name text, table_schema text, new record, old record, level text) TO dashboard_user;


--
-- Name: FUNCTION build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO postgres;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO anon;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO service_role;
GRANT ALL ON FUNCTION realtime.build_prepared_statement_sql(prepared_statement_name text, entity regclass, columns realtime.wal_column[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION "cast"(val text, type_ regtype); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO postgres;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO dashboard_user;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO anon;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO authenticated;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO service_role;
GRANT ALL ON FUNCTION realtime."cast"(val text, type_ regtype) TO supabase_realtime_admin;


--
-- Name: FUNCTION check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO postgres;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO anon;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO authenticated;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO service_role;
GRANT ALL ON FUNCTION realtime.check_equality_op(op realtime.equality_op, type_ regtype, val_1 text, val_2 text) TO supabase_realtime_admin;


--
-- Name: FUNCTION is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO postgres;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO anon;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO authenticated;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO service_role;
GRANT ALL ON FUNCTION realtime.is_visible_through_filters(columns realtime.wal_column[], filters realtime.user_defined_filter[]) TO supabase_realtime_admin;


--
-- Name: FUNCTION list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO postgres;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO anon;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO authenticated;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO service_role;
GRANT ALL ON FUNCTION realtime.list_changes(publication name, slot_name name, max_changes integer, max_record_bytes integer) TO supabase_realtime_admin;


--
-- Name: FUNCTION quote_wal2json(entity regclass); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO postgres;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO anon;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO authenticated;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO service_role;
GRANT ALL ON FUNCTION realtime.quote_wal2json(entity regclass) TO supabase_realtime_admin;


--
-- Name: FUNCTION send(payload jsonb, event text, topic text, private boolean); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO postgres;
GRANT ALL ON FUNCTION realtime.send(payload jsonb, event text, topic text, private boolean) TO dashboard_user;


--
-- Name: FUNCTION subscription_check_filters(); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO postgres;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO dashboard_user;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO anon;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO authenticated;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO service_role;
GRANT ALL ON FUNCTION realtime.subscription_check_filters() TO supabase_realtime_admin;


--
-- Name: FUNCTION to_regrole(role_name text); Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO postgres;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO dashboard_user;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO anon;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO authenticated;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO service_role;
GRANT ALL ON FUNCTION realtime.to_regrole(role_name text) TO supabase_realtime_admin;


--
-- Name: FUNCTION topic(); Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON FUNCTION realtime.topic() TO postgres;
GRANT ALL ON FUNCTION realtime.topic() TO dashboard_user;


--
-- Name: FUNCTION can_insert_object(bucketid text, name text, owner uuid, metadata jsonb); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.can_insert_object(bucketid text, name text, owner uuid, metadata jsonb) TO postgres;


--
-- Name: FUNCTION extension(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.extension(name text) TO postgres;


--
-- Name: FUNCTION filename(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.filename(name text) TO postgres;


--
-- Name: FUNCTION foldername(name text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.foldername(name text) TO postgres;


--
-- Name: FUNCTION get_size_by_bucket(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.get_size_by_bucket() TO postgres;


--
-- Name: FUNCTION list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.list_multipart_uploads_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, next_key_token text, next_upload_token text) TO postgres;


--
-- Name: FUNCTION list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.list_objects_with_delimiter(bucket_id text, prefix_param text, delimiter_param text, max_keys integer, start_after text, next_token text) TO postgres;


--
-- Name: FUNCTION operation(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.operation() TO postgres;


--
-- Name: FUNCTION search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.search(prefix text, bucketname text, limits integer, levels integer, offsets integer, search text, sortcolumn text, sortorder text) TO postgres;


--
-- Name: FUNCTION update_updated_at_column(); Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON FUNCTION storage.update_updated_at_column() TO postgres;


--
-- Name: FUNCTION _crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault._crypto_aead_det_decrypt(message bytea, additional bytea, key_id bigint, context bytea, nonce bytea) TO service_role;


--
-- Name: FUNCTION create_secret(new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault.create_secret(new_secret text, new_name text, new_description text, new_key_id uuid) TO service_role;


--
-- Name: FUNCTION update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid); Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO postgres WITH GRANT OPTION;
GRANT ALL ON FUNCTION vault.update_secret(secret_id uuid, new_secret text, new_name text, new_description text, new_key_id uuid) TO service_role;


--
-- Name: TABLE audit_log_entries; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.audit_log_entries TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.audit_log_entries TO postgres;
GRANT SELECT ON TABLE auth.audit_log_entries TO postgres WITH GRANT OPTION;


--
-- Name: TABLE flow_state; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.flow_state TO postgres;
GRANT SELECT ON TABLE auth.flow_state TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.flow_state TO dashboard_user;


--
-- Name: TABLE identities; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.identities TO postgres;
GRANT SELECT ON TABLE auth.identities TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.identities TO dashboard_user;


--
-- Name: TABLE instances; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.instances TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.instances TO postgres;
GRANT SELECT ON TABLE auth.instances TO postgres WITH GRANT OPTION;


--
-- Name: TABLE mfa_amr_claims; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_amr_claims TO postgres;
GRANT SELECT ON TABLE auth.mfa_amr_claims TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_amr_claims TO dashboard_user;


--
-- Name: TABLE mfa_challenges; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_challenges TO postgres;
GRANT SELECT ON TABLE auth.mfa_challenges TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_challenges TO dashboard_user;


--
-- Name: TABLE mfa_factors; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.mfa_factors TO postgres;
GRANT SELECT ON TABLE auth.mfa_factors TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.mfa_factors TO dashboard_user;


--
-- Name: TABLE one_time_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.one_time_tokens TO postgres;
GRANT SELECT ON TABLE auth.one_time_tokens TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.one_time_tokens TO dashboard_user;


--
-- Name: TABLE refresh_tokens; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.refresh_tokens TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.refresh_tokens TO postgres;
GRANT SELECT ON TABLE auth.refresh_tokens TO postgres WITH GRANT OPTION;


--
-- Name: SEQUENCE refresh_tokens_id_seq; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO dashboard_user;
GRANT ALL ON SEQUENCE auth.refresh_tokens_id_seq TO postgres;


--
-- Name: TABLE saml_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_providers TO postgres;
GRANT SELECT ON TABLE auth.saml_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_providers TO dashboard_user;


--
-- Name: TABLE saml_relay_states; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.saml_relay_states TO postgres;
GRANT SELECT ON TABLE auth.saml_relay_states TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.saml_relay_states TO dashboard_user;


--
-- Name: TABLE sessions; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sessions TO postgres;
GRANT SELECT ON TABLE auth.sessions TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sessions TO dashboard_user;


--
-- Name: TABLE sso_domains; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_domains TO postgres;
GRANT SELECT ON TABLE auth.sso_domains TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_domains TO dashboard_user;


--
-- Name: TABLE sso_providers; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.sso_providers TO postgres;
GRANT SELECT ON TABLE auth.sso_providers TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE auth.sso_providers TO dashboard_user;


--
-- Name: TABLE users; Type: ACL; Schema: auth; Owner: supabase_auth_admin
--

GRANT ALL ON TABLE auth.users TO dashboard_user;
GRANT INSERT,REFERENCES,DELETE,TRIGGER,TRUNCATE,UPDATE ON TABLE auth.users TO postgres;
GRANT SELECT ON TABLE auth.users TO postgres WITH GRANT OPTION;


--
-- Name: TABLE pg_stat_statements; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements TO dashboard_user;


--
-- Name: TABLE pg_stat_statements_info; Type: ACL; Schema: extensions; Owner: supabase_admin
--

GRANT ALL ON TABLE extensions.pg_stat_statements_info TO postgres WITH GRANT OPTION;
GRANT ALL ON TABLE extensions.pg_stat_statements_info TO dashboard_user;


--
-- Name: TABLE members; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.members TO anon;
GRANT ALL ON TABLE public.members TO authenticated;
GRANT ALL ON TABLE public.members TO service_role;


--
-- Name: TABLE migrations; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.migrations TO anon;
GRANT ALL ON TABLE public.migrations TO authenticated;
GRANT ALL ON TABLE public.migrations TO service_role;


--
-- Name: SEQUENCE migrations_id_seq; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON SEQUENCE public.migrations_id_seq TO anon;
GRANT ALL ON SEQUENCE public.migrations_id_seq TO authenticated;
GRANT ALL ON SEQUENCE public.migrations_id_seq TO service_role;


--
-- Name: TABLE profiles; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.profiles TO anon;
GRANT ALL ON TABLE public.profiles TO authenticated;
GRANT ALL ON TABLE public.profiles TO service_role;


--
-- Name: TABLE user_roles; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_roles TO anon;
GRANT ALL ON TABLE public.user_roles TO authenticated;
GRANT ALL ON TABLE public.user_roles TO service_role;


--
-- Name: TABLE user_roles_view; Type: ACL; Schema: public; Owner: postgres
--

GRANT ALL ON TABLE public.user_roles_view TO anon;
GRANT ALL ON TABLE public.user_roles_view TO authenticated;
GRANT ALL ON TABLE public.user_roles_view TO service_role;


--
-- Name: TABLE messages; Type: ACL; Schema: realtime; Owner: supabase_realtime_admin
--

GRANT ALL ON TABLE realtime.messages TO postgres;
GRANT ALL ON TABLE realtime.messages TO dashboard_user;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO anon;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO authenticated;
GRANT SELECT,INSERT,UPDATE ON TABLE realtime.messages TO service_role;


--
-- Name: TABLE schema_migrations; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.schema_migrations TO postgres;
GRANT ALL ON TABLE realtime.schema_migrations TO dashboard_user;
GRANT SELECT ON TABLE realtime.schema_migrations TO anon;
GRANT SELECT ON TABLE realtime.schema_migrations TO authenticated;
GRANT SELECT ON TABLE realtime.schema_migrations TO service_role;
GRANT ALL ON TABLE realtime.schema_migrations TO supabase_realtime_admin;


--
-- Name: TABLE subscription; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON TABLE realtime.subscription TO postgres;
GRANT ALL ON TABLE realtime.subscription TO dashboard_user;
GRANT SELECT ON TABLE realtime.subscription TO anon;
GRANT SELECT ON TABLE realtime.subscription TO authenticated;
GRANT SELECT ON TABLE realtime.subscription TO service_role;
GRANT ALL ON TABLE realtime.subscription TO supabase_realtime_admin;


--
-- Name: SEQUENCE subscription_id_seq; Type: ACL; Schema: realtime; Owner: supabase_admin
--

GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO postgres;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO dashboard_user;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO anon;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO authenticated;
GRANT USAGE ON SEQUENCE realtime.subscription_id_seq TO service_role;
GRANT ALL ON SEQUENCE realtime.subscription_id_seq TO supabase_realtime_admin;


--
-- Name: TABLE buckets; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.buckets TO anon;
GRANT ALL ON TABLE storage.buckets TO authenticated;
GRANT ALL ON TABLE storage.buckets TO service_role;
GRANT ALL ON TABLE storage.buckets TO postgres;


--
-- Name: TABLE objects; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.objects TO anon;
GRANT ALL ON TABLE storage.objects TO authenticated;
GRANT ALL ON TABLE storage.objects TO service_role;
GRANT ALL ON TABLE storage.objects TO postgres;


--
-- Name: TABLE s3_multipart_uploads; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads TO anon;
GRANT ALL ON TABLE storage.s3_multipart_uploads TO postgres;


--
-- Name: TABLE s3_multipart_uploads_parts; Type: ACL; Schema: storage; Owner: supabase_storage_admin
--

GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO service_role;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO authenticated;
GRANT SELECT ON TABLE storage.s3_multipart_uploads_parts TO anon;
GRANT ALL ON TABLE storage.s3_multipart_uploads_parts TO postgres;


--
-- Name: TABLE secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,REFERENCES,DELETE,TRUNCATE ON TABLE vault.secrets TO postgres WITH GRANT OPTION;
GRANT SELECT,DELETE ON TABLE vault.secrets TO service_role;


--
-- Name: TABLE decrypted_secrets; Type: ACL; Schema: vault; Owner: supabase_admin
--

GRANT SELECT,REFERENCES,DELETE,TRUNCATE ON TABLE vault.decrypted_secrets TO postgres WITH GRANT OPTION;
GRANT SELECT,DELETE ON TABLE vault.decrypted_secrets TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: auth; Owner: supabase_auth_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_auth_admin IN SCHEMA auth GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON SEQUENCES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON FUNCTIONS  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: extensions; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA extensions GRANT ALL ON TABLES  TO postgres WITH GRANT OPTION;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: graphql_public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA graphql_public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: public; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA public GRANT ALL ON TABLES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON SEQUENCES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON FUNCTIONS  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: realtime; Owner: supabase_admin
--

ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE supabase_admin IN SCHEMA realtime GRANT ALL ON TABLES  TO dashboard_user;


--
-- Name: DEFAULT PRIVILEGES FOR SEQUENCES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON SEQUENCES  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR FUNCTIONS; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON FUNCTIONS  TO service_role;


--
-- Name: DEFAULT PRIVILEGES FOR TABLES; Type: DEFAULT ACL; Schema: storage; Owner: postgres
--

ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO postgres;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO anon;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO authenticated;
ALTER DEFAULT PRIVILEGES FOR ROLE postgres IN SCHEMA storage GRANT ALL ON TABLES  TO service_role;


--
-- Name: issue_graphql_placeholder; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_graphql_placeholder ON sql_drop
         WHEN TAG IN ('DROP EXTENSION')
   EXECUTE FUNCTION extensions.set_graphql_placeholder();


ALTER EVENT TRIGGER issue_graphql_placeholder OWNER TO supabase_admin;

--
-- Name: issue_pg_cron_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_cron_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_cron_access();


ALTER EVENT TRIGGER issue_pg_cron_access OWNER TO supabase_admin;

--
-- Name: issue_pg_graphql_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_graphql_access ON ddl_command_end
         WHEN TAG IN ('CREATE FUNCTION')
   EXECUTE FUNCTION extensions.grant_pg_graphql_access();


ALTER EVENT TRIGGER issue_pg_graphql_access OWNER TO supabase_admin;

--
-- Name: issue_pg_net_access; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER issue_pg_net_access ON ddl_command_end
         WHEN TAG IN ('CREATE EXTENSION')
   EXECUTE FUNCTION extensions.grant_pg_net_access();


ALTER EVENT TRIGGER issue_pg_net_access OWNER TO supabase_admin;

--
-- Name: pgrst_ddl_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_ddl_watch ON ddl_command_end
   EXECUTE FUNCTION extensions.pgrst_ddl_watch();


ALTER EVENT TRIGGER pgrst_ddl_watch OWNER TO supabase_admin;

--
-- Name: pgrst_drop_watch; Type: EVENT TRIGGER; Schema: -; Owner: supabase_admin
--

CREATE EVENT TRIGGER pgrst_drop_watch ON sql_drop
   EXECUTE FUNCTION extensions.pgrst_drop_watch();


ALTER EVENT TRIGGER pgrst_drop_watch OWNER TO supabase_admin;

--
-- PostgreSQL database dump complete
--

--
-- PostgreSQL database cluster dump complete
--

